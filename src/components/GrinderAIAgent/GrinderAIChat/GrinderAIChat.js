import { useState, useEffect, useRef } from "react";
import "./GrinderAIChat.css";

const predefinedResponses = [
  "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
  "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è. –í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É...",
  "–≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å.",
  "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –Ω–∞ —ç—Ç—É —Ç–µ–º—É...",
  "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –º–æ–≥—É –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ...",
];

function GrinderAIChat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(false); // –°—Ç–∞–Ω –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —á–∞—Ç—É
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(scrollToBottom, []); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —á–∞—Ç –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ

  const simulateAIResponse = async () => {
    setIsTyping(true);
    await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000));
    const randomResponse = predefinedResponses[Math.floor(Math.random() * predefinedResponses.length)];
    setMessages((prevMessages) => [...prevMessages, { id: Date.now(), content: randomResponse, role: "assistant" }]);
    setIsTyping(false);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (input.trim()) {
      setMessages((prevMessages) => [...prevMessages, { id: Date.now(), content: input, role: "user" }]);
      setInput("");
      simulateAIResponse();
    }
  };

  const toggleChatWindow = () => {
    setIsChatOpen(!isChatOpen); // –ü–µ—Ä–µ–º–∏–∫–∞—î —Å—Ç–∞–Ω —á–∞—Ç—É
  };

  const closeChat = () => {
    setIsChatOpen(false); // –ó–∞–∫—Ä–∏–≤–∞—î —á–∞—Ç
  };

  return (
    <div>
      {/* –Ü–∫–æ–Ω–∫–∞ —á–∞—Ç—É –≤ –ø—Ä–∞–≤–æ–º—É –∫—É—Ç–∫—É */}
      <div className="chat-icon" onClick={toggleChatWindow}>
        <span role="img" aria-label="robot">ü§ñ</span>
      </div>

      {/* –í—ñ–∫–Ω–æ —á–∞—Ç—É */}
      {isChatOpen && (
        <div className="chat-container">
          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —á–∞—Ç—É */}
          <button className="close-chat" onClick={closeChat}>‚úñ</button>
          <div className="chat-messages">
            {messages.map((m) => (
              <div key={m.id} className={`message ${m.role}`}>
                <span className="message-content">{m.content}</span>
              </div>
            ))}
            {isTyping && (
              <div className="typing-indicator">
                <span>AI –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
          <form onSubmit={handleSubmit} className="chat-form">
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Enter the question"
              className="chat-input"
            />
            <button type="submit" className="chat-submit">
              Send
            </button>
          </form>
        </div>
      )}
    </div>
  );
}

export default GrinderAIChat;
