import {
  createBatchScheduler
} from "./chunk-6YBRIP4U.js";
import {
  css,
  unsafeCSS
} from "./chunk-PZP6M6XD.js";
import {
  LruMap,
  checksumAddress,
  defineFormatter,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  numberToHex,
  toHex
} from "./chunk-NZ6LB726.js";
import {
  BaseError,
  ChainDisconnectedError,
  ExecutionRevertedError,
  HttpRequestError,
  InternalRpcError,
  InvalidInputRpcError,
  InvalidParamsRpcError,
  InvalidRequestRpcError,
  JsonRpcVersionUnsupportedError,
  LimitExceededRpcError,
  LruMap as LruMap2,
  MethodNotFoundRpcError,
  MethodNotSupportedRpcError,
  ParseRpcError,
  ProviderDisconnectedError,
  ResourceNotFoundRpcError,
  ResourceUnavailableRpcError,
  RpcRequestError,
  SwitchChainError,
  TimeoutError,
  TransactionRejectedRpcError,
  UnauthorizedProviderError,
  UnknownRpcError,
  UnsupportedProviderMethodError,
  UserRejectedRequestError,
  formatUnits,
  hexToNumber as hexToNumber2,
  numberToHex as numberToHex2,
  stringToHex,
  stringify
} from "./chunk-DJAHXZKE.js";
import {
  HashMD
} from "./chunk-4FZNB7RA.js";
import {
  keccak_256
} from "./chunk-JAIDI6O3.js";
import {
  rotl,
  wrapConstructor
} from "./chunk-UDY33WFK.js";
import {
  __commonJS,
  __esm,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-L3IKO2KK.js";

// ../../node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "../../node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t2, e3) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs = e3();
    }(exports, function() {
      "use strict";
      var t2 = 1e3, e3 = 6e4, n6 = 36e5, r4 = "millisecond", i6 = "second", s4 = "minute", u5 = "hour", a4 = "day", o7 = "week", c8 = "month", f9 = "quarter", h6 = "year", d6 = "date", l8 = "Invalid Date", $4 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y7 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M5 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e4 = ["th", "st", "nd", "rd"], n7 = t3 % 100;
        return "[" + t3 + (e4[(n7 - 20) % 10] || e4[n7] || e4[0]) + "]";
      } }, m4 = function(t3, e4, n7) {
        var r5 = String(t3);
        return !r5 || r5.length >= e4 ? t3 : "" + Array(e4 + 1 - r5.length).join(n7) + t3;
      }, v7 = { s: m4, z: function(t3) {
        var e4 = -t3.utcOffset(), n7 = Math.abs(e4), r5 = Math.floor(n7 / 60), i7 = n7 % 60;
        return (e4 <= 0 ? "+" : "-") + m4(r5, 2, "0") + ":" + m4(i7, 2, "0");
      }, m: function t3(e4, n7) {
        if (e4.date() < n7.date())
          return -t3(n7, e4);
        var r5 = 12 * (n7.year() - e4.year()) + (n7.month() - e4.month()), i7 = e4.clone().add(r5, c8), s5 = n7 - i7 < 0, u6 = e4.clone().add(r5 + (s5 ? -1 : 1), c8);
        return +(-(r5 + (n7 - i7) / (s5 ? i7 - u6 : u6 - i7)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c8, y: h6, w: o7, d: a4, D: d6, h: u5, m: s4, s: i6, ms: r4, Q: f9 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g5 = "en", D3 = {};
      D3[g5] = M5;
      var p7 = "$isDayjsObject", S5 = function(t3) {
        return t3 instanceof _4 || !(!t3 || !t3[p7]);
      }, w7 = function t3(e4, n7, r5) {
        var i7;
        if (!e4)
          return g5;
        if ("string" == typeof e4) {
          var s5 = e4.toLowerCase();
          D3[s5] && (i7 = s5), n7 && (D3[s5] = n7, i7 = s5);
          var u6 = e4.split("-");
          if (!i7 && u6.length > 1)
            return t3(u6[0]);
        } else {
          var a5 = e4.name;
          D3[a5] = e4, i7 = a5;
        }
        return !r5 && i7 && (g5 = i7), i7 || !r5 && g5;
      }, O7 = function(t3, e4) {
        if (S5(t3))
          return t3.clone();
        var n7 = "object" == typeof e4 ? e4 : {};
        return n7.date = t3, n7.args = arguments, new _4(n7);
      }, b6 = v7;
      b6.l = w7, b6.i = S5, b6.w = function(t3, e4) {
        return O7(t3, { locale: e4.$L, utc: e4.$u, x: e4.$x, $offset: e4.$offset });
      };
      var _4 = function() {
        function M6(t3) {
          this.$L = w7(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p7] = true;
        }
        var m5 = M6.prototype;
        return m5.parse = function(t3) {
          this.$d = function(t4) {
            var e4 = t4.date, n7 = t4.utc;
            if (null === e4)
              return /* @__PURE__ */ new Date(NaN);
            if (b6.u(e4))
              return /* @__PURE__ */ new Date();
            if (e4 instanceof Date)
              return new Date(e4);
            if ("string" == typeof e4 && !/Z$/i.test(e4)) {
              var r5 = e4.match($4);
              if (r5) {
                var i7 = r5[2] - 1 || 0, s5 = (r5[7] || "0").substring(0, 3);
                return n7 ? new Date(Date.UTC(r5[1], i7, r5[3] || 1, r5[4] || 0, r5[5] || 0, r5[6] || 0, s5)) : new Date(r5[1], i7, r5[3] || 1, r5[4] || 0, r5[5] || 0, r5[6] || 0, s5);
              }
            }
            return new Date(e4);
          }(t3), this.init();
        }, m5.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m5.$utils = function() {
          return b6;
        }, m5.isValid = function() {
          return !(this.$d.toString() === l8);
        }, m5.isSame = function(t3, e4) {
          var n7 = O7(t3);
          return this.startOf(e4) <= n7 && n7 <= this.endOf(e4);
        }, m5.isAfter = function(t3, e4) {
          return O7(t3) < this.startOf(e4);
        }, m5.isBefore = function(t3, e4) {
          return this.endOf(e4) < O7(t3);
        }, m5.$g = function(t3, e4, n7) {
          return b6.u(t3) ? this[e4] : this.set(n7, t3);
        }, m5.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m5.valueOf = function() {
          return this.$d.getTime();
        }, m5.startOf = function(t3, e4) {
          var n7 = this, r5 = !!b6.u(e4) || e4, f10 = b6.p(t3), l9 = function(t4, e5) {
            var i7 = b6.w(n7.$u ? Date.UTC(n7.$y, e5, t4) : new Date(n7.$y, e5, t4), n7);
            return r5 ? i7 : i7.endOf(a4);
          }, $5 = function(t4, e5) {
            return b6.w(n7.toDate()[t4].apply(n7.toDate("s"), (r5 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e5)), n7);
          }, y8 = this.$W, M7 = this.$M, m6 = this.$D, v8 = "set" + (this.$u ? "UTC" : "");
          switch (f10) {
            case h6:
              return r5 ? l9(1, 0) : l9(31, 11);
            case c8:
              return r5 ? l9(1, M7) : l9(0, M7 + 1);
            case o7:
              var g6 = this.$locale().weekStart || 0, D4 = (y8 < g6 ? y8 + 7 : y8) - g6;
              return l9(r5 ? m6 - D4 : m6 + (6 - D4), M7);
            case a4:
            case d6:
              return $5(v8 + "Hours", 0);
            case u5:
              return $5(v8 + "Minutes", 1);
            case s4:
              return $5(v8 + "Seconds", 2);
            case i6:
              return $5(v8 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m5.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m5.$set = function(t3, e4) {
          var n7, o8 = b6.p(t3), f10 = "set" + (this.$u ? "UTC" : ""), l9 = (n7 = {}, n7[a4] = f10 + "Date", n7[d6] = f10 + "Date", n7[c8] = f10 + "Month", n7[h6] = f10 + "FullYear", n7[u5] = f10 + "Hours", n7[s4] = f10 + "Minutes", n7[i6] = f10 + "Seconds", n7[r4] = f10 + "Milliseconds", n7)[o8], $5 = o8 === a4 ? this.$D + (e4 - this.$W) : e4;
          if (o8 === c8 || o8 === h6) {
            var y8 = this.clone().set(d6, 1);
            y8.$d[l9]($5), y8.init(), this.$d = y8.set(d6, Math.min(this.$D, y8.daysInMonth())).$d;
          } else
            l9 && this.$d[l9]($5);
          return this.init(), this;
        }, m5.set = function(t3, e4) {
          return this.clone().$set(t3, e4);
        }, m5.get = function(t3) {
          return this[b6.p(t3)]();
        }, m5.add = function(r5, f10) {
          var d7, l9 = this;
          r5 = Number(r5);
          var $5 = b6.p(f10), y8 = function(t3) {
            var e4 = O7(l9);
            return b6.w(e4.date(e4.date() + Math.round(t3 * r5)), l9);
          };
          if ($5 === c8)
            return this.set(c8, this.$M + r5);
          if ($5 === h6)
            return this.set(h6, this.$y + r5);
          if ($5 === a4)
            return y8(1);
          if ($5 === o7)
            return y8(7);
          var M7 = (d7 = {}, d7[s4] = e3, d7[u5] = n6, d7[i6] = t2, d7)[$5] || 1, m6 = this.$d.getTime() + r5 * M7;
          return b6.w(m6, this);
        }, m5.subtract = function(t3, e4) {
          return this.add(-1 * t3, e4);
        }, m5.format = function(t3) {
          var e4 = this, n7 = this.$locale();
          if (!this.isValid())
            return n7.invalidDate || l8;
          var r5 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i7 = b6.z(this), s5 = this.$H, u6 = this.$m, a5 = this.$M, o8 = n7.weekdays, c9 = n7.months, f10 = n7.meridiem, h7 = function(t4, n8, i8, s6) {
            return t4 && (t4[n8] || t4(e4, r5)) || i8[n8].slice(0, s6);
          }, d7 = function(t4) {
            return b6.s(s5 % 12 || 12, t4, "0");
          }, $5 = f10 || function(t4, e5, n8) {
            var r6 = t4 < 12 ? "AM" : "PM";
            return n8 ? r6.toLowerCase() : r6;
          };
          return r5.replace(y7, function(t4, r6) {
            return r6 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e4.$y).slice(-2);
                case "YYYY":
                  return b6.s(e4.$y, 4, "0");
                case "M":
                  return a5 + 1;
                case "MM":
                  return b6.s(a5 + 1, 2, "0");
                case "MMM":
                  return h7(n7.monthsShort, a5, c9, 3);
                case "MMMM":
                  return h7(c9, a5);
                case "D":
                  return e4.$D;
                case "DD":
                  return b6.s(e4.$D, 2, "0");
                case "d":
                  return String(e4.$W);
                case "dd":
                  return h7(n7.weekdaysMin, e4.$W, o8, 2);
                case "ddd":
                  return h7(n7.weekdaysShort, e4.$W, o8, 3);
                case "dddd":
                  return o8[e4.$W];
                case "H":
                  return String(s5);
                case "HH":
                  return b6.s(s5, 2, "0");
                case "h":
                  return d7(1);
                case "hh":
                  return d7(2);
                case "a":
                  return $5(s5, u6, true);
                case "A":
                  return $5(s5, u6, false);
                case "m":
                  return String(u6);
                case "mm":
                  return b6.s(u6, 2, "0");
                case "s":
                  return String(e4.$s);
                case "ss":
                  return b6.s(e4.$s, 2, "0");
                case "SSS":
                  return b6.s(e4.$ms, 3, "0");
                case "Z":
                  return i7;
              }
              return null;
            }(t4) || i7.replace(":", "");
          });
        }, m5.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m5.diff = function(r5, d7, l9) {
          var $5, y8 = this, M7 = b6.p(d7), m6 = O7(r5), v8 = (m6.utcOffset() - this.utcOffset()) * e3, g6 = this - m6, D4 = function() {
            return b6.m(y8, m6);
          };
          switch (M7) {
            case h6:
              $5 = D4() / 12;
              break;
            case c8:
              $5 = D4();
              break;
            case f9:
              $5 = D4() / 3;
              break;
            case o7:
              $5 = (g6 - v8) / 6048e5;
              break;
            case a4:
              $5 = (g6 - v8) / 864e5;
              break;
            case u5:
              $5 = g6 / n6;
              break;
            case s4:
              $5 = g6 / e3;
              break;
            case i6:
              $5 = g6 / t2;
              break;
            default:
              $5 = g6;
          }
          return l9 ? $5 : b6.a($5);
        }, m5.daysInMonth = function() {
          return this.endOf(c8).$D;
        }, m5.$locale = function() {
          return D3[this.$L];
        }, m5.locale = function(t3, e4) {
          if (!t3)
            return this.$L;
          var n7 = this.clone(), r5 = w7(t3, e4, true);
          return r5 && (n7.$L = r5), n7;
        }, m5.clone = function() {
          return b6.w(this.$d, this);
        }, m5.toDate = function() {
          return new Date(this.valueOf());
        }, m5.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m5.toISOString = function() {
          return this.$d.toISOString();
        }, m5.toString = function() {
          return this.$d.toUTCString();
        }, M6;
      }(), k7 = _4.prototype;
      return O7.prototype = k7, [["$ms", r4], ["$s", i6], ["$m", s4], ["$H", u5], ["$W", a4], ["$M", c8], ["$y", h6], ["$D", d6]].forEach(function(t3) {
        k7[t3[1]] = function(e4) {
          return this.$g(e4, t3[0], t3[1]);
        };
      }), O7.extend = function(t3, e4) {
        return t3.$i || (t3(e4, _4, O7), t3.$i = true), O7;
      }, O7.locale = w7, O7.isDayjs = S5, O7.unix = function(t3) {
        return O7(1e3 * t3);
      }, O7.en = D3[g5], O7.Ls = D3, O7.p = {}, O7;
    });
  }
});

// ../../node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "../../node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e3, n6) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n6() : "function" == typeof define && define.amd ? define(n6) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_locale_en = n6();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e3) {
        var n6 = ["th", "st", "nd", "rd"], t2 = e3 % 100;
        return "[" + e3 + (n6[(t2 - 20) % 10] || n6[t2] || n6[0]) + "]";
      } };
    });
  }
});

// ../../node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "../../node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r4, e3) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (r4 = "undefined" != typeof globalThis ? globalThis : r4 || self).dayjs_plugin_relativeTime = e3();
    }(exports, function() {
      "use strict";
      return function(r4, e3, t2) {
        r4 = r4 || {};
        var n6 = e3.prototype, o7 = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i6(r5, e4, t3, o8) {
          return n6.fromToBase(r5, e4, t3, o8);
        }
        t2.en.relativeTime = o7, n6.fromToBase = function(e4, n7, i7, d7, u5) {
          for (var f9, a4, s4, l8 = i7.$locale().relativeTime || o7, h6 = r4.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m4 = h6.length, c8 = 0; c8 < m4; c8 += 1) {
            var y7 = h6[c8];
            y7.d && (f9 = d7 ? t2(e4).diff(i7, y7.d, true) : i7.diff(e4, y7.d, true));
            var p7 = (r4.rounding || Math.round)(Math.abs(f9));
            if (s4 = f9 > 0, p7 <= y7.r || !y7.r) {
              p7 <= 1 && c8 > 0 && (y7 = h6[c8 - 1]);
              var v7 = l8[y7.l];
              u5 && (p7 = u5("" + p7)), a4 = "string" == typeof v7 ? v7.replace("%d", p7) : v7(p7, n7, y7.l, s4);
              break;
            }
          }
          if (n7)
            return a4;
          var M5 = s4 ? l8.future : l8.past;
          return "function" == typeof M5 ? M5(a4) : M5.replace("%s", a4);
        }, n6.to = function(r5, e4) {
          return i6(r5, e4, this, true);
        }, n6.from = function(r5, e4) {
          return i6(r5, e4, this);
        };
        var d6 = function(r5) {
          return r5.$u ? t2.utc() : t2();
        };
        n6.toNow = function(r5) {
          return this.to(d6(this), r5);
        }, n6.fromNow = function(r5) {
          return this.from(d6(this), r5);
        };
      };
    });
  }
});

// ../../node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "../../node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e3, n6) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n6() : "function" == typeof define && define.amd ? define(n6) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_updateLocale = n6();
    }(exports, function() {
      "use strict";
      return function(e3, n6, t2) {
        t2.updateLocale = function(e4, n7) {
          var o7 = t2.Ls[e4];
          if (o7)
            return (n7 ? Object.keys(n7) : []).forEach(function(e5) {
              o7[e5] = n7[e5];
            }), o7;
        };
      };
    });
  }
});

// ../../node_modules/events/events.js
var require_events = __commonJS({
  "../../node_modules/events/events.js"(exports, module) {
    "use strict";
    var R3 = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R3 && typeof R3.apply === "function" ? R3.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R3 && typeof R3.ownKeys === "function") {
      ReflectOwnKeys = R3.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn)
        console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n6) {
      if (typeof n6 !== "number" || n6 < 0 || NumberIsNaN(n6)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n6 + ".");
      }
      this._maxListeners = n6;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i6 = 1; i6 < arguments.length; i6++)
        args.push(arguments[i6]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er4;
        if (args.length > 0)
          er4 = args[0];
        if (er4 instanceof Error) {
          throw er4;
        }
        var err = new Error("Unhandled error." + (er4 ? " (" + er4.message + ")" : ""));
        err.context = er4;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i6 = 0; i6 < len; ++i6)
          ReflectApply(listeners[i6], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m4;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m4 = _getMaxListeners(target);
        if (m4 > 0 && existing.length > m4 && !existing.warned) {
          existing.warned = true;
          var w7 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w7.name = "MaxListenersExceededWarning";
          w7.emitter = target;
          w7.type = type;
          w7.count = existing.length;
          ProcessEmitWarning(w7);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state23 = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state23);
      wrapped.listener = listener;
      state23.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i6, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i6 = list.length - 1; i6 >= 0; i6--) {
          if (list[i6] === listener || list[i6].listener === listener) {
            originalListener = list[i6].listener;
            position = i6;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i6;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys2 = Object.keys(events);
        var key;
        for (i6 = 0; i6 < keys2.length; ++i6) {
          key = keys2[i6];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i6 = listeners.length - 1; i6 >= 0; i6--) {
          this.removeListener(type, listeners[i6]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n6) {
      var copy = new Array(n6);
      for (var i6 = 0; i6 < n6; ++i6)
        copy[i6] = arr[i6];
      return copy;
    }
    function spliceOne(list, index2) {
      for (; index2 + 1 < list.length; index2++)
        list[index2] = list[index2 + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i6 = 0; i6 < ret.length; ++i6) {
        ret[i6] = arr[i6].listener || arr[i6];
      }
      return ret;
    }
    function once(emitter, name2) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name2, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
        if (name2 !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name2, listener);
        } else {
          emitter.on(name2, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name2, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name2, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// ../../node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d6, b6) {
  extendStatics(d6, b6);
  function __() {
    this.constructor = d6;
  }
  d6.prototype = b6 === null ? Object.create(b6) : (__.prototype = b6.prototype, new __());
}
function __rest(s4, e3) {
  var t2 = {};
  for (var p7 in s4)
    if (Object.prototype.hasOwnProperty.call(s4, p7) && e3.indexOf(p7) < 0)
      t2[p7] = s4[p7];
  if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i6 = 0, p7 = Object.getOwnPropertySymbols(s4); i6 < p7.length; i6++) {
      if (e3.indexOf(p7[i6]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p7[i6]))
        t2[p7[i6]] = s4[p7[i6]];
    }
  return t2;
}
function __decorate(decorators, target, key, desc) {
  var c8 = arguments.length, r4 = c8 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d6;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r4 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i6 = decorators.length - 1; i6 >= 0; i6--)
      if (d6 = decorators[i6])
        r4 = (c8 < 3 ? d6(r4) : c8 > 3 ? d6(target, key, r4) : d6(target, key)) || r4;
  return c8 > 3 && r4 && Object.defineProperty(target, key, r4), r4;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P7, generator) {
  function adopt(value) {
    return value instanceof P7 ? value : new P7(function(resolve) {
      resolve(value);
    });
  }
  return new (P7 || (P7 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _4 = { label: 0, sent: function() {
    if (t2[0] & 1)
      throw t2[1];
    return t2[1];
  }, trys: [], ops: [] }, f9, y7, t2, g5;
  return g5 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g5[Symbol.iterator] = function() {
    return this;
  }), g5;
  function verb(n6) {
    return function(v7) {
      return step([n6, v7]);
    };
  }
  function step(op) {
    if (f9)
      throw new TypeError("Generator is already executing.");
    while (_4)
      try {
        if (f9 = 1, y7 && (t2 = op[0] & 2 ? y7["return"] : op[0] ? y7["throw"] || ((t2 = y7["return"]) && t2.call(y7), 0) : y7.next) && !(t2 = t2.call(y7, op[1])).done)
          return t2;
        if (y7 = 0, t2)
          op = [op[0] & 2, t2.value];
        switch (op[0]) {
          case 0:
          case 1:
            t2 = op;
            break;
          case 4:
            _4.label++;
            return { value: op[1], done: false };
          case 5:
            _4.label++;
            y7 = op[1];
            op = [0];
            continue;
          case 7:
            op = _4.ops.pop();
            _4.trys.pop();
            continue;
          default:
            if (!(t2 = _4.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _4 = 0;
              continue;
            }
            if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
              _4.label = op[1];
              break;
            }
            if (op[0] === 6 && _4.label < t2[1]) {
              _4.label = t2[1];
              t2 = op;
              break;
            }
            if (t2 && _4.label < t2[2]) {
              _4.label = t2[2];
              _4.ops.push(op);
              break;
            }
            if (t2[2])
              _4.ops.pop();
            _4.trys.pop();
            continue;
        }
        op = body.call(thisArg, _4);
      } catch (e3) {
        op = [6, e3];
        y7 = 0;
      } finally {
        f9 = t2 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o7, m4, k7, k22) {
  if (k22 === void 0)
    k22 = k7;
  o7[k22] = m4[k7];
}
function __exportStar(m4, exports) {
  for (var p7 in m4)
    if (p7 !== "default" && !exports.hasOwnProperty(p7))
      exports[p7] = m4[p7];
}
function __values(o7) {
  var s4 = typeof Symbol === "function" && Symbol.iterator, m4 = s4 && o7[s4], i6 = 0;
  if (m4)
    return m4.call(o7);
  if (o7 && typeof o7.length === "number")
    return {
      next: function() {
        if (o7 && i6 >= o7.length)
          o7 = void 0;
        return { value: o7 && o7[i6++], done: !o7 };
      }
    };
  throw new TypeError(s4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o7, n6) {
  var m4 = typeof Symbol === "function" && o7[Symbol.iterator];
  if (!m4)
    return o7;
  var i6 = m4.call(o7), r4, ar4 = [], e3;
  try {
    while ((n6 === void 0 || n6-- > 0) && !(r4 = i6.next()).done)
      ar4.push(r4.value);
  } catch (error) {
    e3 = { error };
  } finally {
    try {
      if (r4 && !r4.done && (m4 = i6["return"]))
        m4.call(i6);
    } finally {
      if (e3)
        throw e3.error;
    }
  }
  return ar4;
}
function __spread() {
  for (var ar4 = [], i6 = 0; i6 < arguments.length; i6++)
    ar4 = ar4.concat(__read(arguments[i6]));
  return ar4;
}
function __spreadArrays() {
  for (var s4 = 0, i6 = 0, il = arguments.length; i6 < il; i6++)
    s4 += arguments[i6].length;
  for (var r4 = Array(s4), k7 = 0, i6 = 0; i6 < il; i6++)
    for (var a4 = arguments[i6], j4 = 0, jl = a4.length; j4 < jl; j4++, k7++)
      r4[k7] = a4[j4];
  return r4;
}
function __await(v7) {
  return this instanceof __await ? (this.v = v7, this) : new __await(v7);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g5 = generator.apply(thisArg, _arguments || []), i6, q2 = [];
  return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6;
  function verb(n6) {
    if (g5[n6])
      i6[n6] = function(v7) {
        return new Promise(function(a4, b6) {
          q2.push([n6, v7, a4, b6]) > 1 || resume(n6, v7);
        });
      };
  }
  function resume(n6, v7) {
    try {
      step(g5[n6](v7));
    } catch (e3) {
      settle(q2[0][3], e3);
    }
  }
  function step(r4) {
    r4.value instanceof __await ? Promise.resolve(r4.value.v).then(fulfill, reject) : settle(q2[0][2], r4);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f9, v7) {
    if (f9(v7), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o7) {
  var i6, p7;
  return i6 = {}, verb("next"), verb("throw", function(e3) {
    throw e3;
  }), verb("return"), i6[Symbol.iterator] = function() {
    return this;
  }, i6;
  function verb(n6, f9) {
    i6[n6] = o7[n6] ? function(v7) {
      return (p7 = !p7) ? { value: __await(o7[n6](v7)), done: n6 === "return" } : f9 ? f9(v7) : v7;
    } : f9;
  }
}
function __asyncValues(o7) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m4 = o7[Symbol.asyncIterator], i6;
  return m4 ? m4.call(o7) : (o7 = typeof __values === "function" ? __values(o7) : o7[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6);
  function verb(n6) {
    i6[n6] = o7[n6] && function(v7) {
      return new Promise(function(resolve, reject) {
        v7 = o7[n6](v7), settle(resolve, reject, v7.done, v7.value);
      });
    };
  }
  function settle(resolve, reject, d6, v7) {
    Promise.resolve(v7).then(function(v8) {
      resolve({ value: v8, done: d6 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k7 in mod)
      if (Object.hasOwnProperty.call(mod, k7))
        result[k7] = mod[k7];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "../../node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d6, b6) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d7, b7) {
        d7.__proto__ = b7;
      } || function(d7, b7) {
        for (var p7 in b7)
          if (b7.hasOwnProperty(p7))
            d7[p7] = b7[p7];
      };
      return extendStatics(d6, b6);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t2) {
        for (var s4, i6 = 1, n6 = arguments.length; i6 < n6; i6++) {
          s4 = arguments[i6];
          for (var p7 in s4)
            if (Object.prototype.hasOwnProperty.call(s4, p7))
              t2[p7] = s4[p7];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// ../../node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "../../node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// ../../node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "../../node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o7) {
      try {
        return JSON.stringify(o7);
      } catch (e3) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f9, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f9 === "object" && f9 !== null) {
        var len = args.length + offset;
        if (len === 1)
          return f9;
        var objects = new Array(len);
        objects[0] = ss2(f9);
        for (var index2 = 1; index2 < len; index2++) {
          objects[index2] = ss2(args[index2]);
        }
        return objects.join(" ");
      }
      if (typeof f9 !== "string") {
        return f9;
      }
      var argLen = args.length;
      if (argLen === 0)
        return f9;
      var str = "";
      var a4 = 1 - offset;
      var lastPos = -1;
      var flen = f9 && f9.length || 0;
      for (var i6 = 0; i6 < flen; ) {
        if (f9.charCodeAt(i6) === 37 && i6 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f9.charCodeAt(i6 + 1)) {
            case 100:
            case 102:
              if (a4 >= argLen)
                break;
              if (args[a4] == null)
                break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += Number(args[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 105:
              if (a4 >= argLen)
                break;
              if (args[a4] == null)
                break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += Math.floor(Number(args[a4]));
              lastPos = i6 + 2;
              i6++;
              break;
            case 79:
            case 111:
            case 106:
              if (a4 >= argLen)
                break;
              if (args[a4] === void 0)
                break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              var type = typeof args[a4];
              if (type === "string") {
                str += "'" + args[a4] + "'";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              if (type === "function") {
                str += args[a4].name || "<anonymous>";
                lastPos = i6 + 2;
                i6++;
                break;
              }
              str += ss2(args[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 115:
              if (a4 >= argLen)
                break;
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += String(args[a4]);
              lastPos = i6 + 2;
              i6++;
              break;
            case 37:
              if (lastPos < i6)
                str += f9.slice(lastPos, i6);
              str += "%";
              lastPos = i6 + 2;
              i6++;
              a4--;
              break;
          }
          ++a4;
        }
        ++i6;
      }
      if (lastPos === -1)
        return f9;
      else if (lastPos < flen) {
        str += f9.slice(lastPos);
      }
      return str;
    }
  }
});

// ../../node_modules/pino/browser.js
var require_browser = __commonJS({
  "../../node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k7) {
          return k7 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write)
        opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1)
        stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false)
        opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log)
        logger.log = noop;
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2)
        logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger, "error", "log");
        set2(setOpts, logger, "fatal", "error");
        set2(setOpts, logger, "warn", "error");
        set2(setOpts, logger, "info", "log");
        set2(setOpts, logger, "debug", "log");
        set2(setOpts, logger, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger, level, fallback3) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback3] || noop;
      wrap(opts, logger, level);
    }
    function wrap(opts, logger, level) {
      if (!opts.transmit && logger[level] === noop)
        return;
      logger[level] = function(write) {
        return function LOG() {
          const ts2 = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i6 = 0; i6 < args.length; i6++)
            args[i6] = arguments[i6];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject)
            write.call(proto, asObject(this, level, args, ts2));
          else
            write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue)
              return;
            transmit(this, {
              ts: ts2,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args);
          }
        };
      }(logger[level]);
    }
    function asObject(logger, level, args, ts2) {
      if (logger._serialize)
        applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o7 = {};
      if (ts2) {
        o7.time = ts2;
      }
      o7.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1)
        lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o7, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string")
        msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0)
        o7.msg = msg;
      return o7;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i6 in args) {
        if (stdErrSerialize && args[i6] instanceof Error) {
          args[i6] = pino.stdSerializers.err(args[i6]);
        } else if (typeof args[i6] === "object" && !Array.isArray(args[i6])) {
          for (const k7 in args[i6]) {
            if (serialize && serialize.indexOf(k7) > -1 && k7 in serializers) {
              args[i6][k7] = serializers[k7](args[i6][k7]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i6 = 1; i6 < args.length; i6++) {
          args[i6] = arguments[i6 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger, opts, args) {
      const send = opts.send;
      const ts2 = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts2;
      logger._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a4) {
      return a4;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o7) {
        return typeof o7 !== "undefined" && o7;
      }
      try {
        if (typeof globalThis !== "undefined")
          return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e3) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// ../../node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "../../node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// ../../node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "../../node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e3) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i6 = 0; i6 < links.length; i6++) {
          const link = links[i6];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i6 = 0; i6 < metaTags.length; i6++) {
          const tag = metaTags[i6];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// ../../node_modules/elliptic/package.json
var require_package = __commonJS({
  "../../node_modules/elliptic/package.json"(exports, module) {
    module.exports = {
      name: "elliptic",
      version: "6.6.1",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_4, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "../../node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert3(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base3, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base3 === "le" || base3 === "be") {
            endian = base3;
            base3 = 10;
          }
          this._init(number || 0, base3 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e3) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base3, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base3, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base3, endian);
        }
        if (base3 === "hex") {
          base3 = 16;
        }
        assert3(base3 === (base3 | 0) && base3 >= 2 && base3 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base3 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base3, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base3, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number, base3, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert3(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base3, endian);
      };
      BN.prototype._initArray = function _initArray(number, base3, endian) {
        assert3(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var j4, w7;
        var off = 0;
        if (endian === "be") {
          for (i6 = number.length - 1, j4 = 0; i6 >= 0; i6 -= 3) {
            w7 = number[i6] | number[i6 - 1] << 8 | number[i6 - 2] << 16;
            this.words[j4] |= w7 << off & 67108863;
            this.words[j4 + 1] = w7 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j4++;
            }
          }
        } else if (endian === "le") {
          for (i6 = 0, j4 = 0; i6 < number.length; i6 += 3) {
            w7 = number[i6] | number[i6 + 1] << 8 | number[i6 + 2] << 16;
            this.words[j4] |= w7 << off & 67108863;
            this.words[j4 + 1] = w7 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j4++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string2, index2) {
        var c8 = string2.charCodeAt(index2);
        if (c8 >= 65 && c8 <= 70) {
          return c8 - 55;
        } else if (c8 >= 97 && c8 <= 102) {
          return c8 - 87;
        } else {
          return c8 - 48 & 15;
        }
      }
      function parseHexByte(string2, lowerBound, index2) {
        var r4 = parseHex4Bits(string2, index2);
        if (index2 - 1 >= lowerBound) {
          r4 |= parseHex4Bits(string2, index2 - 1) << 4;
        }
        return r4;
      }
      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          this.words[i6] = 0;
        }
        var off = 0;
        var j4 = 0;
        var w7;
        if (endian === "be") {
          for (i6 = number.length - 1; i6 >= start; i6 -= 2) {
            w7 = parseHexByte(number, start, i6) << off;
            this.words[j4] |= w7 & 67108863;
            if (off >= 18) {
              off -= 18;
              j4 += 1;
              this.words[j4] |= w7 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i6 = parseLength % 2 === 0 ? start + 1 : start; i6 < number.length; i6 += 2) {
            w7 = parseHexByte(number, start, i6) << off;
            this.words[j4] |= w7 & 67108863;
            if (off >= 18) {
              off -= 18;
              j4 += 1;
              this.words[j4] |= w7 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r4 = 0;
        var len = Math.min(str.length, end);
        for (var i6 = start; i6 < len; i6++) {
          var c8 = str.charCodeAt(i6) - 48;
          r4 *= mul;
          if (c8 >= 49) {
            r4 += c8 - 49 + 10;
          } else if (c8 >= 17) {
            r4 += c8 - 17 + 10;
          } else {
            r4 += c8;
          }
        }
        return r4;
      }
      BN.prototype._parseBase = function _parseBase(number, base3, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base3) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base3 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i6 = start; i6 < end; i6 += limbLen) {
          word = parseBase(number, i6, i6 + limbLen, base3);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i6, number.length, base3);
          for (i6 = 0; i6 < mod; i6++) {
            pow *= base3;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i6 = 0; i6 < this.length; i6++) {
          dest.words[i6] = this.words[i6];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r4 = new BN(null);
        this.copy(r4);
        return r4;
      };
      BN.prototype._expand = function _expand(size8) {
        while (this.length < size8) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString5(base3, padding) {
        base3 = base3 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base3 === 16 || base3 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i6 = 0; i6 < this.length; i6++) {
            var w7 = this.words[i6];
            var word = ((w7 << off | carry) & 16777215).toString(16);
            carry = w7 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i6--;
            }
            if (carry !== 0 || i6 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base3 === (base3 | 0) && base3 >= 2 && base3 <= 36) {
          var groupSize = groupSizes[base3];
          var groupBase = groupBases[base3];
          out = "";
          var c8 = this.clone();
          c8.negative = 0;
          while (!c8.isZero()) {
            var r4 = c8.modn(groupBase).toString(base3);
            c8 = c8.idivn(groupBase);
            if (!c8.isZero()) {
              out = zeros[groupSize - r4.length] + r4 + out;
            } else {
              out = r4 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert3(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber5() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert3(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length2) {
        assert3(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length2);
      };
      BN.prototype.toArray = function toArray(endian, length2) {
        return this.toArrayLike(Array, endian, length2);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length2) {
        var byteLength = this.byteLength();
        var reqLength = length2 || Math.max(1, byteLength);
        assert3(byteLength <= reqLength, "byte array longer than desired length");
        assert3(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b6, i6;
        var q2 = this.clone();
        if (!littleEndian) {
          for (i6 = 0; i6 < reqLength - byteLength; i6++) {
            res[i6] = 0;
          }
          for (i6 = 0; !q2.isZero(); i6++) {
            b6 = q2.andln(255);
            q2.iushrn(8);
            res[reqLength - i6 - 1] = b6;
          }
        } else {
          for (i6 = 0; !q2.isZero(); i6++) {
            b6 = q2.andln(255);
            q2.iushrn(8);
            res[i6] = b6;
          }
          for (; i6 < reqLength; i6++) {
            res[i6] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w7) {
          return 32 - Math.clz32(w7);
        };
      } else {
        BN.prototype._countBits = function _countBits(w7) {
          var t2 = w7;
          var r4 = 0;
          if (t2 >= 4096) {
            r4 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r4 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r4 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r4 += 2;
            t2 >>>= 2;
          }
          return r4 + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w7) {
        if (w7 === 0)
          return 26;
        var t2 = w7;
        var r4 = 0;
        if ((t2 & 8191) === 0) {
          r4 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r4 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r4 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r4 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r4++;
        }
        return r4;
      };
      BN.prototype.bitLength = function bitLength() {
        var w7 = this.words[this.length - 1];
        var hi3 = this._countBits(w7);
        return (this.length - 1) * 26 + hi3;
      };
      function toBitArray(num) {
        var w7 = new Array(num.bitLength());
        for (var bit = 0; bit < w7.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w7[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w7;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r4 = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var b6 = this._zeroBits(this.words[i6]);
          r4 += b6;
          if (b6 !== 26)
            break;
        }
        return r4;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i6 = 0; i6 < num.length; i6++) {
          this.words[i6] = this.words[i6] | num.words[i6];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert3((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or5(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b6;
        if (this.length > num.length) {
          b6 = num;
        } else {
          b6 = this;
        }
        for (var i6 = 0; i6 < b6.length; i6++) {
          this.words[i6] = this.words[i6] & num.words[i6];
        }
        this.length = b6.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert3((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a4;
        var b6;
        if (this.length > num.length) {
          a4 = this;
          b6 = num;
        } else {
          a4 = num;
          b6 = this;
        }
        for (var i6 = 0; i6 < b6.length; i6++) {
          this.words[i6] = a4.words[i6] ^ b6.words[i6];
        }
        if (this !== a4) {
          for (; i6 < a4.length; i6++) {
            this.words[i6] = a4.words[i6];
          }
        }
        this.length = a4.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert3((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor2(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert3(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i6 = 0; i6 < bytesNeeded; i6++) {
          this.words[i6] = ~this.words[i6] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i6] = ~this.words[i6] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert3(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r4;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r4 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r4 = this.isub(num);
          num.negative = 1;
          return r4._normSign();
        }
        var a4, b6;
        if (this.length > num.length) {
          a4 = this;
          b6 = num;
        } else {
          a4 = num;
          b6 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b6.length; i6++) {
          r4 = (a4.words[i6] | 0) + (b6.words[i6] | 0) + carry;
          this.words[i6] = r4 & 67108863;
          carry = r4 >>> 26;
        }
        for (; carry !== 0 && i6 < a4.length; i6++) {
          r4 = (a4.words[i6] | 0) + carry;
          this.words[i6] = r4 & 67108863;
          carry = r4 >>> 26;
        }
        this.length = a4.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a4 !== this) {
          for (; i6 < a4.length; i6++) {
            this.words[i6] = a4.words[i6];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r4 = this.iadd(num);
          num.negative = 1;
          return r4._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a4, b6;
        if (cmp > 0) {
          a4 = this;
          b6 = num;
        } else {
          a4 = num;
          b6 = this;
        }
        var carry = 0;
        for (var i6 = 0; i6 < b6.length; i6++) {
          r4 = (a4.words[i6] | 0) - (b6.words[i6] | 0) + carry;
          carry = r4 >> 26;
          this.words[i6] = r4 & 67108863;
        }
        for (; carry !== 0 && i6 < a4.length; i6++) {
          r4 = (a4.words[i6] | 0) + carry;
          carry = r4 >> 26;
          this.words[i6] = r4 & 67108863;
        }
        if (carry === 0 && i6 < a4.length && a4 !== this) {
          for (; i6 < a4.length; i6++) {
            this.words[i6] = a4.words[i6];
          }
        }
        this.length = Math.max(this.length, i6);
        if (a4 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a4 = self2.words[0] | 0;
        var b6 = num.words[0] | 0;
        var r4 = a4 * b6;
        var lo4 = r4 & 67108863;
        var carry = r4 / 67108864 | 0;
        out.words[0] = lo4;
        for (var k7 = 1; k7 < len; k7++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k7, num.length - 1);
          for (var j4 = Math.max(0, k7 - self2.length + 1); j4 <= maxJ; j4++) {
            var i6 = k7 - j4 | 0;
            a4 = self2.words[i6] | 0;
            b6 = num.words[j4] | 0;
            r4 = a4 * b6 + rword;
            ncarry += r4 / 67108864 | 0;
            rword = r4 & 67108863;
          }
          out.words[k7] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k7] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a4 = self2.words;
        var b6 = num.words;
        var o7 = out.words;
        var c8 = 0;
        var lo4;
        var mid;
        var hi3;
        var a0 = a4[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a4[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a4[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a32 = a4[3] | 0;
        var al3 = a32 & 8191;
        var ah3 = a32 >>> 13;
        var a42 = a4[4] | 0;
        var al4 = a42 & 8191;
        var ah4 = a42 >>> 13;
        var a5 = a4[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a4[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a4[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a4[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a4[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b6[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b6[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b6[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b32 = b6[3] | 0;
        var bl3 = b32 & 8191;
        var bh3 = b32 >>> 13;
        var b42 = b6[4] | 0;
        var bl4 = b42 & 8191;
        var bh4 = b42 >>> 13;
        var b52 = b6[5] | 0;
        var bl5 = b52 & 8191;
        var bh5 = b52 >>> 13;
        var b62 = b6[6] | 0;
        var bl6 = b62 & 8191;
        var bh6 = b62 >>> 13;
        var b7 = b6[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b6[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b6[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo4 = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi3 = Math.imul(ah0, bh0);
        var w0 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo4 = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi3 = Math.imul(ah1, bh0);
        lo4 = lo4 + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi3 = hi3 + Math.imul(ah0, bh1) | 0;
        var w1 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo4 = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi3 = Math.imul(ah2, bh0);
        lo4 = lo4 + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi3 = hi3 + Math.imul(ah1, bh1) | 0;
        lo4 = lo4 + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi3 = hi3 + Math.imul(ah0, bh2) | 0;
        var w22 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
        w22 &= 67108863;
        lo4 = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi3 = Math.imul(ah3, bh0);
        lo4 = lo4 + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi3 = hi3 + Math.imul(ah2, bh1) | 0;
        lo4 = lo4 + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi3 = hi3 + Math.imul(ah1, bh2) | 0;
        lo4 = lo4 + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi3 = hi3 + Math.imul(ah0, bh3) | 0;
        var w32 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
        w32 &= 67108863;
        lo4 = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi3 = Math.imul(ah4, bh0);
        lo4 = lo4 + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi3 = hi3 + Math.imul(ah3, bh1) | 0;
        lo4 = lo4 + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi3 = hi3 + Math.imul(ah2, bh2) | 0;
        lo4 = lo4 + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi3 = hi3 + Math.imul(ah1, bh3) | 0;
        lo4 = lo4 + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi3 = hi3 + Math.imul(ah0, bh4) | 0;
        var w42 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w42 >>> 26) | 0;
        w42 &= 67108863;
        lo4 = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi3 = Math.imul(ah5, bh0);
        lo4 = lo4 + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi3 = hi3 + Math.imul(ah4, bh1) | 0;
        lo4 = lo4 + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi3 = hi3 + Math.imul(ah3, bh2) | 0;
        lo4 = lo4 + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi3 = hi3 + Math.imul(ah2, bh3) | 0;
        lo4 = lo4 + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi3 = hi3 + Math.imul(ah1, bh4) | 0;
        lo4 = lo4 + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi3 = hi3 + Math.imul(ah0, bh5) | 0;
        var w52 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w52 >>> 26) | 0;
        w52 &= 67108863;
        lo4 = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi3 = Math.imul(ah6, bh0);
        lo4 = lo4 + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi3 = hi3 + Math.imul(ah5, bh1) | 0;
        lo4 = lo4 + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi3 = hi3 + Math.imul(ah4, bh2) | 0;
        lo4 = lo4 + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi3 = hi3 + Math.imul(ah3, bh3) | 0;
        lo4 = lo4 + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi3 = hi3 + Math.imul(ah2, bh4) | 0;
        lo4 = lo4 + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi3 = hi3 + Math.imul(ah1, bh5) | 0;
        lo4 = lo4 + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi3 = hi3 + Math.imul(ah0, bh6) | 0;
        var w62 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w62 >>> 26) | 0;
        w62 &= 67108863;
        lo4 = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi3 = Math.imul(ah7, bh0);
        lo4 = lo4 + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi3 = hi3 + Math.imul(ah6, bh1) | 0;
        lo4 = lo4 + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi3 = hi3 + Math.imul(ah5, bh2) | 0;
        lo4 = lo4 + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi3 = hi3 + Math.imul(ah4, bh3) | 0;
        lo4 = lo4 + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi3 = hi3 + Math.imul(ah3, bh4) | 0;
        lo4 = lo4 + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi3 = hi3 + Math.imul(ah2, bh5) | 0;
        lo4 = lo4 + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi3 = hi3 + Math.imul(ah1, bh6) | 0;
        lo4 = lo4 + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi3 = hi3 + Math.imul(ah0, bh7) | 0;
        var w7 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo4 = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi3 = Math.imul(ah8, bh0);
        lo4 = lo4 + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi3 = hi3 + Math.imul(ah7, bh1) | 0;
        lo4 = lo4 + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi3 = hi3 + Math.imul(ah6, bh2) | 0;
        lo4 = lo4 + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi3 = hi3 + Math.imul(ah5, bh3) | 0;
        lo4 = lo4 + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi3 = hi3 + Math.imul(ah4, bh4) | 0;
        lo4 = lo4 + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi3 = hi3 + Math.imul(ah3, bh5) | 0;
        lo4 = lo4 + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi3 = hi3 + Math.imul(ah2, bh6) | 0;
        lo4 = lo4 + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi3 = hi3 + Math.imul(ah1, bh7) | 0;
        lo4 = lo4 + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi3 = hi3 + Math.imul(ah0, bh8) | 0;
        var w8 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo4 = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi3 = Math.imul(ah9, bh0);
        lo4 = lo4 + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi3 = hi3 + Math.imul(ah8, bh1) | 0;
        lo4 = lo4 + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi3 = hi3 + Math.imul(ah7, bh2) | 0;
        lo4 = lo4 + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi3 = hi3 + Math.imul(ah6, bh3) | 0;
        lo4 = lo4 + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi3 = hi3 + Math.imul(ah5, bh4) | 0;
        lo4 = lo4 + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi3 = hi3 + Math.imul(ah4, bh5) | 0;
        lo4 = lo4 + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi3 = hi3 + Math.imul(ah3, bh6) | 0;
        lo4 = lo4 + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi3 = hi3 + Math.imul(ah2, bh7) | 0;
        lo4 = lo4 + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi3 = hi3 + Math.imul(ah1, bh8) | 0;
        lo4 = lo4 + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi3 = hi3 + Math.imul(ah0, bh9) | 0;
        var w9 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo4 = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi3 = Math.imul(ah9, bh1);
        lo4 = lo4 + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi3 = hi3 + Math.imul(ah8, bh2) | 0;
        lo4 = lo4 + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi3 = hi3 + Math.imul(ah7, bh3) | 0;
        lo4 = lo4 + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi3 = hi3 + Math.imul(ah6, bh4) | 0;
        lo4 = lo4 + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi3 = hi3 + Math.imul(ah5, bh5) | 0;
        lo4 = lo4 + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi3 = hi3 + Math.imul(ah4, bh6) | 0;
        lo4 = lo4 + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi3 = hi3 + Math.imul(ah3, bh7) | 0;
        lo4 = lo4 + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi3 = hi3 + Math.imul(ah2, bh8) | 0;
        lo4 = lo4 + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi3 = hi3 + Math.imul(ah1, bh9) | 0;
        var w10 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo4 = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi3 = Math.imul(ah9, bh2);
        lo4 = lo4 + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi3 = hi3 + Math.imul(ah8, bh3) | 0;
        lo4 = lo4 + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi3 = hi3 + Math.imul(ah7, bh4) | 0;
        lo4 = lo4 + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi3 = hi3 + Math.imul(ah6, bh5) | 0;
        lo4 = lo4 + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi3 = hi3 + Math.imul(ah5, bh6) | 0;
        lo4 = lo4 + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi3 = hi3 + Math.imul(ah4, bh7) | 0;
        lo4 = lo4 + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi3 = hi3 + Math.imul(ah3, bh8) | 0;
        lo4 = lo4 + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi3 = hi3 + Math.imul(ah2, bh9) | 0;
        var w11 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo4 = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi3 = Math.imul(ah9, bh3);
        lo4 = lo4 + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi3 = hi3 + Math.imul(ah8, bh4) | 0;
        lo4 = lo4 + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi3 = hi3 + Math.imul(ah7, bh5) | 0;
        lo4 = lo4 + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi3 = hi3 + Math.imul(ah6, bh6) | 0;
        lo4 = lo4 + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi3 = hi3 + Math.imul(ah5, bh7) | 0;
        lo4 = lo4 + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi3 = hi3 + Math.imul(ah4, bh8) | 0;
        lo4 = lo4 + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi3 = hi3 + Math.imul(ah3, bh9) | 0;
        var w12 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo4 = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi3 = Math.imul(ah9, bh4);
        lo4 = lo4 + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi3 = hi3 + Math.imul(ah8, bh5) | 0;
        lo4 = lo4 + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi3 = hi3 + Math.imul(ah7, bh6) | 0;
        lo4 = lo4 + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi3 = hi3 + Math.imul(ah6, bh7) | 0;
        lo4 = lo4 + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi3 = hi3 + Math.imul(ah5, bh8) | 0;
        lo4 = lo4 + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi3 = hi3 + Math.imul(ah4, bh9) | 0;
        var w13 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo4 = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi3 = Math.imul(ah9, bh5);
        lo4 = lo4 + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi3 = hi3 + Math.imul(ah8, bh6) | 0;
        lo4 = lo4 + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi3 = hi3 + Math.imul(ah7, bh7) | 0;
        lo4 = lo4 + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi3 = hi3 + Math.imul(ah6, bh8) | 0;
        lo4 = lo4 + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi3 = hi3 + Math.imul(ah5, bh9) | 0;
        var w14 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo4 = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi3 = Math.imul(ah9, bh6);
        lo4 = lo4 + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi3 = hi3 + Math.imul(ah8, bh7) | 0;
        lo4 = lo4 + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi3 = hi3 + Math.imul(ah7, bh8) | 0;
        lo4 = lo4 + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi3 = hi3 + Math.imul(ah6, bh9) | 0;
        var w15 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo4 = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi3 = Math.imul(ah9, bh7);
        lo4 = lo4 + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi3 = hi3 + Math.imul(ah8, bh8) | 0;
        lo4 = lo4 + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi3 = hi3 + Math.imul(ah7, bh9) | 0;
        var w16 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo4 = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi3 = Math.imul(ah9, bh8);
        lo4 = lo4 + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi3 = hi3 + Math.imul(ah8, bh9) | 0;
        var w17 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo4 = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi3 = Math.imul(ah9, bh9);
        var w18 = (c8 + lo4 | 0) + ((mid & 8191) << 13) | 0;
        c8 = (hi3 + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o7[0] = w0;
        o7[1] = w1;
        o7[2] = w22;
        o7[3] = w32;
        o7[4] = w42;
        o7[5] = w52;
        o7[6] = w62;
        o7[7] = w7;
        o7[8] = w8;
        o7[9] = w9;
        o7[10] = w10;
        o7[11] = w11;
        o7[12] = w12;
        o7[13] = w13;
        o7[14] = w14;
        o7[15] = w15;
        o7[16] = w16;
        o7[17] = w17;
        o7[18] = w18;
        if (c8 !== 0) {
          o7[19] = c8;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k7 = 0; k7 < out.length - 1; k7++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k7, num.length - 1);
          for (var j4 = Math.max(0, k7 - self2.length + 1); j4 <= maxJ; j4++) {
            var i6 = k7 - j4;
            var a4 = self2.words[i6] | 0;
            var b6 = num.words[j4] | 0;
            var r4 = a4 * b6;
            var lo4 = r4 & 67108863;
            ncarry = ncarry + (r4 / 67108864 | 0) | 0;
            lo4 = lo4 + rword | 0;
            rword = lo4 & 67108863;
            ncarry = ncarry + (lo4 >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k7] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k7] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x6, y7) {
        this.x = x6;
        this.y = y7;
      }
      FFTM.prototype.makeRBT = function makeRBT(N12) {
        var t2 = new Array(N12);
        var l8 = BN.prototype._countBits(N12) - 1;
        for (var i6 = 0; i6 < N12; i6++) {
          t2[i6] = this.revBin(i6, l8, N12);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x6, l8, N12) {
        if (x6 === 0 || x6 === N12 - 1)
          return x6;
        var rb = 0;
        for (var i6 = 0; i6 < l8; i6++) {
          rb |= (x6 & 1) << l8 - i6 - 1;
          x6 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N12) {
        for (var i6 = 0; i6 < N12; i6++) {
          rtws[i6] = rws[rbt[i6]];
          itws[i6] = iws[rbt[i6]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N12, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N12);
        for (var s4 = 1; s4 < N12; s4 <<= 1) {
          var l8 = s4 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l8);
          var itwdf = Math.sin(2 * Math.PI / l8);
          for (var p7 = 0; p7 < N12; p7 += l8) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j4 = 0; j4 < s4; j4++) {
              var re4 = rtws[p7 + j4];
              var ie4 = itws[p7 + j4];
              var ro4 = rtws[p7 + j4 + s4];
              var io3 = itws[p7 + j4 + s4];
              var rx = rtwdf_ * ro4 - itwdf_ * io3;
              io3 = rtwdf_ * io3 + itwdf_ * ro4;
              ro4 = rx;
              rtws[p7 + j4] = re4 + ro4;
              itws[p7 + j4] = ie4 + io3;
              rtws[p7 + j4 + s4] = re4 - ro4;
              itws[p7 + j4 + s4] = ie4 - io3;
              if (j4 !== l8) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n6, m4) {
        var N12 = Math.max(m4, n6) | 1;
        var odd = N12 & 1;
        var i6 = 0;
        for (N12 = N12 / 2 | 0; N12; N12 = N12 >>> 1) {
          i6++;
        }
        return 1 << i6 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N12) {
        if (N12 <= 1)
          return;
        for (var i6 = 0; i6 < N12 / 2; i6++) {
          var t2 = rws[i6];
          rws[i6] = rws[N12 - i6 - 1];
          rws[N12 - i6 - 1] = t2;
          t2 = iws[i6];
          iws[i6] = -iws[N12 - i6 - 1];
          iws[N12 - i6 - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws2, N12) {
        var carry = 0;
        for (var i6 = 0; i6 < N12 / 2; i6++) {
          var w7 = Math.round(ws2[2 * i6 + 1] / N12) * 8192 + Math.round(ws2[2 * i6] / N12) + carry;
          ws2[i6] = w7 & 67108863;
          if (w7 < 67108864) {
            carry = 0;
          } else {
            carry = w7 / 67108864 | 0;
          }
        }
        return ws2;
      };
      FFTM.prototype.convert13b = function convert13b(ws2, len, rws, N12) {
        var carry = 0;
        for (var i6 = 0; i6 < len; i6++) {
          carry = carry + (ws2[i6] | 0);
          rws[2 * i6] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i6 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i6 = 2 * len; i6 < N12; ++i6) {
          rws[i6] = 0;
        }
        assert3(carry === 0);
        assert3((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N12) {
        var ph = new Array(N12);
        for (var i6 = 0; i6 < N12; i6++) {
          ph[i6] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x6, y7, out) {
        var N12 = 2 * this.guessLen13b(x6.length, y7.length);
        var rbt = this.makeRBT(N12);
        var _4 = this.stub(N12);
        var rws = new Array(N12);
        var rwst = new Array(N12);
        var iwst = new Array(N12);
        var nrws = new Array(N12);
        var nrwst = new Array(N12);
        var niwst = new Array(N12);
        var rmws = out.words;
        rmws.length = N12;
        this.convert13b(x6.words, x6.length, rws, N12);
        this.convert13b(y7.words, y7.length, nrws, N12);
        this.transform(rws, _4, rwst, iwst, N12, rbt);
        this.transform(nrws, _4, nrwst, niwst, N12, rbt);
        for (var i6 = 0; i6 < N12; i6++) {
          var rx = rwst[i6] * nrwst[i6] - iwst[i6] * niwst[i6];
          iwst[i6] = rwst[i6] * niwst[i6] + iwst[i6] * nrwst[i6];
          rwst[i6] = rx;
        }
        this.conjugate(rwst, iwst, N12);
        this.transform(rwst, iwst, rmws, _4, N12, rbt);
        this.conjugate(rmws, _4, N12);
        this.normalize13b(rmws, N12);
        out.negative = x6.negative ^ y7.negative;
        out.length = x6.length + y7.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert3(typeof num === "number");
        assert3(num < 67108864);
        var carry = 0;
        for (var i6 = 0; i6 < this.length; i6++) {
          var w7 = (this.words[i6] | 0) * num;
          var lo4 = (w7 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w7 / 67108864 | 0;
          carry += lo4 >>> 26;
          this.words[i6] = lo4 & 67108863;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w7 = toBitArray(num);
        if (w7.length === 0)
          return new BN(1);
        var res = this;
        for (var i6 = 0; i6 < w7.length; i6++, res = res.sqr()) {
          if (w7[i6] !== 0)
            break;
        }
        if (++i6 < w7.length) {
          for (var q2 = res.sqr(); i6 < w7.length; i6++, q2 = q2.sqr()) {
            if (w7[i6] === 0)
              continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert3(typeof bits === "number" && bits >= 0);
        var r4 = bits % 26;
        var s4 = (bits - r4) / 26;
        var carryMask = 67108863 >>> 26 - r4 << 26 - r4;
        var i6;
        if (r4 !== 0) {
          var carry = 0;
          for (i6 = 0; i6 < this.length; i6++) {
            var newCarry = this.words[i6] & carryMask;
            var c8 = (this.words[i6] | 0) - newCarry << r4;
            this.words[i6] = c8 | carry;
            carry = newCarry >>> 26 - r4;
          }
          if (carry) {
            this.words[i6] = carry;
            this.length++;
          }
        }
        if (s4 !== 0) {
          for (i6 = this.length - 1; i6 >= 0; i6--) {
            this.words[i6 + s4] = this.words[i6];
          }
          for (i6 = 0; i6 < s4; i6++) {
            this.words[i6] = 0;
          }
          this.length += s4;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert3(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert3(typeof bits === "number" && bits >= 0);
        var h6;
        if (hint) {
          h6 = (hint - hint % 26) / 26;
        } else {
          h6 = 0;
        }
        var r4 = bits % 26;
        var s4 = Math.min((bits - r4) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r4 << r4;
        var maskedWords = extended;
        h6 -= s4;
        h6 = Math.max(0, h6);
        if (maskedWords) {
          for (var i6 = 0; i6 < s4; i6++) {
            maskedWords.words[i6] = this.words[i6];
          }
          maskedWords.length = s4;
        }
        if (s4 === 0) {
        } else if (this.length > s4) {
          this.length -= s4;
          for (i6 = 0; i6 < this.length; i6++) {
            this.words[i6] = this.words[i6 + s4];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i6 = this.length - 1; i6 >= 0 && (carry !== 0 || i6 >= h6); i6--) {
          var word = this.words[i6] | 0;
          this.words[i6] = carry << 26 - r4 | word >>> r4;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert3(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert3(typeof bit === "number" && bit >= 0);
        var r4 = bit % 26;
        var s4 = (bit - r4) / 26;
        var q2 = 1 << r4;
        if (this.length <= s4)
          return false;
        var w7 = this.words[s4];
        return !!(w7 & q2);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert3(typeof bits === "number" && bits >= 0);
        var r4 = bits % 26;
        var s4 = (bits - r4) / 26;
        assert3(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s4) {
          return this;
        }
        if (r4 !== 0) {
          s4++;
        }
        this.length = Math.min(s4, this.length);
        if (r4 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r4 << r4;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert3(typeof num === "number");
        assert3(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i6 = 0; i6 < this.length && this.words[i6] >= 67108864; i6++) {
          this.words[i6] -= 67108864;
          if (i6 === this.length - 1) {
            this.words[i6 + 1] = 1;
          } else {
            this.words[i6 + 1]++;
          }
        }
        this.length = Math.max(this.length, i6 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert3(typeof num === "number");
        assert3(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i6 = 0; i6 < this.length && this.words[i6] < 0; i6++) {
            this.words[i6] += 67108864;
            this.words[i6 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i6;
        this._expand(len);
        var w7;
        var carry = 0;
        for (i6 = 0; i6 < num.length; i6++) {
          w7 = (this.words[i6 + shift] | 0) + carry;
          var right = (num.words[i6] | 0) * mul;
          w7 -= right & 67108863;
          carry = (w7 >> 26) - (right / 67108864 | 0);
          this.words[i6 + shift] = w7 & 67108863;
        }
        for (; i6 < this.length - shift; i6++) {
          w7 = (this.words[i6 + shift] | 0) + carry;
          carry = w7 >> 26;
          this.words[i6 + shift] = w7 & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert3(carry === -1);
        carry = 0;
        for (i6 = 0; i6 < this.length; i6++) {
          w7 = -(this.words[i6] | 0) + carry;
          carry = w7 >> 26;
          this.words[i6] = w7 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a4 = this.clone();
        var b6 = num;
        var bhi = b6.words[b6.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b6 = b6.ushln(shift);
          a4.iushln(shift);
          bhi = b6.words[b6.length - 1] | 0;
        }
        var m4 = a4.length - b6.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN(null);
          q2.length = m4 + 1;
          q2.words = new Array(q2.length);
          for (var i6 = 0; i6 < q2.length; i6++) {
            q2.words[i6] = 0;
          }
        }
        var diff = a4.clone()._ishlnsubmul(b6, 1, m4);
        if (diff.negative === 0) {
          a4 = diff;
          if (q2) {
            q2.words[m4] = 1;
          }
        }
        for (var j4 = m4 - 1; j4 >= 0; j4--) {
          var qj = (a4.words[b6.length + j4] | 0) * 67108864 + (a4.words[b6.length + j4 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a4._ishlnsubmul(b6, qj, j4);
          while (a4.negative !== 0) {
            qj--;
            a4.negative = 0;
            a4._ishlnsubmul(b6, 1, j4);
            if (!a4.isZero()) {
              a4.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j4] = qj;
          }
        }
        if (q2) {
          q2.strip();
        }
        a4.strip();
        if (mode !== "div" && shift !== 0) {
          a4.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a4
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert3(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r22 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r22 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert3(num <= 67108863);
        var p7 = (1 << 26) % num;
        var acc = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          acc = (p7 * acc + (this.words[i6] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert3(num <= 67108863);
        var carry = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var w7 = (this.words[i6] | 0) + carry * 67108864;
          this.words[i6] = w7 / num | 0;
          carry = w7 % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p7) {
        assert3(p7.negative === 0);
        assert3(!p7.isZero());
        var x6 = this;
        var y7 = p7.clone();
        if (x6.negative !== 0) {
          x6 = x6.umod(p7);
        } else {
          x6 = x6.clone();
        }
        var A4 = new BN(1);
        var B4 = new BN(0);
        var C6 = new BN(0);
        var D3 = new BN(1);
        var g5 = 0;
        while (x6.isEven() && y7.isEven()) {
          x6.iushrn(1);
          y7.iushrn(1);
          ++g5;
        }
        var yp = y7.clone();
        var xp = x6.clone();
        while (!x6.isZero()) {
          for (var i6 = 0, im = 1; (x6.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1)
            ;
          if (i6 > 0) {
            x6.iushrn(i6);
            while (i6-- > 0) {
              if (A4.isOdd() || B4.isOdd()) {
                A4.iadd(yp);
                B4.isub(xp);
              }
              A4.iushrn(1);
              B4.iushrn(1);
            }
          }
          for (var j4 = 0, jm = 1; (y7.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
            ;
          if (j4 > 0) {
            y7.iushrn(j4);
            while (j4-- > 0) {
              if (C6.isOdd() || D3.isOdd()) {
                C6.iadd(yp);
                D3.isub(xp);
              }
              C6.iushrn(1);
              D3.iushrn(1);
            }
          }
          if (x6.cmp(y7) >= 0) {
            x6.isub(y7);
            A4.isub(C6);
            B4.isub(D3);
          } else {
            y7.isub(x6);
            C6.isub(A4);
            D3.isub(B4);
          }
        }
        return {
          a: C6,
          b: D3,
          gcd: y7.iushln(g5)
        };
      };
      BN.prototype._invmp = function _invmp(p7) {
        assert3(p7.negative === 0);
        assert3(!p7.isZero());
        var a4 = this;
        var b6 = p7.clone();
        if (a4.negative !== 0) {
          a4 = a4.umod(p7);
        } else {
          a4 = a4.clone();
        }
        var x1 = new BN(1);
        var x22 = new BN(0);
        var delta = b6.clone();
        while (a4.cmpn(1) > 0 && b6.cmpn(1) > 0) {
          for (var i6 = 0, im = 1; (a4.words[0] & im) === 0 && i6 < 26; ++i6, im <<= 1)
            ;
          if (i6 > 0) {
            a4.iushrn(i6);
            while (i6-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j4 = 0, jm = 1; (b6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
            ;
          if (j4 > 0) {
            b6.iushrn(j4);
            while (j4-- > 0) {
              if (x22.isOdd()) {
                x22.iadd(delta);
              }
              x22.iushrn(1);
            }
          }
          if (a4.cmp(b6) >= 0) {
            a4.isub(b6);
            x1.isub(x22);
          } else {
            b6.isub(a4);
            x22.isub(x1);
          }
        }
        var res;
        if (a4.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x22;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p7);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a4 = this.clone();
        var b6 = num.clone();
        a4.negative = 0;
        b6.negative = 0;
        for (var shift = 0; a4.isEven() && b6.isEven(); shift++) {
          a4.iushrn(1);
          b6.iushrn(1);
        }
        do {
          while (a4.isEven()) {
            a4.iushrn(1);
          }
          while (b6.isEven()) {
            b6.iushrn(1);
          }
          var r4 = a4.cmp(b6);
          if (r4 < 0) {
            var t2 = a4;
            a4 = b6;
            b6 = t2;
          } else if (r4 === 0 || b6.cmpn(1) === 0) {
            break;
          }
          a4.isub(b6);
        } while (true);
        return b6.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert3(typeof bit === "number");
        var r4 = bit % 26;
        var s4 = (bit - r4) / 26;
        var q2 = 1 << r4;
        if (this.length <= s4) {
          this._expand(s4 + 1);
          this.words[s4] |= q2;
          return this;
        }
        var carry = q2;
        for (var i6 = s4; carry !== 0 && i6 < this.length; i6++) {
          var w7 = this.words[i6] | 0;
          w7 += carry;
          carry = w7 >>> 26;
          w7 &= 67108863;
          this.words[i6] = w7;
        }
        if (carry !== 0) {
          this.words[i6] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert3(num <= 67108863, "Number is too big");
          var w7 = this.words[0] | 0;
          res = w7 === num ? 0 : w7 < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i6 = this.length - 1; i6 >= 0; i6--) {
          var a4 = this.words[i6] | 0;
          var b6 = num.words[i6] | 0;
          if (a4 === b6)
            continue;
          if (a4 < b6) {
            res = -1;
          } else if (a4 > b6) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt5(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt4(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert3(!this.red, "Already a number in reduction context");
        assert3(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert3(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert3(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert3(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert3(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert3(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert3(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert3(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert3(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert3(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert3(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert3(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert3(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert3(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert3(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert3(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p7) {
        this.name = name2;
        this.p = new BN(p7, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r4 = num;
        var rlen;
        do {
          this.split(r4, this.tmp);
          r4 = this.imulK(r4);
          r4 = r4.iadd(this.tmp);
          rlen = r4.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r4.ucmp(this.p);
        if (cmp === 0) {
          r4.words[0] = 0;
          r4.length = 1;
        } else if (cmp > 0) {
          r4.isub(this.p);
        } else {
          if (r4.strip !== void 0) {
            r4.strip();
          } else {
            r4._strip();
          }
        }
        return r4;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i6 = 0; i6 < outLen; i6++) {
          output.words[i6] = input.words[i6];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i6 = 10; i6 < input.length; i6++) {
          var next = input.words[i6] | 0;
          input.words[i6 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i6 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo4 = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var w7 = num.words[i6] | 0;
          lo4 += w7 * 977;
          num.words[i6] = lo4 & 67108863;
          lo4 = w7 * 64 + (lo4 / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i6 = 0; i6 < num.length; i6++) {
          var hi3 = (num.words[i6] | 0) * 19 + carry;
          var lo4 = hi3 & 67108863;
          hi3 >>>= 26;
          num.words[i6] = lo4;
          carry = hi3;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m4) {
        if (typeof m4 === "string") {
          var prime = BN._prime(m4);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert3(m4.gtn(1), "modulus must be greater than 1");
          this.m = m4;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a4) {
        assert3(a4.negative === 0, "red works only with positives");
        assert3(a4.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a4, b6) {
        assert3((a4.negative | b6.negative) === 0, "red works only with positives");
        assert3(
          a4.red && a4.red === b6.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a4) {
        if (this.prime)
          return this.prime.ireduce(a4)._forceRed(this);
        return a4.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a4) {
        if (a4.isZero()) {
          return a4.clone();
        }
        return this.m.sub(a4)._forceRed(this);
      };
      Red.prototype.add = function add(a4, b6) {
        this._verify2(a4, b6);
        var res = a4.add(b6);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a4, b6) {
        this._verify2(a4, b6);
        var res = a4.iadd(b6);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a4, b6) {
        this._verify2(a4, b6);
        var res = a4.sub(b6);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a4, b6) {
        this._verify2(a4, b6);
        var res = a4.isub(b6);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a4, num) {
        this._verify1(a4);
        return this.imod(a4.ushln(num));
      };
      Red.prototype.imul = function imul(a4, b6) {
        this._verify2(a4, b6);
        return this.imod(a4.imul(b6));
      };
      Red.prototype.mul = function mul(a4, b6) {
        this._verify2(a4, b6);
        return this.imod(a4.mul(b6));
      };
      Red.prototype.isqr = function isqr(a4) {
        return this.imul(a4, a4.clone());
      };
      Red.prototype.sqr = function sqr(a4) {
        return this.mul(a4, a4);
      };
      Red.prototype.sqrt = function sqrt(a4) {
        if (a4.isZero())
          return a4.clone();
        var mod3 = this.m.andln(3);
        assert3(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a4, pow);
        }
        var q2 = this.m.subn(1);
        var s4 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s4++;
          q2.iushrn(1);
        }
        assert3(!q2.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z6 = this.m.bitLength();
        z6 = new BN(2 * z6 * z6).toRed(this);
        while (this.pow(z6, lpow).cmp(nOne) !== 0) {
          z6.redIAdd(nOne);
        }
        var c8 = this.pow(z6, q2);
        var r4 = this.pow(a4, q2.addn(1).iushrn(1));
        var t2 = this.pow(a4, q2);
        var m4 = s4;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i6 = 0; tmp.cmp(one) !== 0; i6++) {
            tmp = tmp.redSqr();
          }
          assert3(i6 < m4);
          var b6 = this.pow(c8, new BN(1).iushln(m4 - i6 - 1));
          r4 = r4.redMul(b6);
          c8 = b6.redSqr();
          t2 = t2.redMul(c8);
          m4 = i6;
        }
        return r4;
      };
      Red.prototype.invm = function invm(a4) {
        var inv = a4._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a4, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a4.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a4;
        for (var i6 = 2; i6 < wnd.length; i6++) {
          wnd[i6] = this.mul(wnd[i6 - 1], a4);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i6 = num.length - 1; i6 >= 0; i6--) {
          var word = num.words[i6];
          for (var j4 = start - 1; j4 >= 0; j4--) {
            var bit = word >> j4 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i6 !== 0 || j4 !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r4 = num.umod(this.m);
        return r4 === num ? r4.clone() : r4;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m4) {
        Red.call(this, m4);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r4 = this.imod(num.mul(this.rinv));
        r4.red = null;
        return r4;
      };
      Mont.prototype.imul = function imul(a4, b6) {
        if (a4.isZero() || b6.isZero()) {
          a4.words[0] = 0;
          a4.length = 1;
          return a4;
        }
        var t2 = a4.imul(b6);
        var c8 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u5 = t2.isub(c8).iushrn(this.shift);
        var res = u5;
        if (u5.cmp(this.m) >= 0) {
          res = u5.isub(this.m);
        } else if (u5.cmpn(0) < 0) {
          res = u5.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a4, b6) {
        if (a4.isZero() || b6.isZero())
          return new BN(0)._forceRed(this);
        var t2 = a4.mul(b6);
        var c8 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u5 = t2.isub(c8).iushrn(this.shift);
        var res = u5;
        if (u5.cmp(this.m) >= 0) {
          res = u5.isub(this.m);
        } else if (u5.cmpn(0) < 0) {
          res = u5.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a4) {
        var res = this.imod(a4._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// ../../node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "../../node_modules/minimalistic-assert/index.js"(exports, module) {
    module.exports = assert3;
    function assert3(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert3.equal = function assertEqual(l8, r4, msg) {
      if (l8 != r4)
        throw new Error(msg || "Assertion failed: " + l8 + " != " + r4);
    };
  }
});

// ../../node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils2 = __commonJS({
  "../../node_modules/minimalistic-crypto-utils/lib/utils.js"(exports) {
    "use strict";
    var utils = exports;
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i6 = 0; i6 < msg.length; i6++)
          res[i6] = msg[i6] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i6 = 0; i6 < msg.length; i6 += 2)
          res.push(parseInt(msg[i6] + msg[i6 + 1], 16));
      } else {
        for (var i6 = 0; i6 < msg.length; i6++) {
          var c8 = msg.charCodeAt(i6);
          var hi3 = c8 >> 8;
          var lo4 = c8 & 255;
          if (hi3)
            res.push(hi3, lo4);
          else
            res.push(lo4);
        }
      }
      return res;
    }
    utils.toArray = toArray;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    function toHex5(msg) {
      var res = "";
      for (var i6 = 0; i6 < msg.length; i6++)
        res += zero2(msg[i6].toString(16));
      return res;
    }
    utils.toHex = toHex5;
    utils.encode = function encode11(arr, enc) {
      if (enc === "hex")
        return toHex5(arr);
      else
        return arr;
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/utils.js
var require_utils3 = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/utils.js"(exports) {
    "use strict";
    var utils = exports;
    var BN = require_bn();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils2();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF(num, w7, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i6;
      for (i6 = 0; i6 < naf.length; i6 += 1) {
        naf[i6] = 0;
      }
      var ws2 = 1 << w7 + 1;
      var k7 = num.clone();
      for (i6 = 0; i6 < naf.length; i6++) {
        var z6;
        var mod = k7.andln(ws2 - 1);
        if (k7.isOdd()) {
          if (mod > (ws2 >> 1) - 1)
            z6 = (ws2 >> 1) - mod;
          else
            z6 = mod;
          k7.isubn(z6);
        } else {
          z6 = 0;
        }
        naf[i6] = z6;
        k7.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF;
    function getJSF(k1, k22) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k22 = k22.clone();
      var d1 = 0;
      var d22 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k22.andln(3) + d22 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u22;
        if ((m24 & 1) === 0) {
          u22 = 0;
        } else {
          m8 = k22.andln(7) + d22 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u22 = -m24;
          else
            u22 = m24;
        }
        jsf[1].push(u22);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d22 === u22 + 1)
          d22 = 1 - d22;
        k1.iushrn(1);
        k22.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF;
    function cachedProperty(obj, name2, computer) {
      var key = "_" + name2;
      obj.prototype[name2] = function cachedProperty2() {
        return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_4, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// ../../node_modules/brorand/index.js
var require_brorand = __commonJS({
  "../../node_modules/brorand/index.js"(exports, module) {
    var r4;
    module.exports = function rand(len) {
      if (!r4)
        r4 = new Rand(null);
      return r4.generate(len);
    };
    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;
    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n6) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n6);
      var res = new Uint8Array(n6);
      for (var i6 = 0; i6 < res.length; i6++)
        res[i6] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n6) {
          var arr = new Uint8Array(n6);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n6) {
          var arr = new Uint8Array(n6);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        crypto2 = require_crypto();
        if (typeof crypto2.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n6) {
          return crypto2.randomBytes(n6);
        };
      } catch (e3) {
      }
    }
    var crypto2;
  }
});

// ../../node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert3 = utils.assert;
    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate7() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p7, k7) {
      assert3(p7.precomputed);
      var doubles = p7._getDoubles();
      var naf = getNAF(k7, 1, this._bitLength);
      var I4 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I4 /= 3;
      var repr = [];
      var j4;
      var nafW;
      for (j4 = 0; j4 < naf.length; j4 += doubles.step) {
        nafW = 0;
        for (var l8 = j4 + doubles.step - 1; l8 >= j4; l8--)
          nafW = (nafW << 1) + naf[l8];
        repr.push(nafW);
      }
      var a4 = this.jpoint(null, null, null);
      var b6 = this.jpoint(null, null, null);
      for (var i6 = I4; i6 > 0; i6--) {
        for (j4 = 0; j4 < repr.length; j4++) {
          nafW = repr[j4];
          if (nafW === i6)
            b6 = b6.mixedAdd(doubles.points[j4]);
          else if (nafW === -i6)
            b6 = b6.mixedAdd(doubles.points[j4].neg());
        }
        a4 = a4.add(b6);
      }
      return a4.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p7, k7) {
      var w7 = 4;
      var nafPoints = p7._getNAFPoints(w7);
      w7 = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k7, w7, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i6 = naf.length - 1; i6 >= 0; i6--) {
        for (var l8 = 0; i6 >= 0 && naf[i6] === 0; i6--)
          l8++;
        if (i6 >= 0)
          l8++;
        acc = acc.dblp(l8);
        if (i6 < 0)
          break;
        var z6 = naf[i6];
        assert3(z6 !== 0);
        if (p7.type === "affine") {
          if (z6 > 0)
            acc = acc.mixedAdd(wnd[z6 - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z6 - 1 >> 1].neg());
        } else {
          if (z6 > 0)
            acc = acc.add(wnd[z6 - 1 >> 1]);
          else
            acc = acc.add(wnd[-z6 - 1 >> 1].neg());
        }
      }
      return p7.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i6;
      var j4;
      var p7;
      for (i6 = 0; i6 < len; i6++) {
        p7 = points[i6];
        var nafPoints = p7._getNAFPoints(defW);
        wndWidth[i6] = nafPoints.wnd;
        wnd[i6] = nafPoints.points;
      }
      for (i6 = len - 1; i6 >= 1; i6 -= 2) {
        var a4 = i6 - 1;
        var b6 = i6;
        if (wndWidth[a4] !== 1 || wndWidth[b6] !== 1) {
          naf[a4] = getNAF(coeffs[a4], wndWidth[a4], this._bitLength);
          naf[b6] = getNAF(coeffs[b6], wndWidth[b6], this._bitLength);
          max = Math.max(naf[a4].length, max);
          max = Math.max(naf[b6].length, max);
          continue;
        }
        var comb = [
          points[a4],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b6]
          /* 7 */
        ];
        if (points[a4].y.cmp(points[b6].y) === 0) {
          comb[1] = points[a4].add(points[b6]);
          comb[2] = points[a4].toJ().mixedAdd(points[b6].neg());
        } else if (points[a4].y.cmp(points[b6].y.redNeg()) === 0) {
          comb[1] = points[a4].toJ().mixedAdd(points[b6]);
          comb[2] = points[a4].add(points[b6].neg());
        } else {
          comb[1] = points[a4].toJ().mixedAdd(points[b6]);
          comb[2] = points[a4].toJ().mixedAdd(points[b6].neg());
        }
        var index2 = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a4], coeffs[b6]);
        max = Math.max(jsf[0].length, max);
        naf[a4] = new Array(max);
        naf[b6] = new Array(max);
        for (j4 = 0; j4 < max; j4++) {
          var ja = jsf[0][j4] | 0;
          var jb = jsf[1][j4] | 0;
          naf[a4][j4] = index2[(ja + 1) * 3 + (jb + 1)];
          naf[b6][j4] = 0;
          wnd[a4] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i6 = max; i6 >= 0; i6--) {
        var k7 = 0;
        while (i6 >= 0) {
          var zero = true;
          for (j4 = 0; j4 < len; j4++) {
            tmp[j4] = naf[j4][i6] | 0;
            if (tmp[j4] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k7++;
          i6--;
        }
        if (i6 >= 0)
          k7++;
        acc = acc.dblp(k7);
        if (i6 < 0)
          break;
        for (j4 = 0; j4 < len; j4++) {
          var z6 = tmp[j4];
          p7;
          if (z6 === 0)
            continue;
          else if (z6 > 0)
            p7 = wnd[j4][z6 - 1 >> 1];
          else if (z6 < 0)
            p7 = wnd[j4][-z6 - 1 >> 1].neg();
          if (p7.type === "affine")
            acc = acc.mixedAdd(p7);
          else
            acc = acc.add(p7);
        }
      }
      for (i6 = 0; i6 < len; i6++)
        wnd[i6] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate7() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert3(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert3(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x6 = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x6);
      return [4].concat(x6, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode11(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k7) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k7.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i6 = 0; i6 < power; i6 += step) {
        for (var j4 = 0; j4 < step; j4++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i6 = 1; i6 < max; i6++)
        res[i6] = res[i6 - 1].add(dbl);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k7) {
      var r4 = this;
      for (var i6 = 0; i6 < k7; i6++)
        r4 = r4.dbl();
      return r4;
    };
  }
});

// ../../node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../../node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// ../../node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var BN = require_bn();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert3 = utils.assert;
    function ShortCurve(conf) {
      Base.call(this, "short", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert3(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s4 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s4).fromRed();
      var l22 = ntinv.redSub(s4).fromRed();
      return [l1, l22];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u5 = lambda;
      var v7 = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x22 = new BN(0);
      var y22 = new BN(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a22;
      var b22;
      var prevR;
      var i6 = 0;
      var r4;
      var x6;
      while (u5.cmpn(0) !== 0) {
        var q2 = v7.div(u5);
        r4 = v7.sub(q2.mul(u5));
        x6 = x22.sub(q2.mul(x1));
        var y7 = y22.sub(q2.mul(y1));
        if (!a1 && r4.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r4.neg();
          b1 = x6;
        } else if (a1 && ++i6 === 2) {
          break;
        }
        prevR = r4;
        v7 = u5;
        u5 = r4;
        x22 = x1;
        x1 = x6;
        y22 = y1;
        y1 = y7;
      }
      a22 = r4.neg();
      b22 = x6;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a22.sqr().add(b22.sqr());
      if (len2.cmp(len1) >= 0) {
        a22 = a0;
        b22 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a22.negative) {
        a22 = a22.neg();
        b22 = b22.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a22, b: b22 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k7) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v22 = basis[1];
      var c1 = v22.b.mul(k7).divRound(this.n);
      var c22 = v1.b.neg().mul(k7).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p22 = c22.mul(v22.a);
      var q1 = c1.mul(v1.b);
      var q2 = c22.mul(v22.b);
      var k1 = k7.sub(p1).sub(p22);
      var k22 = q1.add(q2).neg();
      return { k1, k2: k22 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x6, odd) {
      x6 = new BN(x6, 16);
      if (!x6.red)
        x6 = x6.toRed(this.red);
      var y22 = x6.redSqr().redMul(x6).redIAdd(x6.redMul(this.a)).redIAdd(this.b);
      var y7 = y22.redSqrt();
      if (y7.redSqr().redSub(y22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y7.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y7 = y7.redNeg();
      return this.point(x6, y7);
    };
    ShortCurve.prototype.validate = function validate7(point) {
      if (point.inf)
        return true;
      var x6 = point.x;
      var y7 = point.y;
      var ax = this.a.redMul(x6);
      var rhs = x6.redSqr().redMul(x6).redIAdd(ax).redIAdd(this.b);
      return y7.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i6 = 0; i6 < points.length; i6++) {
        var split = this._endoSplit(coeffs[i6]);
        var p7 = points[i6];
        var beta = p7._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p7 = p7.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i6 * 2] = p7;
        npoints[i6 * 2 + 1] = beta;
        ncoeffs[i6 * 2] = split.k1;
        ncoeffs[i6 * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i6 * 2, jacobianResult);
      for (var j4 = 0; j4 < i6 * 2; j4++) {
        npoints[j4] = null;
        ncoeffs[j4] = null;
      }
      return res;
    };
    function Point(curve, x6, y7, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x6 === null && y7 === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x6, 16);
        this.y = new BN(y7, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);
    ShortCurve.prototype.point = function point(x6, y7, isRed) {
      return new Point(this, x6, y7, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p7) {
          return curve.point(p7.x.redMul(curve.endo.beta), p7.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p7) {
      if (this.inf)
        return p7;
      if (p7.inf)
        return this;
      if (this.eq(p7))
        return this.dbl();
      if (this.neg().eq(p7))
        return this.curve.point(null, null);
      if (this.x.cmp(p7.x) === 0)
        return this.curve.point(null, null);
      var c8 = this.y.redSub(p7.y);
      if (c8.cmpn(0) !== 0)
        c8 = c8.redMul(this.x.redSub(p7.x).redInvm());
      var nx = c8.redSqr().redISub(this.x).redISub(p7.x);
      var ny = c8.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a4 = this.curve.a;
      var x22 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c8 = x22.redAdd(x22).redIAdd(x22).redIAdd(a4).redMul(dyinv);
      var nx = c8.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c8.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k7) {
      k7 = new BN(k7, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k7))
        return this.curve._fixedNafMul(this, k7);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k7]);
      else
        return this.curve._wnafMul(this, k7);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
      var points = [this, p22];
      var coeffs = [k1, k22];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq(p7) {
      return this === p7 || this.inf === p7.inf && (this.inf || this.x.cmp(p7.x) === 0 && this.y.cmp(p7.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p7) {
          return p7.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint(curve, x6, y7, z6) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x6 === null && y7 === null && z6 === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x6, 16);
        this.y = new BN(y7, 16);
        this.z = new BN(z6, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x6, y7, z6) {
      return new JPoint(this, x6, y7, z6);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add(p7) {
      if (this.isInfinity())
        return p7;
      if (p7.isInfinity())
        return this;
      var pz2 = p7.z.redSqr();
      var z22 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u22 = p7.x.redMul(z22);
      var s1 = this.y.redMul(pz2.redMul(p7.z));
      var s22 = p7.y.redMul(z22.redMul(this.z));
      var h6 = u1.redSub(u22);
      var r4 = s1.redSub(s22);
      if (h6.cmpn(0) === 0) {
        if (r4.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h6.redSqr();
      var h32 = h22.redMul(h6);
      var v7 = u1.redMul(h22);
      var nx = r4.redSqr().redIAdd(h32).redISub(v7).redISub(v7);
      var ny = r4.redMul(v7.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(p7.z).redMul(h6);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p7) {
      if (this.isInfinity())
        return p7.toJ();
      if (p7.isInfinity())
        return this;
      var z22 = this.z.redSqr();
      var u1 = this.x;
      var u22 = p7.x.redMul(z22);
      var s1 = this.y;
      var s22 = p7.y.redMul(z22).redMul(this.z);
      var h6 = u1.redSub(u22);
      var r4 = s1.redSub(s22);
      if (h6.cmpn(0) === 0) {
        if (r4.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h22 = h6.redSqr();
      var h32 = h22.redMul(h6);
      var v7 = u1.redMul(h22);
      var nx = r4.redSqr().redIAdd(h32).redISub(v7).redISub(v7);
      var ny = r4.redMul(v7.redISub(nx)).redISub(s1.redMul(h32));
      var nz = this.z.redMul(h6);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i6;
      if (this.curve.zeroA || this.curve.threeA) {
        var r4 = this;
        for (i6 = 0; i6 < pow; i6++)
          r4 = r4.dbl();
        return r4;
      }
      var a4 = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i6 = 0; i6 < pow; i6++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c8 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c8.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c8.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i6 + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s4 = s4.redIAdd(s4);
        var m4 = xx.redAdd(xx).redIAdd(xx);
        var t2 = m4.redSqr().redISub(s4).redISub(s4);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t2;
        ny = m4.redMul(s4.redISub(t2)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a4 = this.x.redSqr();
        var b6 = this.y.redSqr();
        var c8 = b6.redSqr();
        var d6 = this.x.redAdd(b6).redSqr().redISub(a4).redISub(c8);
        d6 = d6.redIAdd(d6);
        var e3 = a4.redAdd(a4).redIAdd(a4);
        var f9 = e3.redSqr();
        var c82 = c8.redIAdd(c8);
        c82 = c82.redIAdd(c82);
        c82 = c82.redIAdd(c82);
        nx = f9.redISub(d6).redISub(d6);
        ny = e3.redMul(d6.redISub(nx)).redISub(c82);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s4 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s4 = s4.redIAdd(s4);
        var m4 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t2 = m4.redSqr().redISub(s4).redISub(s4);
        nx = t2;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m4.redMul(s4.redISub(t2)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a4 = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c8 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a4.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c8.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c8.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m4 = xx.redAdd(xx).redIAdd(xx);
      var mm = m4.redSqr();
      var e3 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e3 = e3.redIAdd(e3);
      e3 = e3.redAdd(e3).redIAdd(e3);
      e3 = e3.redISub(mm);
      var ee4 = e3.redSqr();
      var t2 = yyyy.redIAdd(yyyy);
      t2 = t2.redIAdd(t2);
      t2 = t2.redIAdd(t2);
      t2 = t2.redIAdd(t2);
      var u5 = m4.redIAdd(e3).redSqr().redISub(mm).redISub(ee4).redISub(t2);
      var yyu4 = yy.redMul(u5);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee4).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u5.redMul(t2.redISub(u5)).redISub(e3.redMul(ee4)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e3).redSqr().redISub(zz).redISub(ee4);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul(k7, kbase) {
      k7 = new BN(k7, kbase);
      return this.curve._wnafMul(this, k7);
    };
    JPoint.prototype.eq = function eq(p7) {
      if (p7.type === "affine")
        return this.eq(p7.toJ());
      if (this === p7)
        return true;
      var z22 = this.z.redSqr();
      var pz2 = p7.z.redSqr();
      if (this.x.redMul(pz2).redISub(p7.x.redMul(z22)).cmpn(0) !== 0)
        return false;
      var z32 = z22.redMul(this.z);
      var pz3 = pz2.redMul(p7.z);
      return this.y.redMul(pz3).redISub(p7.y.redMul(z32)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x6) {
      var zs2 = this.z.redSqr();
      var rx = x6.toRed(this.curve.red).redMul(zs2);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x6.clone();
      var t2 = this.curve.redN.redMul(zs2);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t2);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var utils = require_utils3();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate7(point) {
      var x6 = point.normalize().x;
      var x22 = x6.redSqr();
      var rhs = x22.redMul(x6).redAdd(x22.redMul(this.a)).redAdd(x6);
      var y7 = rhs.redSqrt();
      return y7.redSqr().cmp(rhs) === 0;
    };
    function Point(curve, x6, z6) {
      Base.BasePoint.call(this, curve, "projective");
      if (x6 === null && z6 === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x6, 16);
        this.z = new BN(z6, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point(x6, z6) {
      return new Point(this, x6, z6);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    Point.prototype.precompute = function precompute() {
    };
    Point.prototype._encode = function _encode() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.z.cmpn(0) === 0;
    };
    Point.prototype.dbl = function dbl() {
      var a4 = this.x.redAdd(this.z);
      var aa = a4.redSqr();
      var b6 = this.x.redSub(this.z);
      var bb = b6.redSqr();
      var c8 = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c8.redMul(bb.redAdd(this.curve.a24.redMul(c8)));
      return this.curve.point(nx, nz);
    };
    Point.prototype.add = function add() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.diffAdd = function diffAdd(p7, diff) {
      var a4 = this.x.redAdd(this.z);
      var b6 = this.x.redSub(this.z);
      var c8 = p7.x.redAdd(p7.z);
      var d6 = p7.x.redSub(p7.z);
      var da = d6.redMul(a4);
      var cb = c8.redMul(b6);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point.prototype.mul = function mul(k7) {
      var t2 = k7.clone();
      var a4 = this;
      var b6 = this.curve.point(null, null);
      var c8 = this;
      for (var bits = []; t2.cmpn(0) !== 0; t2.iushrn(1))
        bits.push(t2.andln(1));
      for (var i6 = bits.length - 1; i6 >= 0; i6--) {
        if (bits[i6] === 0) {
          a4 = a4.diffAdd(b6, c8);
          b6 = b6.dbl();
        } else {
          b6 = a4.diffAdd(b6, c8);
          a4 = a4.dbl();
        }
      }
      return b6;
    };
    Point.prototype.mulAdd = function mulAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var BN = require_bn();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert3 = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert3(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint(x6, y7, z6, t2) {
      return this.point(x6, y7, z6, t2);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX(x6, odd) {
      x6 = new BN(x6, 16);
      if (!x6.red)
        x6 = x6.toRed(this.red);
      var x22 = x6.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x22));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
      var y22 = rhs.redMul(lhs.redInvm());
      var y7 = y22.redSqrt();
      if (y7.redSqr().redSub(y22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y7.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y7 = y7.redNeg();
      return this.point(x6, y7);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y7, odd) {
      y7 = new BN(y7, 16);
      if (!y7.red)
        y7 = y7.toRed(this.red);
      var y22 = y7.redSqr();
      var lhs = y22.redSub(this.c2);
      var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x22 = lhs.redMul(rhs.redInvm());
      if (x22.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y7);
      }
      var x6 = x22.redSqrt();
      if (x6.redSqr().redSub(x22).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x6.fromRed().isOdd() !== odd)
        x6 = x6.redNeg();
      return this.point(x6, y7);
    };
    EdwardsCurve.prototype.validate = function validate7(point) {
      if (point.isInfinity())
        return true;
      point.normalize();
      var x22 = point.x.redSqr();
      var y22 = point.y.redSqr();
      var lhs = x22.redMul(this.a).redAdd(y22);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x22).redMul(y22)));
      return lhs.cmp(rhs) === 0;
    };
    function Point(curve, x6, y7, z6, t2) {
      Base.BasePoint.call(this, curve, "projective");
      if (x6 === null && y7 === null && z6 === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x6, 16);
        this.y = new BN(y7, 16);
        this.z = z6 ? new BN(z6, 16) : this.curve.one;
        this.t = t2 && new BN(t2, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point(x6, y7, z6, t2) {
      return new Point(this, x6, y7, z6, t2);
    };
    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point.prototype._extDbl = function _extDbl() {
      var a4 = this.x.redSqr();
      var b6 = this.y.redSqr();
      var c8 = this.z.redSqr();
      c8 = c8.redIAdd(c8);
      var d6 = this.curve._mulA(a4);
      var e3 = this.x.redAdd(this.y).redSqr().redISub(a4).redISub(b6);
      var g5 = d6.redAdd(b6);
      var f9 = g5.redSub(c8);
      var h6 = d6.redSub(b6);
      var nx = e3.redMul(f9);
      var ny = g5.redMul(h6);
      var nt3 = e3.redMul(h6);
      var nz = f9.redMul(g5);
      return this.curve.point(nx, ny, nz, nt3);
    };
    Point.prototype._projDbl = function _projDbl() {
      var b6 = this.x.redAdd(this.y).redSqr();
      var c8 = this.x.redSqr();
      var d6 = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e3;
      var h6;
      var j4;
      if (this.curve.twisted) {
        e3 = this.curve._mulA(c8);
        var f9 = e3.redAdd(d6);
        if (this.zOne) {
          nx = b6.redSub(c8).redSub(d6).redMul(f9.redSub(this.curve.two));
          ny = f9.redMul(e3.redSub(d6));
          nz = f9.redSqr().redSub(f9).redSub(f9);
        } else {
          h6 = this.z.redSqr();
          j4 = f9.redSub(h6).redISub(h6);
          nx = b6.redSub(c8).redISub(d6).redMul(j4);
          ny = f9.redMul(e3.redSub(d6));
          nz = f9.redMul(j4);
        }
      } else {
        e3 = c8.redAdd(d6);
        h6 = this.curve._mulC(this.z).redSqr();
        j4 = e3.redSub(h6).redSub(h6);
        nx = this.curve._mulC(b6.redISub(e3)).redMul(j4);
        ny = this.curve._mulC(e3).redMul(c8.redISub(d6));
        nz = e3.redMul(j4);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point.prototype._extAdd = function _extAdd(p7) {
      var a4 = this.y.redSub(this.x).redMul(p7.y.redSub(p7.x));
      var b6 = this.y.redAdd(this.x).redMul(p7.y.redAdd(p7.x));
      var c8 = this.t.redMul(this.curve.dd).redMul(p7.t);
      var d6 = this.z.redMul(p7.z.redAdd(p7.z));
      var e3 = b6.redSub(a4);
      var f9 = d6.redSub(c8);
      var g5 = d6.redAdd(c8);
      var h6 = b6.redAdd(a4);
      var nx = e3.redMul(f9);
      var ny = g5.redMul(h6);
      var nt3 = e3.redMul(h6);
      var nz = f9.redMul(g5);
      return this.curve.point(nx, ny, nz, nt3);
    };
    Point.prototype._projAdd = function _projAdd(p7) {
      var a4 = this.z.redMul(p7.z);
      var b6 = a4.redSqr();
      var c8 = this.x.redMul(p7.x);
      var d6 = this.y.redMul(p7.y);
      var e3 = this.curve.d.redMul(c8).redMul(d6);
      var f9 = b6.redSub(e3);
      var g5 = b6.redAdd(e3);
      var tmp = this.x.redAdd(this.y).redMul(p7.x.redAdd(p7.y)).redISub(c8).redISub(d6);
      var nx = a4.redMul(f9).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a4.redMul(g5).redMul(d6.redSub(this.curve._mulA(c8)));
        nz = f9.redMul(g5);
      } else {
        ny = a4.redMul(g5).redMul(d6.redSub(c8));
        nz = this.curve._mulC(f9).redMul(g5);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point.prototype.add = function add(p7) {
      if (this.isInfinity())
        return p7;
      if (p7.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p7);
      else
        return this._projAdd(p7);
    };
    Point.prototype.mul = function mul(k7) {
      if (this._hasDoubles(k7))
        return this.curve._fixedNafMul(this, k7);
      else
        return this.curve._wnafMul(this, k7);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p7, k22) {
      return this.curve._wnafMulAdd(1, [this, p7], [k1, k22], 2, false);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p7, k22) {
      return this.curve._wnafMulAdd(1, [this, p7], [k1, k22], 2, true);
    };
    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi3 = this.z.redInvm();
      this.x = this.x.redMul(zi3);
      this.y = this.y.redMul(zi3);
      if (this.t)
        this.t = this.t.redMul(zi3);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point.prototype.neg = function neg() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };
    Point.prototype.eq = function eq(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point.prototype.eqXToP = function eqXToP(x6) {
      var rx = x6.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x6.clone();
      var t2 = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t2);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;
  }
});

// ../../node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
    "use strict";
    var curve = exports;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// ../../node_modules/hash.js/lib/hash/utils.js
var require_utils4 = __commonJS({
  "../../node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    var assert3 = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i6) {
      if ((msg.charCodeAt(i6) & 64512) !== 55296) {
        return false;
      }
      if (i6 < 0 || i6 + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i6 + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p7 = 0;
          for (var i6 = 0; i6 < msg.length; i6++) {
            var c8 = msg.charCodeAt(i6);
            if (c8 < 128) {
              res[p7++] = c8;
            } else if (c8 < 2048) {
              res[p7++] = c8 >> 6 | 192;
              res[p7++] = c8 & 63 | 128;
            } else if (isSurrogatePair(msg, i6)) {
              c8 = 65536 + ((c8 & 1023) << 10) + (msg.charCodeAt(++i6) & 1023);
              res[p7++] = c8 >> 18 | 240;
              res[p7++] = c8 >> 12 & 63 | 128;
              res[p7++] = c8 >> 6 & 63 | 128;
              res[p7++] = c8 & 63 | 128;
            } else {
              res[p7++] = c8 >> 12 | 224;
              res[p7++] = c8 >> 6 & 63 | 128;
              res[p7++] = c8 & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i6 = 0; i6 < msg.length; i6 += 2)
            res.push(parseInt(msg[i6] + msg[i6 + 1], 16));
        }
      } else {
        for (i6 = 0; i6 < msg.length; i6++)
          res[i6] = msg[i6] | 0;
      }
      return res;
    }
    exports.toArray = toArray;
    function toHex5(msg) {
      var res = "";
      for (var i6 = 0; i6 < msg.length; i6++)
        res += zero2(msg[i6].toString(16));
      return res;
    }
    exports.toHex = toHex5;
    function htonl(w7) {
      var res = w7 >>> 24 | w7 >>> 8 & 65280 | w7 << 8 & 16711680 | (w7 & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i6 = 0; i6 < msg.length; i6++) {
        var w7 = msg[i6];
        if (endian === "little")
          w7 = htonl(w7);
        res += zero8(w7.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert3(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i6 = 0, k7 = start; i6 < res.length; i6++, k7 += 4) {
        var w7;
        if (endian === "big")
          w7 = msg[k7] << 24 | msg[k7 + 1] << 16 | msg[k7 + 2] << 8 | msg[k7 + 3];
        else
          w7 = msg[k7 + 3] << 24 | msg[k7 + 2] << 16 | msg[k7 + 1] << 8 | msg[k7];
        res[i6] = w7 >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i6 = 0, k7 = 0; i6 < msg.length; i6++, k7 += 4) {
        var m4 = msg[i6];
        if (endian === "big") {
          res[k7] = m4 >>> 24;
          res[k7 + 1] = m4 >>> 16 & 255;
          res[k7 + 2] = m4 >>> 8 & 255;
          res[k7 + 3] = m4 & 255;
        } else {
          res[k7 + 3] = m4 >>> 24;
          res[k7 + 2] = m4 >>> 16 & 255;
          res[k7 + 1] = m4 >>> 8 & 255;
          res[k7] = m4 & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w7, b6) {
      return w7 >>> b6 | w7 << 32 - b6;
    }
    exports.rotr32 = rotr32;
    function rotl32(w7, b6) {
      return w7 << b6 | w7 >>> 32 - b6;
    }
    exports.rotl32 = rotl32;
    function sum32(a4, b6) {
      return a4 + b6 >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a4, b6, c8) {
      return a4 + b6 + c8 >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a4, b6, c8, d6) {
      return a4 + b6 + c8 + d6 >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a4, b6, c8, d6, e3) {
      return a4 + b6 + c8 + d6 + e3 >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo4 = al + bl >>> 0;
      var hi3 = (lo4 < al ? 1 : 0) + ah + bh;
      buf[pos] = hi3 >>> 0;
      buf[pos + 1] = lo4;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo4 = al + bl >>> 0;
      var hi3 = (lo4 < al ? 1 : 0) + ah + bh;
      return hi3 >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo4 = al + bl;
      return lo4 >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo4 = al;
      lo4 = lo4 + bl >>> 0;
      carry += lo4 < al ? 1 : 0;
      lo4 = lo4 + cl >>> 0;
      carry += lo4 < cl ? 1 : 0;
      lo4 = lo4 + dl >>> 0;
      carry += lo4 < dl ? 1 : 0;
      var hi3 = ah + bh + ch + dh + carry;
      return hi3 >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo4 = al + bl + cl + dl;
      return lo4 >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo4 = al;
      lo4 = lo4 + bl >>> 0;
      carry += lo4 < al ? 1 : 0;
      lo4 = lo4 + cl >>> 0;
      carry += lo4 < cl ? 1 : 0;
      lo4 = lo4 + dl >>> 0;
      carry += lo4 < dl ? 1 : 0;
      lo4 = lo4 + el >>> 0;
      carry += lo4 < el ? 1 : 0;
      var hi3 = ah + bh + ch + dh + eh + carry;
      return hi3 >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo4 = al + bl + cl + dl + el;
      return lo4 >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r4 = al << 32 - num | ah >>> num;
      return r4 >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r4 = ah << 32 - num | al >>> num;
      return r4 >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r4 = ah << 32 - num | al >>> num;
      return r4 >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// ../../node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "../../node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    var utils = require_utils4();
    var assert3 = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r4 = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r4, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r4, this.endian);
        for (var i6 = 0; i6 < msg.length; i6 += this._delta32)
          this._update(msg, i6, i6 + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest2(enc) {
      this.update(this._pad());
      assert3(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad7() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k7 = bytes - (len + this.padLength) % bytes;
      var res = new Array(k7 + this.padLength);
      res[0] = 128;
      for (var i6 = 1; i6 < k7; i6++)
        res[i6] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t2 = 8; t2 < this.padLength; t2++)
          res[i6++] = 0;
        res[i6++] = 0;
        res[i6++] = 0;
        res[i6++] = 0;
        res[i6++] = 0;
        res[i6++] = len >>> 24 & 255;
        res[i6++] = len >>> 16 & 255;
        res[i6++] = len >>> 8 & 255;
        res[i6++] = len & 255;
      } else {
        res[i6++] = len & 255;
        res[i6++] = len >>> 8 & 255;
        res[i6++] = len >>> 16 & 255;
        res[i6++] = len >>> 24 & 255;
        res[i6++] = 0;
        res[i6++] = 0;
        res[i6++] = 0;
        res[i6++] = 0;
        for (t2 = 8; t2 < this.padLength; t2++)
          res[i6++] = 0;
      }
      return res;
    };
  }
});

// ../../node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "../../node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    var utils = require_utils4();
    var rotr32 = utils.rotr32;
    function ft_1(s4, x6, y7, z6) {
      if (s4 === 0)
        return ch32(x6, y7, z6);
      if (s4 === 1 || s4 === 3)
        return p32(x6, y7, z6);
      if (s4 === 2)
        return maj32(x6, y7, z6);
    }
    exports.ft_1 = ft_1;
    function ch32(x6, y7, z6) {
      return x6 & y7 ^ ~x6 & z6;
    }
    exports.ch32 = ch32;
    function maj32(x6, y7, z6) {
      return x6 & y7 ^ x6 & z6 ^ y7 & z6;
    }
    exports.maj32 = maj32;
    function p32(x6, y7, z6) {
      return x6 ^ y7 ^ z6;
    }
    exports.p32 = p32;
    function s0_256(x6) {
      return rotr32(x6, 2) ^ rotr32(x6, 13) ^ rotr32(x6, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x6) {
      return rotr32(x6, 6) ^ rotr32(x6, 11) ^ rotr32(x6, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x6) {
      return rotr32(x6, 7) ^ rotr32(x6, 18) ^ x6 >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x6) {
      return rotr32(x6, 17) ^ rotr32(x6, 19) ^ x6 >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// ../../node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "../../node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W4 = this.W;
      for (var i6 = 0; i6 < 16; i6++)
        W4[i6] = msg[start + i6];
      for (; i6 < W4.length; i6++)
        W4[i6] = rotl32(W4[i6 - 3] ^ W4[i6 - 8] ^ W4[i6 - 14] ^ W4[i6 - 16], 1);
      var a4 = this.h[0];
      var b6 = this.h[1];
      var c8 = this.h[2];
      var d6 = this.h[3];
      var e3 = this.h[4];
      for (i6 = 0; i6 < W4.length; i6++) {
        var s4 = ~~(i6 / 20);
        var t2 = sum32_5(rotl32(a4, 5), ft_1(s4, b6, c8, d6), e3, W4[i6], sha1_K[s4]);
        e3 = d6;
        d6 = c8;
        c8 = rotl32(b6, 30);
        b6 = a4;
        a4 = t2;
      }
      this.h[0] = sum32(this.h[0], a4);
      this.h[1] = sum32(this.h[1], b6);
      this.h[2] = sum32(this.h[2], c8);
      this.h[3] = sum32(this.h[3], d6);
      this.h[4] = sum32(this.h[4], e3);
    };
    SHA1.prototype._digest = function digest2(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// ../../node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "../../node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var shaCommon = require_common2();
    var assert3 = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W4 = this.W;
      for (var i6 = 0; i6 < 16; i6++)
        W4[i6] = msg[start + i6];
      for (; i6 < W4.length; i6++)
        W4[i6] = sum32_4(g1_256(W4[i6 - 2]), W4[i6 - 7], g0_256(W4[i6 - 15]), W4[i6 - 16]);
      var a4 = this.h[0];
      var b6 = this.h[1];
      var c8 = this.h[2];
      var d6 = this.h[3];
      var e3 = this.h[4];
      var f9 = this.h[5];
      var g5 = this.h[6];
      var h6 = this.h[7];
      assert3(this.k.length === W4.length);
      for (i6 = 0; i6 < W4.length; i6++) {
        var T1 = sum32_5(h6, s1_256(e3), ch32(e3, f9, g5), this.k[i6], W4[i6]);
        var T22 = sum32(s0_256(a4), maj32(a4, b6, c8));
        h6 = g5;
        g5 = f9;
        f9 = e3;
        e3 = sum32(d6, T1);
        d6 = c8;
        c8 = b6;
        b6 = a4;
        a4 = sum32(T1, T22);
      }
      this.h[0] = sum32(this.h[0], a4);
      this.h[1] = sum32(this.h[1], b6);
      this.h[2] = sum32(this.h[2], c8);
      this.h[3] = sum32(this.h[3], d6);
      this.h[4] = sum32(this.h[4], e3);
      this.h[5] = sum32(this.h[5], f9);
      this.h[6] = sum32(this.h[6], g5);
      this.h[7] = sum32(this.h[7], h6);
    };
    SHA256.prototype._digest = function digest2(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// ../../node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "../../node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest2(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// ../../node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "../../node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var assert3 = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W4 = this.W;
      for (var i6 = 0; i6 < 32; i6++)
        W4[i6] = msg[start + i6];
      for (; i6 < W4.length; i6 += 2) {
        var c0_hi = g1_512_hi(W4[i6 - 4], W4[i6 - 3]);
        var c0_lo = g1_512_lo(W4[i6 - 4], W4[i6 - 3]);
        var c1_hi = W4[i6 - 14];
        var c1_lo = W4[i6 - 13];
        var c2_hi = g0_512_hi(W4[i6 - 30], W4[i6 - 29]);
        var c2_lo = g0_512_lo(W4[i6 - 30], W4[i6 - 29]);
        var c3_hi = W4[i6 - 32];
        var c3_lo = W4[i6 - 31];
        W4[i6] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W4[i6 + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W4 = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert3(this.k.length === W4.length);
      for (var i6 = 0; i6 < W4.length; i6 += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i6];
        var c3_lo = this.k[i6 + 1];
        var c4_hi = W4[i6];
        var c4_lo = W4[i6 + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest2(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r4 = xh & yh ^ ~xh & zh;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r4 = xl & yl ^ ~xl & zl;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r4 = xh & yh ^ xh & zh ^ yh & zh;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r4 = xl & yl ^ xl & zl ^ yl & zl;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r4 = c0_hi ^ c1_hi ^ c2_hi;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r4 = c0_lo ^ c1_lo ^ c2_lo;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r4 = c0_hi ^ c1_hi ^ c2_hi;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r4 = c0_lo ^ c1_lo ^ c2_lo;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r4 = c0_hi ^ c1_hi ^ c2_hi;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r4 = c0_lo ^ c1_lo ^ c2_lo;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r4 = c0_hi ^ c1_hi ^ c2_hi;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r4 = c0_lo ^ c1_lo ^ c2_lo;
      if (r4 < 0)
        r4 += 4294967296;
      return r4;
    }
  }
});

// ../../node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "../../node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest2(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// ../../node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "../../node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// ../../node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "../../node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    var utils = require_utils4();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD1602() {
      if (!(this instanceof RIPEMD1602))
        return new RIPEMD1602();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD1602, BlockHash);
    exports.ripemd160 = RIPEMD1602;
    RIPEMD1602.blockSize = 512;
    RIPEMD1602.outSize = 160;
    RIPEMD1602.hmacStrength = 192;
    RIPEMD1602.padLength = 64;
    RIPEMD1602.prototype._update = function update(msg, start) {
      var A4 = this.h[0];
      var B4 = this.h[1];
      var C6 = this.h[2];
      var D3 = this.h[3];
      var E7 = this.h[4];
      var Ah = A4;
      var Bh = B4;
      var Ch = C6;
      var Dh = D3;
      var Eh = E7;
      for (var j4 = 0; j4 < 80; j4++) {
        var T4 = sum32(
          rotl32(
            sum32_4(A4, f9(j4, B4, C6, D3), msg[r4[j4] + start], K5(j4)),
            s4[j4]
          ),
          E7
        );
        A4 = E7;
        E7 = D3;
        D3 = rotl32(C6, 10);
        C6 = B4;
        B4 = T4;
        T4 = sum32(
          rotl32(
            sum32_4(Ah, f9(79 - j4, Bh, Ch, Dh), msg[rh[j4] + start], Kh(j4)),
            sh[j4]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T4;
      }
      T4 = sum32_3(this.h[1], C6, Dh);
      this.h[1] = sum32_3(this.h[2], D3, Eh);
      this.h[2] = sum32_3(this.h[3], E7, Ah);
      this.h[3] = sum32_3(this.h[4], A4, Bh);
      this.h[4] = sum32_3(this.h[0], B4, Ch);
      this.h[0] = T4;
    };
    RIPEMD1602.prototype._digest = function digest2(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f9(j4, x6, y7, z6) {
      if (j4 <= 15)
        return x6 ^ y7 ^ z6;
      else if (j4 <= 31)
        return x6 & y7 | ~x6 & z6;
      else if (j4 <= 47)
        return (x6 | ~y7) ^ z6;
      else if (j4 <= 63)
        return x6 & z6 | y7 & ~z6;
      else
        return x6 ^ (y7 | ~z6);
    }
    function K5(j4) {
      if (j4 <= 15)
        return 0;
      else if (j4 <= 31)
        return 1518500249;
      else if (j4 <= 47)
        return 1859775393;
      else if (j4 <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j4) {
      if (j4 <= 15)
        return 1352829926;
      else if (j4 <= 31)
        return 1548603684;
      else if (j4 <= 47)
        return 1836072691;
      else if (j4 <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r4 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s4 = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// ../../node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "../../node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    var utils = require_utils4();
    var assert3 = require_minimalistic_assert();
    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init(key) {
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert3(key.length <= this.blockSize);
      for (var i6 = key.length; i6 < this.blockSize; i6++)
        key.push(0);
      for (i6 = 0; i6 < key.length; i6++)
        key[i6] ^= 54;
      this.inner = new this.Hash().update(key);
      for (i6 = 0; i6 < key.length; i6++)
        key[i6] ^= 106;
      this.outer = new this.Hash().update(key);
    };
    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest2(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// ../../node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "../../node_modules/hash.js/lib/hash.js"(exports) {
    var hash = exports;
    hash.utils = require_utils4();
    hash.common = require_common();
    hash.sha = require_sha();
    hash.ripemd = require_ripemd();
    hash.hmac = require_hmac();
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
  }
});

// ../../node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/curves.js"(exports) {
    "use strict";
    var curves = exports;
    var hash = require_hash();
    var curve = require_curve();
    var utils = require_utils3();
    var assert3 = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert3(this.g.validate(), "Invalid curve");
      assert3(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves, name2, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name2, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e3) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// ../../node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  "../../node_modules/hmac-drbg/lib/hmac-drbg.js"(exports, module) {
    "use strict";
    var hash = require_hash();
    var utils = require_utils2();
    var assert3 = require_minimalistic_assert();
    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils.toArray(options.pers, options.persEnc || "hex");
      assert3(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i6 = 0; i6 < this.V.length; i6++) {
        this.K[i6] = 0;
        this.V[i6] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);
      assert3(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
      }
      if (add) {
        add = utils.toArray(add, addEnc || "hex");
        this._update(add);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert3 = utils.assert;
    function KeyPair(ec2, options) {
      this.ec = ec2;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate7() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        if (this.ec.curve.type === "mont") {
          assert3(key.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert3(key.x && key.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert3(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature, options) {
      return this.ec.verify(msg, signature, this, void 0, options);
    };
    KeyPair.prototype.inspect = function inspect() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert3 = utils.assert;
    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;
      if (this._importDER(options, enc))
        return;
      assert3(options.r && options.s, "Signature without r or s");
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;
    function Position() {
      this.place = 0;
    }
    function getLength(buf, p7) {
      var initial = buf[p7.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      if (buf[p7.place] === 0) {
        return false;
      }
      var val = 0;
      for (var i6 = 0, off = p7.place; i6 < octetLen; i6++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p7.place = off;
      return val;
    }
    function rmPadding(buf) {
      var i6 = 0;
      var len = buf.length - 1;
      while (!buf[i6] && !(buf[i6 + 1] & 128) && i6 < len) {
        i6++;
      }
      if (i6 === 0) {
        return buf;
      }
      return buf.slice(i6);
    }
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p7 = new Position();
      if (data[p7.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p7);
      if (len === false) {
        return false;
      }
      if (len + p7.place !== data.length) {
        return false;
      }
      if (data[p7.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p7);
      if (rlen === false) {
        return false;
      }
      if ((data[p7.place] & 128) !== 0) {
        return false;
      }
      var r4 = data.slice(p7.place, rlen + p7.place);
      p7.place += rlen;
      if (data[p7.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p7);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p7.place) {
        return false;
      }
      if ((data[p7.place] & 128) !== 0) {
        return false;
      }
      var s4 = data.slice(p7.place, slen + p7.place);
      if (r4[0] === 0) {
        if (r4[1] & 128) {
          r4 = r4.slice(1);
        } else {
          return false;
        }
      }
      if (s4[0] === 0) {
        if (s4[1] & 128) {
          s4 = s4.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN(r4);
      this.s = new BN(s4);
      this.recoveryParam = null;
      return true;
    };
    function constructLength(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature.prototype.toDER = function toDER(enc) {
      var r4 = this.r.toArray();
      var s4 = this.s.toArray();
      if (r4[0] & 128)
        r4 = [0].concat(r4);
      if (s4[0] & 128)
        s4 = [0].concat(s4);
      r4 = rmPadding(r4);
      s4 = rmPadding(s4);
      while (!s4[0] && !(s4[1] & 128)) {
        s4 = s4.slice(1);
      }
      var arr = [2];
      constructLength(arr, r4.length);
      arr = arr.concat(r4);
      arr.push(2);
      constructLength(arr, s4.length);
      var backHalf = arr.concat(s4);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var HmacDRBG = require_hmac_drbg();
    var utils = require_utils3();
    var curves = require_curves();
    var rand = require_brorand();
    var assert3 = utils.assert;
    var KeyPair = require_key();
    var Signature = require_signature();
    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);
      if (typeof options === "string") {
        assert3(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (; ; ) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly, bitLength) {
      var byteLength;
      if (BN.isBN(msg) || typeof msg === "number") {
        msg = new BN(msg, 16);
        byteLength = msg.byteLength();
      } else if (typeof msg === "object") {
        byteLength = msg.length;
        msg = new BN(msg, 16);
      } else {
        var str = msg.toString();
        byteLength = str.length + 1 >>> 1;
        msg = new BN(str, 16);
      }
      if (typeof bitLength !== "number") {
        bitLength = byteLength * 8;
      }
      var delta = bitLength - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      if (typeof msg !== "string" && typeof msg !== "number" && !BN.isBN(msg)) {
        assert3(
          typeof msg === "object" && msg && typeof msg.length === "number",
          "Expected message to be an array-like, a hex string, or a BN instance"
        );
        assert3(msg.length >>> 0 === msg.length);
        for (var i6 = 0; i6 < msg.length; i6++)
          assert3((msg[i6] & 255) === msg[i6]);
      }
      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(msg, false, options.msgBitLength);
      assert3(!msg.isNeg(), "Can not sign a negative message");
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      assert3(new BN(nonce).eq(msg), "Can not sign message");
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN(1));
      for (var iter = 0; ; iter++) {
        var k7 = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k7 = this._truncateToN(k7, true);
        if (k7.cmpn(1) <= 0 || k7.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k7);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r4 = kpX.umod(this.n);
        if (r4.cmpn(0) === 0)
          continue;
        var s4 = k7.invm(this.n).mul(r4.mul(key.getPrivate()).iadd(msg));
        s4 = s4.umod(this.n);
        if (s4.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r4) !== 0 ? 2 : 0);
        if (options.canonical && s4.cmp(this.nh) > 0) {
          s4 = this.n.sub(s4);
          recoveryParam ^= 1;
        }
        return new Signature({ r: r4, s: s4, recoveryParam });
      }
    };
    EC.prototype.verify = function verify(msg, signature, key, enc, options) {
      if (!options)
        options = {};
      msg = this._truncateToN(msg, false, options.msgBitLength);
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, "hex");
      var r4 = signature.r;
      var s4 = signature.s;
      if (r4.cmpn(1) < 0 || r4.cmp(this.n) >= 0)
        return false;
      if (s4.cmpn(1) < 0 || s4.cmp(this.n) >= 0)
        return false;
      var sinv = s4.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u22 = sinv.mul(r4).umod(this.n);
      var p7;
      if (!this.curve._maxwellTrick) {
        p7 = this.g.mulAdd(u1, key.getPublic(), u22);
        if (p7.isInfinity())
          return false;
        return p7.getX().umod(this.n).cmp(r4) === 0;
      }
      p7 = this.g.jmulAdd(u1, key.getPublic(), u22);
      if (p7.isInfinity())
        return false;
      return p7.eqXToP(r4);
    };
    EC.prototype.recoverPubKey = function(msg, signature, j4, enc) {
      assert3((3 & j4) === j4, "The recovery param is more than two bits");
      signature = new Signature(signature, enc);
      var n6 = this.n;
      var e3 = new BN(msg);
      var r4 = signature.r;
      var s4 = signature.s;
      var isYOdd = j4 & 1;
      var isSecondKey = j4 >> 1;
      if (r4.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r4 = this.curve.pointFromX(r4.add(this.curve.n), isYOdd);
      else
        r4 = this.curve.pointFromX(r4, isYOdd);
      var rInv = signature.r.invm(n6);
      var s1 = n6.sub(e3).mul(rInv).umod(n6);
      var s22 = s4.mul(rInv).umod(n6);
      return this.g.mulAdd(s1, r4, s22);
    };
    EC.prototype.getKeyRecoveryParam = function(e3, signature, Q4, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;
      for (var i6 = 0; i6 < 4; i6++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e3, signature, i6);
        } catch (e4) {
          continue;
        }
        if (Qprime.eq(Q4))
          return i6;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var assert3 = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub });
    };
    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret });
    };
    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a4 = hash.slice(0, eddsa.encodingLength);
      a4[0] &= 248;
      a4[lastIx] &= 127;
      a4[lastIx] |= 64;
      return a4;
    });
    cachedProperty(KeyPair, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair, "hash", function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair.prototype.sign = function sign(message) {
      assert3(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert3(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair;
  }
});

// ../../node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
    "use strict";
    var BN = require_bn();
    var utils = require_utils3();
    var assert3 = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        assert3(sig.length === eddsa.encodingLength * 2, "Signature has invalid size");
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert3(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature, "S", function S5() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature, "R", function R3() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature.prototype.toBytes = function toBytes3() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature.prototype.toHex = function toHex5() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature;
  }
});

// ../../node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "../../node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
    "use strict";
    var hash = require_hash();
    var curves = require_curves();
    var utils = require_utils3();
    var assert3 = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require_key2();
    var Signature = require_signature2();
    function EDDSA(curve) {
      assert3(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r4 = this.hashInt(key.messagePrefix(), message);
      var R3 = this.g.mul(r4);
      var Rencoded = this.encodePoint(R3);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
      var S5 = r4.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R3, S: S5, Rencoded });
    };
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
        return false;
      }
      var key = this.keyFromPublic(pub);
      var h6 = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h6));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash2 = this.hash();
      for (var i6 = 0; i6 < arguments.length; i6++)
        hash2.update(arguments[i6]);
      return utils.intFromLE(hash2.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y7 = utils.intFromLE(normed);
      return this.curve.pointFromY(y7, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// ../../node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "../../node_modules/elliptic/lib/elliptic.js"(exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = require_package().version;
    elliptic.utils = require_utils3();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// ../../node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto2 = __commonJS({
  "../../node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) || (globalThis === null || globalThis === void 0 ? void 0 : globalThis.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// ../../node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "../../node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// ../../node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "../../node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto2(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// ../../node_modules/ws/browser.js
var require_browser2 = __commonJS({
  "../../node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// ../../node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "../../node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof globalThis !== "undefined" && globalThis;
    var __globalThis__ = function() {
      function F4() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F4.prototype = __global__;
      return new F4();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g5 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof globalThis2 !== "undefined" && globalThis2 || {};
        var support = {
          searchParams: "URLSearchParams" in g5,
          iterable: "Symbol" in g5 && "iterator" in Symbol,
          blob: "FileReader" in g5 && "Blob" in g5 && function() {
            try {
              new Blob();
              return true;
            } catch (e3) {
              return false;
            }
          }(),
          formData: "FormData" in g5,
          arrayBuffer: "ArrayBuffer" in g5
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
            throw new TypeError('Invalid character in header field name: "' + name2 + '"');
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name2) {
              this.append(name2, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers.prototype.append = function(name2, value) {
          name2 = normalizeName(name2);
          value = normalizeValue(value);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers.prototype.set = function(name2, value) {
          this.map[normalizeName(name2)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push([name2, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody)
            return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i6 = 0; i6 < view.length; i6++) {
            chars[i6] = String.fromCharCode(view[i6]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode8);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g5) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode8(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name2 = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g5.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g5.location.href ? g5.location.href : url;
              } catch (e3) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g5.Headers && init.headers instanceof g5.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
                names.push(normalizeName(name2));
                xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
              });
              request.headers.forEach(function(value, name2) {
                if (names.indexOf(name2) === -1) {
                  xhr.setRequestHeader(name2, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name2) {
                xhr.setRequestHeader(name2, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g5.fetch) {
          g5.fetch = fetch2;
          g5.Headers = Headers;
          g5.Request = Request2;
          g5.Response = Response2;
        }
        exports2.Headers = Headers;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/DateUtil.js
var import_dayjs = __toESM(require_dayjs_min(), 1);
var import_en = __toESM(require_en(), 1);
var import_relativeTime = __toESM(require_relativeTime(), 1);
var import_updateLocale = __toESM(require_updateLocale(), 1);
import_dayjs.default.extend(import_relativeTime.default);
import_dayjs.default.extend(import_updateLocale.default);
var localeObject = {
  ...import_en.default,
  name: "en-web3-modal",
  relativeTime: {
    future: "in %s",
    past: "%s ago",
    s: "%d sec",
    m: "1 min",
    mm: "%d min",
    h: "1 hr",
    hh: "%d hrs",
    d: "1 d",
    dd: "%d d",
    M: "1 mo",
    MM: "%d mo",
    y: "1 yr",
    yy: "%d yr"
  }
};
var MONTH_NAMES = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December"
];
import_dayjs.default.locale("en-web3-modal", localeObject);
var DateUtil = {
  getMonthNameByIndex(monthIndex) {
    return MONTH_NAMES[monthIndex];
  },
  getYear(date = (/* @__PURE__ */ new Date()).toISOString()) {
    return (0, import_dayjs.default)(date).year();
  },
  getRelativeDateFromNow(date) {
    return (0, import_dayjs.default)(date).locale("en-web3-modal").fromNow(true);
  },
  formatDate(date, format = "DD MMM") {
    return (0, import_dayjs.default)(date).format(format);
  }
};

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil = {
  caipNetworkIdToNumber(caipnetworkId) {
    return caipnetworkId ? Number(caipnetworkId.split(":")[1]) : void 0;
  },
  parseEvmChainId(chainId) {
    return typeof chainId === "string" ? this.caipNetworkIdToNumber(chainId) : chainId;
  },
  getNetworksByNamespace(networks, namespace) {
    return (networks == null ? void 0 : networks.filter((network) => network.chainNamespace === namespace)) || [];
  },
  getFirstNetworkByNamespace(networks, namespace) {
    return this.getNetworksByNamespace(networks, namespace)[0];
  }
};

// ../../node_modules/big.js/big.mjs
var DP = 20;
var RM = 1;
var MAX_DP = 1e6;
var MAX_POWER = 1e6;
var NE = -7;
var PE = 21;
var STRICT = false;
var NAME = "[big.js] ";
var INVALID = NAME + "Invalid ";
var INVALID_DP = INVALID + "decimal places";
var INVALID_RM = INVALID + "rounding mode";
var DIV_BY_ZERO = NAME + "Division by zero";
var P = {};
var UNDEFINED = void 0;
var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
function _Big_() {
  function Big2(n6) {
    var x6 = this;
    if (!(x6 instanceof Big2))
      return n6 === UNDEFINED ? _Big_() : new Big2(n6);
    if (n6 instanceof Big2) {
      x6.s = n6.s;
      x6.e = n6.e;
      x6.c = n6.c.slice();
    } else {
      if (typeof n6 !== "string") {
        if (Big2.strict === true && typeof n6 !== "bigint") {
          throw TypeError(INVALID + "value");
        }
        n6 = n6 === 0 && 1 / n6 < 0 ? "-0" : String(n6);
      }
      parse(x6, n6);
    }
    x6.constructor = Big2;
  }
  Big2.prototype = P;
  Big2.DP = DP;
  Big2.RM = RM;
  Big2.NE = NE;
  Big2.PE = PE;
  Big2.strict = STRICT;
  Big2.roundDown = 0;
  Big2.roundHalfUp = 1;
  Big2.roundHalfEven = 2;
  Big2.roundUp = 3;
  return Big2;
}
function parse(x6, n6) {
  var e3, i6, nl;
  if (!NUMERIC.test(n6)) {
    throw Error(INVALID + "number");
  }
  x6.s = n6.charAt(0) == "-" ? (n6 = n6.slice(1), -1) : 1;
  if ((e3 = n6.indexOf(".")) > -1)
    n6 = n6.replace(".", "");
  if ((i6 = n6.search(/e/i)) > 0) {
    if (e3 < 0)
      e3 = i6;
    e3 += +n6.slice(i6 + 1);
    n6 = n6.substring(0, i6);
  } else if (e3 < 0) {
    e3 = n6.length;
  }
  nl = n6.length;
  for (i6 = 0; i6 < nl && n6.charAt(i6) == "0"; )
    ++i6;
  if (i6 == nl) {
    x6.c = [x6.e = 0];
  } else {
    for (; nl > 0 && n6.charAt(--nl) == "0"; )
      ;
    x6.e = e3 - i6 - 1;
    x6.c = [];
    for (e3 = 0; i6 <= nl; )
      x6.c[e3++] = +n6.charAt(i6++);
  }
  return x6;
}
function round(x6, sd, rm, more) {
  var xc = x6.c;
  if (rm === UNDEFINED)
    rm = x6.constructor.RM;
  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
    throw Error(INVALID_RM);
  }
  if (sd < 1) {
    more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
    xc.length = 1;
    if (more) {
      x6.e = x6.e - sd + 1;
      xc[0] = 1;
    } else {
      xc[0] = x6.e = 0;
    }
  } else if (sd < xc.length) {
    more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);
    xc.length = sd;
    if (more) {
      for (; ++xc[--sd] > 9; ) {
        xc[sd] = 0;
        if (sd === 0) {
          ++x6.e;
          xc.unshift(1);
          break;
        }
      }
    }
    for (sd = xc.length; !xc[--sd]; )
      xc.pop();
  }
  return x6;
}
function stringify2(x6, doExponential, isNonzero) {
  var e3 = x6.e, s4 = x6.c.join(""), n6 = s4.length;
  if (doExponential) {
    s4 = s4.charAt(0) + (n6 > 1 ? "." + s4.slice(1) : "") + (e3 < 0 ? "e" : "e+") + e3;
  } else if (e3 < 0) {
    for (; ++e3; )
      s4 = "0" + s4;
    s4 = "0." + s4;
  } else if (e3 > 0) {
    if (++e3 > n6) {
      for (e3 -= n6; e3--; )
        s4 += "0";
    } else if (e3 < n6) {
      s4 = s4.slice(0, e3) + "." + s4.slice(e3);
    }
  } else if (n6 > 1) {
    s4 = s4.charAt(0) + "." + s4.slice(1);
  }
  return x6.s < 0 && isNonzero ? "-" + s4 : s4;
}
P.abs = function() {
  var x6 = new this.constructor(this);
  x6.s = 1;
  return x6;
};
P.cmp = function(y7) {
  var isneg, x6 = this, xc = x6.c, yc = (y7 = new x6.constructor(y7)).c, i6 = x6.s, j4 = y7.s, k7 = x6.e, l8 = y7.e;
  if (!xc[0] || !yc[0])
    return !xc[0] ? !yc[0] ? 0 : -j4 : i6;
  if (i6 != j4)
    return i6;
  isneg = i6 < 0;
  if (k7 != l8)
    return k7 > l8 ^ isneg ? 1 : -1;
  j4 = (k7 = xc.length) < (l8 = yc.length) ? k7 : l8;
  for (i6 = -1; ++i6 < j4; ) {
    if (xc[i6] != yc[i6])
      return xc[i6] > yc[i6] ^ isneg ? 1 : -1;
  }
  return k7 == l8 ? 0 : k7 > l8 ^ isneg ? 1 : -1;
};
P.div = function(y7) {
  var x6 = this, Big2 = x6.constructor, a4 = x6.c, b6 = (y7 = new Big2(y7)).c, k7 = x6.s == y7.s ? 1 : -1, dp = Big2.DP;
  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  if (!b6[0]) {
    throw Error(DIV_BY_ZERO);
  }
  if (!a4[0]) {
    y7.s = k7;
    y7.c = [y7.e = 0];
    return y7;
  }
  var bl, bt3, n6, cmp, ri3, bz = b6.slice(), ai3 = bl = b6.length, al = a4.length, r4 = a4.slice(0, bl), rl = r4.length, q2 = y7, qc = q2.c = [], qi3 = 0, p7 = dp + (q2.e = x6.e - y7.e) + 1;
  q2.s = k7;
  k7 = p7 < 0 ? 0 : p7;
  bz.unshift(0);
  for (; rl++ < bl; )
    r4.push(0);
  do {
    for (n6 = 0; n6 < 10; n6++) {
      if (bl != (rl = r4.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri3 = -1, cmp = 0; ++ri3 < bl; ) {
          if (b6[ri3] != r4[ri3]) {
            cmp = b6[ri3] > r4[ri3] ? 1 : -1;
            break;
          }
        }
      }
      if (cmp < 0) {
        for (bt3 = rl == bl ? b6 : bz; rl; ) {
          if (r4[--rl] < bt3[rl]) {
            ri3 = rl;
            for (; ri3 && !r4[--ri3]; )
              r4[ri3] = 9;
            --r4[ri3];
            r4[rl] += 10;
          }
          r4[rl] -= bt3[rl];
        }
        for (; !r4[0]; )
          r4.shift();
      } else {
        break;
      }
    }
    qc[qi3++] = cmp ? n6 : ++n6;
    if (r4[0] && cmp)
      r4[rl] = a4[ai3] || 0;
    else
      r4 = [a4[ai3]];
  } while ((ai3++ < al || r4[0] !== UNDEFINED) && k7--);
  if (!qc[0] && qi3 != 1) {
    qc.shift();
    q2.e--;
    p7--;
  }
  if (qi3 > p7)
    round(q2, p7, Big2.RM, r4[0] !== UNDEFINED);
  return q2;
};
P.eq = function(y7) {
  return this.cmp(y7) === 0;
};
P.gt = function(y7) {
  return this.cmp(y7) > 0;
};
P.gte = function(y7) {
  return this.cmp(y7) > -1;
};
P.lt = function(y7) {
  return this.cmp(y7) < 0;
};
P.lte = function(y7) {
  return this.cmp(y7) < 1;
};
P.minus = P.sub = function(y7) {
  var i6, j4, t2, xlty, x6 = this, Big2 = x6.constructor, a4 = x6.s, b6 = (y7 = new Big2(y7)).s;
  if (a4 != b6) {
    y7.s = -b6;
    return x6.plus(y7);
  }
  var xc = x6.c.slice(), xe4 = x6.e, yc = y7.c, ye4 = y7.e;
  if (!xc[0] || !yc[0]) {
    if (yc[0]) {
      y7.s = -b6;
    } else if (xc[0]) {
      y7 = new Big2(x6);
    } else {
      y7.s = 1;
    }
    return y7;
  }
  if (a4 = xe4 - ye4) {
    if (xlty = a4 < 0) {
      a4 = -a4;
      t2 = xc;
    } else {
      ye4 = xe4;
      t2 = yc;
    }
    t2.reverse();
    for (b6 = a4; b6--; )
      t2.push(0);
    t2.reverse();
  } else {
    j4 = ((xlty = xc.length < yc.length) ? xc : yc).length;
    for (a4 = b6 = 0; b6 < j4; b6++) {
      if (xc[b6] != yc[b6]) {
        xlty = xc[b6] < yc[b6];
        break;
      }
    }
  }
  if (xlty) {
    t2 = xc;
    xc = yc;
    yc = t2;
    y7.s = -y7.s;
  }
  if ((b6 = (j4 = yc.length) - (i6 = xc.length)) > 0)
    for (; b6--; )
      xc[i6++] = 0;
  for (b6 = i6; j4 > a4; ) {
    if (xc[--j4] < yc[j4]) {
      for (i6 = j4; i6 && !xc[--i6]; )
        xc[i6] = 9;
      --xc[i6];
      xc[j4] += 10;
    }
    xc[j4] -= yc[j4];
  }
  for (; xc[--b6] === 0; )
    xc.pop();
  for (; xc[0] === 0; ) {
    xc.shift();
    --ye4;
  }
  if (!xc[0]) {
    y7.s = 1;
    xc = [ye4 = 0];
  }
  y7.c = xc;
  y7.e = ye4;
  return y7;
};
P.mod = function(y7) {
  var ygtx, x6 = this, Big2 = x6.constructor, a4 = x6.s, b6 = (y7 = new Big2(y7)).s;
  if (!y7.c[0]) {
    throw Error(DIV_BY_ZERO);
  }
  x6.s = y7.s = 1;
  ygtx = y7.cmp(x6) == 1;
  x6.s = a4;
  y7.s = b6;
  if (ygtx)
    return new Big2(x6);
  a4 = Big2.DP;
  b6 = Big2.RM;
  Big2.DP = Big2.RM = 0;
  x6 = x6.div(y7);
  Big2.DP = a4;
  Big2.RM = b6;
  return this.minus(x6.times(y7));
};
P.neg = function() {
  var x6 = new this.constructor(this);
  x6.s = -x6.s;
  return x6;
};
P.plus = P.add = function(y7) {
  var e3, k7, t2, x6 = this, Big2 = x6.constructor;
  y7 = new Big2(y7);
  if (x6.s != y7.s) {
    y7.s = -y7.s;
    return x6.minus(y7);
  }
  var xe4 = x6.e, xc = x6.c, ye4 = y7.e, yc = y7.c;
  if (!xc[0] || !yc[0]) {
    if (!yc[0]) {
      if (xc[0]) {
        y7 = new Big2(x6);
      } else {
        y7.s = x6.s;
      }
    }
    return y7;
  }
  xc = xc.slice();
  if (e3 = xe4 - ye4) {
    if (e3 > 0) {
      ye4 = xe4;
      t2 = yc;
    } else {
      e3 = -e3;
      t2 = xc;
    }
    t2.reverse();
    for (; e3--; )
      t2.push(0);
    t2.reverse();
  }
  if (xc.length - yc.length < 0) {
    t2 = yc;
    yc = xc;
    xc = t2;
  }
  e3 = yc.length;
  for (k7 = 0; e3; xc[e3] %= 10)
    k7 = (xc[--e3] = xc[e3] + yc[e3] + k7) / 10 | 0;
  if (k7) {
    xc.unshift(k7);
    ++ye4;
  }
  for (e3 = xc.length; xc[--e3] === 0; )
    xc.pop();
  y7.c = xc;
  y7.e = ye4;
  return y7;
};
P.pow = function(n6) {
  var x6 = this, one = new x6.constructor("1"), y7 = one, isneg = n6 < 0;
  if (n6 !== ~~n6 || n6 < -MAX_POWER || n6 > MAX_POWER) {
    throw Error(INVALID + "exponent");
  }
  if (isneg)
    n6 = -n6;
  for (; ; ) {
    if (n6 & 1)
      y7 = y7.times(x6);
    n6 >>= 1;
    if (!n6)
      break;
    x6 = x6.times(x6);
  }
  return isneg ? one.div(y7) : y7;
};
P.prec = function(sd, rm) {
  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
    throw Error(INVALID + "precision");
  }
  return round(new this.constructor(this), sd, rm);
};
P.round = function(dp, rm) {
  if (dp === UNDEFINED)
    dp = 0;
  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  return round(new this.constructor(this), dp + this.e + 1, rm);
};
P.sqrt = function() {
  var r4, c8, t2, x6 = this, Big2 = x6.constructor, s4 = x6.s, e3 = x6.e, half = new Big2("0.5");
  if (!x6.c[0])
    return new Big2(x6);
  if (s4 < 0) {
    throw Error(NAME + "No square root");
  }
  s4 = Math.sqrt(+stringify2(x6, true, true));
  if (s4 === 0 || s4 === 1 / 0) {
    c8 = x6.c.join("");
    if (!(c8.length + e3 & 1))
      c8 += "0";
    s4 = Math.sqrt(c8);
    e3 = ((e3 + 1) / 2 | 0) - (e3 < 0 || e3 & 1);
    r4 = new Big2((s4 == 1 / 0 ? "5e" : (s4 = s4.toExponential()).slice(0, s4.indexOf("e") + 1)) + e3);
  } else {
    r4 = new Big2(s4 + "");
  }
  e3 = r4.e + (Big2.DP += 4);
  do {
    t2 = r4;
    r4 = half.times(t2.plus(x6.div(t2)));
  } while (t2.c.slice(0, e3).join("") !== r4.c.slice(0, e3).join(""));
  return round(r4, (Big2.DP -= 4) + r4.e + 1, Big2.RM);
};
P.times = P.mul = function(y7) {
  var c8, x6 = this, Big2 = x6.constructor, xc = x6.c, yc = (y7 = new Big2(y7)).c, a4 = xc.length, b6 = yc.length, i6 = x6.e, j4 = y7.e;
  y7.s = x6.s == y7.s ? 1 : -1;
  if (!xc[0] || !yc[0]) {
    y7.c = [y7.e = 0];
    return y7;
  }
  y7.e = i6 + j4;
  if (a4 < b6) {
    c8 = xc;
    xc = yc;
    yc = c8;
    j4 = a4;
    a4 = b6;
    b6 = j4;
  }
  for (c8 = new Array(j4 = a4 + b6); j4--; )
    c8[j4] = 0;
  for (i6 = b6; i6--; ) {
    b6 = 0;
    for (j4 = a4 + i6; j4 > i6; ) {
      b6 = c8[j4] + yc[i6] * xc[j4 - i6 - 1] + b6;
      c8[j4--] = b6 % 10;
      b6 = b6 / 10 | 0;
    }
    c8[j4] = b6;
  }
  if (b6)
    ++y7.e;
  else
    c8.shift();
  for (i6 = c8.length; !c8[--i6]; )
    c8.pop();
  y7.c = c8;
  return y7;
};
P.toExponential = function(dp, rm) {
  var x6 = this, n6 = x6.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x6 = round(new x6.constructor(x6), ++dp, rm);
    for (; x6.c.length < dp; )
      x6.c.push(0);
  }
  return stringify2(x6, true, !!n6);
};
P.toFixed = function(dp, rm) {
  var x6 = this, n6 = x6.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x6 = round(new x6.constructor(x6), dp + x6.e + 1, rm);
    for (dp = dp + x6.e + 1; x6.c.length < dp; )
      x6.c.push(0);
  }
  return stringify2(x6, false, !!n6);
};
P[Symbol.for("nodejs.util.inspect.custom")] = P.toJSON = P.toString = function() {
  var x6 = this, Big2 = x6.constructor;
  return stringify2(x6, x6.e <= Big2.NE || x6.e >= Big2.PE, !!x6.c[0]);
};
P.toNumber = function() {
  var n6 = +stringify2(this, true, true);
  if (this.constructor.strict === true && !this.eq(n6.toString())) {
    throw Error(NAME + "Imprecise conversion");
  }
  return n6;
};
P.toPrecision = function(sd, rm) {
  var x6 = this, Big2 = x6.constructor, n6 = x6.c[0];
  if (sd !== UNDEFINED) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + "precision");
    }
    x6 = round(new Big2(x6), sd, rm);
    for (; x6.c.length < sd; )
      x6.c.push(0);
  }
  return stringify2(x6, sd <= x6.e || x6.e <= Big2.NE || x6.e >= Big2.PE, !!n6);
};
P.valueOf = function() {
  var x6 = this, Big2 = x6.constructor;
  if (Big2.strict === true) {
    throw Error(NAME + "valueOf disallowed");
  }
  return stringify2(x6, x6.e <= Big2.NE || x6.e >= Big2.PE, true);
};
var Big = _Big_();
var big_default = Big;

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/NumberUtil.js
var NumberUtil = {
  bigNumber(value) {
    if (!value) {
      return new big_default(0);
    }
    return new big_default(value);
  },
  multiply(a4, b6) {
    if (a4 === void 0 || b6 === void 0) {
      return new big_default(0);
    }
    const aBigNumber = new big_default(a4);
    const bBigNumber = new big_default(b6);
    return aBigNumber.times(bBigNumber);
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  },
  parseLocalStringToNumber(value) {
    if (value === void 0) {
      return 0;
    }
    return parseFloat(value.replace(/,/gu, ""));
  }
};

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/InputUtil.js
var InputUtil = {
  numericInputKeyDown(event, currentValue, onChange) {
    const allowedKeys = [
      "Backspace",
      "Meta",
      "Ctrl",
      "a",
      "A",
      "c",
      "C",
      "x",
      "X",
      "v",
      "V",
      "ArrowLeft",
      "ArrowRight",
      "Tab"
    ];
    const controlPressed = event.metaKey || event.ctrlKey;
    const eventKey = event.key;
    const lowercaseEventKey = eventKey.toLocaleLowerCase();
    const selectAll = lowercaseEventKey === "a";
    const copyKey = lowercaseEventKey === "c";
    const pasteKey = lowercaseEventKey === "v";
    const cutKey = lowercaseEventKey === "x";
    const isComma = eventKey === ",";
    const isDot = eventKey === ".";
    const isNumericKey = eventKey >= "0" && eventKey <= "9";
    if (!controlPressed && (selectAll || copyKey || pasteKey || cutKey)) {
      event.preventDefault();
    }
    if (currentValue === "0" && !isComma && !isDot && eventKey === "0") {
      event.preventDefault();
    }
    if (currentValue === "0" && isNumericKey) {
      onChange(eventKey);
      event.preventDefault();
    }
    if (isComma || isDot) {
      if (!currentValue) {
        onChange("0.");
        event.preventDefault();
      }
      if ((currentValue == null ? void 0 : currentValue.includes(".")) || (currentValue == null ? void 0 : currentValue.includes(","))) {
        event.preventDefault();
      }
    }
    if (!isNumericKey && !allowedKeys.includes(eventKey) && !isDot && !isComma) {
      event.preventDefault();
    }
  }
};

// ../../node_modules/@reown/appkit-common/dist/esm/src/contracts/erc20.js
var erc20ABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// ../../node_modules/@reown/appkit-common/dist/esm/src/contracts/swap.js
var swapABI = [
  {
    type: "function",
    name: "approve",
    stateMutability: "nonpayable",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    outputs: [{ type: "bool" }]
  }
];

// ../../node_modules/@reown/appkit-common/dist/esm/src/contracts/usdt.js
var usdtABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: []
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "sender",
        type: "address"
      },
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil = {
  WC_NAME_SUFFIX: ".reown.id",
  WC_NAME_SUFFIX_LEGACY: ".wcn.id",
  BLOCKCHAIN_API_RPC_URL: "https://rpc.walletconnect.org",
  PULSE_API_URL: "https://pulse.walletconnect.org",
  W3M_API_URL: "https://api.web3modal.org",
  CONNECTOR_ID: {
    WALLET_CONNECT: "walletConnect",
    INJECTED: "injected",
    WALLET_STANDARD: "announced",
    COINBASE: "coinbaseWallet",
    COINBASE_SDK: "coinbaseWalletSDK",
    SAFE: "safe",
    LEDGER: "ledger",
    OKX: "okx",
    EIP6963: "eip6963",
    AUTH: "ID_AUTH"
  },
  CONNECTOR_NAMES: {
    AUTH: "Auth"
  },
  AUTH_CONNECTOR_SUPPORTED_CHAINS: ["eip155", "solana"],
  LIMITS: {
    PENDING_TRANSACTIONS: 99
  },
  CHAIN: {
    EVM: "eip155",
    SOLANA: "solana",
    POLKADOT: "polkadot",
    BITCOIN: "bip122"
  },
  CHAIN_NAME_MAP: {
    eip155: "EVM Networks",
    solana: "Solana",
    polkadot: "Polkadot",
    bip122: "Bitcoin"
  },
  USDT_CONTRACT_ADDRESSES: [
    "0xdac17f958d2ee523a2206206994597c13d831ec7",
    "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
    "0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7",
    "0x919C1c267BC06a7039e03fcc2eF738525769109c",
    "0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e",
    "0x55d398326f99059fF775485246999027B3197955",
    "0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"
  ],
  HTTP_STATUS_CODES: {
    SERVICE_UNAVAILABLE: 503,
    FORBIDDEN: 403
  },
  UNSUPPORTED_NETWORK_NAME: "Unknown Network"
};

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/ContractUtil.js
var ContractUtil = {
  getERC20Abi: (tokenAddress) => {
    if (ConstantsUtil.USDT_CONTRACT_ADDRESSES.includes(tokenAddress)) {
      return usdtABI;
    }
    return erc20ABI;
  },
  getSwapAbi: () => swapABI
};

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/NavigationUtil.js
var NavigationUtil = {
  URLS: {
    FAQ: "https://walletconnect.com/faq"
  }
};

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/EmitterUtil.js
var Emitter = class _Emitter {
  on(eventName, callback) {
    var _a;
    if (!_Emitter.eventListeners.has(eventName)) {
      _Emitter.eventListeners.set(eventName, /* @__PURE__ */ new Set());
    }
    (_a = _Emitter.eventListeners.get(eventName)) == null ? void 0 : _a.add(callback);
  }
  off(eventName, callback) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.delete(callback);
    }
  }
  emit(eventName, data) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.forEach((callback) => callback(data));
    }
  }
  clear(eventName) {
    _Emitter.eventListeners.delete(eventName);
  }
  clearAll() {
    _Emitter.eventListeners.clear();
  }
};
Emitter.eventListeners = /* @__PURE__ */ new Map();

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/ParseUtil.js
var ParseUtil = {
  validateCaipAddress(address) {
    var _a;
    if (((_a = address.split(":")) == null ? void 0 : _a.length) !== 3) {
      throw new Error("Invalid CAIP Address");
    }
    return address;
  },
  parseCaipAddress(caipAddress) {
    const parts = caipAddress.split(":");
    if (parts.length !== 3) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    const [chainNamespace, chainId, address] = parts;
    if (!chainNamespace || !chainId || !address) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    return {
      chainNamespace,
      chainId,
      address
    };
  },
  parseCaipNetworkId(caipNetworkId) {
    const parts = caipNetworkId.split(":");
    if (parts.length !== 2) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    const [chainNamespace, chainId] = parts;
    if (!chainNamespace || !chainId) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    return {
      chainNamespace,
      chainId
    };
  }
};

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js
var SafeLocalStorageKeys = {
  WALLET_ID: "@appkit/wallet_id",
  WALLET_NAME: "@appkit/wallet_name",
  SOLANA_WALLET: "@appkit/solana_wallet",
  SOLANA_CAIP_CHAIN: "@appkit/solana_caip_chain",
  ACTIVE_CAIP_NETWORK_ID: "@appkit/active_caip_network_id",
  CONNECTED_SOCIAL: "@appkit/connected_social",
  CONNECTED_SOCIAL_USERNAME: "@appkit-wallet/SOCIAL_USERNAME",
  RECENT_WALLETS: "@appkit/recent_wallets",
  DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE",
  ACTIVE_NAMESPACE: "@appkit/active_namespace",
  CONNECTED_NAMESPACES: "@appkit/connected_namespaces",
  CONNECTION_STATUS: "@appkit/connection_status",
  SIWX_AUTH_TOKEN: "@appkit/siwx-auth-token",
  SIWX_NONCE_TOKEN: "@appkit/siwx-nonce-token",
  TELEGRAM_SOCIAL_PROVIDER: "@appkit/social_provider",
  NATIVE_BALANCE_CACHE: "@appkit/native_balance_cache",
  PORTFOLIO_CACHE: "@appkit/portfolio_cache",
  ENS_CACHE: "@appkit/ens_cache",
  IDENTITY_CACHE: "@appkit/identity_cache"
};
function getSafeConnectorIdKey(namespace) {
  if (!namespace) {
    throw new Error("Namespace is required for CONNECTED_CONNECTOR_ID");
  }
  return `@appkit/${namespace}:connected_connector_id`;
}
var SafeLocalStorage = {
  setItem(key, value) {
    if (isSafe() && value !== void 0) {
      localStorage.setItem(key, value);
    }
  },
  getItem(key) {
    if (isSafe()) {
      return localStorage.getItem(key) || void 0;
    }
    return void 0;
  },
  removeItem(key) {
    if (isSafe()) {
      localStorage.removeItem(key);
    }
  },
  clear() {
    if (isSafe()) {
      localStorage.clear();
    }
  }
};
function isSafe() {
  return typeof window !== "undefined" && typeof localStorage !== "undefined";
}

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js
function getW3mThemeVariables(themeVariables, themeType) {
  if (themeType === "light") {
    return {
      "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(231, 100%, 70%, 1)",
      "--w3m-background": "#fff"
    };
  }
  return {
    "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(230, 100%, 67%, 1)",
    "--w3m-background": "#121313"
  };
}

// ../../node_modules/@reown/appkit-common/dist/esm/src/utils/NamesUtil.js
function isReownName(value) {
  return (value == null ? void 0 : value.endsWith(ConstantsUtil.WC_NAME_SUFFIX_LEGACY)) || (value == null ? void 0 : value.endsWith(ConstantsUtil.WC_NAME_SUFFIX));
}

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js
var SECURE_SITE = (
  // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
  (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org"
);
var ONRAMP_PROVIDERS = [
  {
    label: "Coinbase",
    name: "coinbase",
    feeRange: "1-2%",
    url: "",
    supportedChains: ["eip155"]
  },
  {
    label: "Meld.io",
    name: "meld",
    feeRange: "1-2%",
    url: "https://meldcrypto.com",
    supportedChains: ["eip155", "solana"]
  }
];
var MELD_PUBLIC_KEY = "WXETMuFUQmqqybHuRkSgxv:25B8LJHSfpG6LVjR2ytU5Cwh7Z4Sch2ocoU";
var ConstantsUtil2 = {
  FOUR_MINUTES_MS: 24e4,
  TEN_SEC_MS: 1e4,
  FIVE_SEC_MS: 5e3,
  THREE_SEC_MS: 3e3,
  ONE_SEC_MS: 1e3,
  SECURE_SITE,
  SECURE_SITE_DASHBOARD: `${SECURE_SITE}/dashboard`,
  SECURE_SITE_FAVICON: `${SECURE_SITE}/images/favicon.png`,
  RESTRICTED_TIMEZONES: [
    "ASIA/SHANGHAI",
    "ASIA/URUMQI",
    "ASIA/CHONGQING",
    "ASIA/HARBIN",
    "ASIA/KASHGAR",
    "ASIA/MACAU",
    "ASIA/HONG_KONG",
    "ASIA/MACAO",
    "ASIA/BEIJING",
    "ASIA/HARBIN"
  ],
  /**
   * Network name to Coinbase Pay SDK chain name map object
   * @see supported chain names on Coinbase for Pay SDK: https://github.com/coinbase/cbpay-js/blob/d4bda2c05c4d5917c8db6a05476b603546046394/src/types/onramp.ts
   */
  WC_COINBASE_PAY_SDK_CHAINS: [
    "ethereum",
    "arbitrum",
    "polygon",
    "berachain",
    "avalanche-c-chain",
    "optimism",
    "celo",
    "base"
  ],
  WC_COINBASE_PAY_SDK_FALLBACK_CHAIN: "ethereum",
  WC_COINBASE_PAY_SDK_CHAIN_NAME_MAP: {
    Ethereum: "ethereum",
    "Arbitrum One": "arbitrum",
    Polygon: "polygon",
    Berachain: "berachain",
    Avalanche: "avalanche-c-chain",
    "OP Mainnet": "optimism",
    Celo: "celo",
    Base: "base"
  },
  WC_COINBASE_ONRAMP_APP_ID: "bf18c88d-495a-463b-b249-0b9d3656cf5e",
  SWAP_SUGGESTED_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP"
  ],
  SWAP_POPULAR_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP",
    "METAL",
    "DAI",
    "CHAMP",
    "WOLF",
    "SALE",
    "BAL",
    "BUSD",
    "MUST",
    "BTCpx",
    "ROUTE",
    "HEX",
    "WELT",
    "amDAI",
    "VSQ",
    "VISION",
    "AURUM",
    "pSP",
    "SNX",
    "VC",
    "LINK",
    "CHP",
    "amUSDT",
    "SPHERE",
    "FOX",
    "GIDDY",
    "GFC",
    "OMEN",
    "OX_OLD",
    "DE",
    "WNT"
  ],
  BALANCE_SUPPORTED_CHAINS: ["eip155", "solana"],
  SWAP_SUPPORTED_NETWORKS: [
    // Ethereum'
    "eip155:1",
    // Arbitrum One'
    "eip155:42161",
    // Optimism'
    "eip155:10",
    // ZKSync Era'
    "eip155:324",
    // Base'
    "eip155:8453",
    // BNB Smart Chain'
    "eip155:56",
    // Polygon'
    "eip155:137",
    // Gnosis'
    "eip155:100",
    // Avalanche'
    "eip155:43114",
    // Fantom'
    "eip155:250",
    // Klaytn'
    "eip155:8217",
    // Aurora
    "eip155:1313161554"
  ],
  NAMES_SUPPORTED_CHAIN_NAMESPACES: ["eip155"],
  ONRAMP_SUPPORTED_CHAIN_NAMESPACES: ["eip155", "solana"],
  ACTIVITY_ENABLED_CHAIN_NAMESPACES: ["eip155", "solana"],
  NATIVE_TOKEN_ADDRESS: {
    eip155: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    solana: "So11111111111111111111111111111111111111111",
    polkadot: "0x",
    bip122: "0x"
  },
  CONVERT_SLIPPAGE_TOLERANCE: 1,
  CONNECT_LABELS: {
    MOBILE: "Open and continue in a new browser tab"
  },
  DEFAULT_FEATURES: {
    swaps: true,
    onramp: true,
    receive: true,
    send: true,
    email: true,
    emailShowWallets: true,
    socials: [
      "google",
      "x",
      "discord",
      "farcaster",
      "github",
      "apple",
      "facebook"
    ],
    connectorTypeOrder: [
      "walletConnect",
      "recent",
      "injected",
      "featured",
      "custom",
      "external",
      "recommended"
    ],
    history: true,
    analytics: true,
    allWallets: true,
    legalCheckbox: false,
    smartSessions: false,
    collapseWallets: false,
    walletFeaturesOrder: ["onramp", "swaps", "receive", "send"],
    connectMethodsOrder: void 0
  },
  DEFAULT_ACCOUNT_TYPES: {
    bip122: "payment",
    eip155: "smartAccount",
    polkadot: "eoa",
    solana: "eoa"
  },
  ADAPTER_TYPES: {
    UNIVERSAL: "universal",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5",
    BITCOIN: "bitcoin"
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js
var StorageUtil = {
  // Cache expiry in milliseconds
  cacheExpiry: {
    portfolio: 3e4,
    nativeBalance: 3e4,
    ens: 3e5,
    identity: 3e5
  },
  isCacheExpired(timestamp, cacheExpiry) {
    return Date.now() - timestamp > cacheExpiry;
  },
  getActiveNetworkProps() {
    const namespace = StorageUtil.getActiveNamespace();
    const caipNetworkId = StorageUtil.getActiveCaipNetworkId();
    const stringChainId = caipNetworkId ? caipNetworkId.split(":")[1] : void 0;
    const chainId = stringChainId ? isNaN(Number(stringChainId)) ? stringChainId : Number(stringChainId) : void 0;
    return {
      namespace,
      caipNetworkId,
      chainId
    };
  },
  setWalletConnectDeepLink({ name: name2, href }) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DEEPLINK_CHOICE, JSON.stringify({ href, name: name2 }));
    } catch {
      console.info("Unable to set WalletConnect deep link");
    }
  },
  getWalletConnectDeepLink() {
    try {
      const deepLink = SafeLocalStorage.getItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
      if (deepLink) {
        return JSON.parse(deepLink);
      }
    } catch {
      console.info("Unable to get WalletConnect deep link");
    }
    return void 0;
  },
  deleteWalletConnectDeepLink() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
    } catch {
      console.info("Unable to delete WalletConnect deep link");
    }
  },
  setActiveNamespace(namespace) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE, namespace);
    } catch {
      console.info("Unable to set active namespace");
    }
  },
  setActiveCaipNetworkId(caipNetworkId) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID, caipNetworkId);
      StorageUtil.setActiveNamespace(caipNetworkId.split(":")[0]);
    } catch {
      console.info("Unable to set active caip network id");
    }
  },
  getActiveCaipNetworkId() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to get active caip network id");
      return void 0;
    }
  },
  deleteActiveCaipNetworkId() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to delete active caip network id");
    }
  },
  deleteConnectedConnectorId(namespace) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.removeItem(key);
    } catch {
      console.info("Unable to delete connected connector id");
    }
  },
  setAppKitRecent(wallet) {
    try {
      const recentWallets = StorageUtil.getRecentWallets();
      const exists = recentWallets.find((w7) => w7.id === wallet.id);
      if (!exists) {
        recentWallets.unshift(wallet);
        if (recentWallets.length > 2) {
          recentWallets.pop();
        }
        SafeLocalStorage.setItem(SafeLocalStorageKeys.RECENT_WALLETS, JSON.stringify(recentWallets));
      }
    } catch {
      console.info("Unable to set AppKit recent");
    }
  },
  getRecentWallets() {
    try {
      const recent = SafeLocalStorage.getItem(SafeLocalStorageKeys.RECENT_WALLETS);
      return recent ? JSON.parse(recent) : [];
    } catch {
      console.info("Unable to get AppKit recent");
    }
    return [];
  },
  setConnectedConnectorId(namespace, connectorId) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.setItem(key, connectorId);
    } catch {
      console.info("Unable to set Connected Connector Id");
    }
  },
  getActiveNamespace() {
    try {
      const activeNamespace = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE);
      return activeNamespace;
    } catch {
      console.info("Unable to get active namespace");
    }
    return void 0;
  },
  getConnectedConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    try {
      const key = getSafeConnectorIdKey(namespace);
      return SafeLocalStorage.getItem(key);
    } catch (e3) {
      console.info("Unable to get connected connector id in namespace ", namespace);
    }
    return void 0;
  },
  setConnectedSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_SOCIAL, socialProvider);
    } catch {
      console.info("Unable to set connected social provider");
    }
  },
  getConnectedSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to get connected social provider");
    }
    return void 0;
  },
  deleteConnectedSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to delete connected social provider");
    }
  },
  getConnectedSocialUsername() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL_USERNAME);
    } catch {
      console.info("Unable to get connected social username");
    }
    return void 0;
  },
  getStoredActiveCaipNetworkId() {
    var _a;
    const storedCaipNetworkId = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    const networkId = (_a = storedCaipNetworkId == null ? void 0 : storedCaipNetworkId.split(":")) == null ? void 0 : _a[1];
    return networkId;
  },
  setConnectionStatus(status) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTION_STATUS, status);
    } catch {
      console.info("Unable to set connection status");
    }
  },
  getConnectionStatus() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTION_STATUS);
    } catch {
      return void 0;
    }
  },
  getConnectedNamespaces() {
    try {
      const namespaces = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES);
      if (!(namespaces == null ? void 0 : namespaces.length)) {
        return [];
      }
      return namespaces.split(",");
    } catch {
      return [];
    }
  },
  setConnectedNamespaces(namespaces) {
    try {
      const uniqueNamespaces = Array.from(new Set(namespaces));
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES, uniqueNamespaces.join(","));
    } catch {
      console.info("Unable to set namespaces in storage");
    }
  },
  addConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      if (!namespaces.includes(namespace)) {
        namespaces.push(namespace);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to add connected namespace");
    }
  },
  removeConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      const index2 = namespaces.indexOf(namespace);
      if (index2 > -1) {
        namespaces.splice(index2, 1);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to remove connected namespace");
    }
  },
  getTelegramSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to get telegram social provider");
      return null;
    }
  },
  setTelegramSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER, socialProvider);
    } catch {
      console.info("Unable to set telegram social provider");
    }
  },
  removeTelegramSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to remove telegram social provider");
    }
  },
  getBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      const balanceCache = cache[caipAddress];
      if (balanceCache && !this.isCacheExpired(balanceCache.timestamp, this.cacheExpiry.portfolio)) {
        return balanceCache.balance;
      }
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateBalanceCache(params) {
    try {
      const cache = StorageUtil.getBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getNativeBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromNativeBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getNativeBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      const nativeBalanceCache = cache[caipAddress];
      if (nativeBalanceCache && !this.isCacheExpired(nativeBalanceCache.timestamp, this.cacheExpiry.nativeBalance)) {
        return nativeBalanceCache;
      }
      console.info("Discarding cache for address", caipAddress);
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateNativeBalanceCache(params) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getEnsCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.ENS_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get ens name cache");
    }
    return cache;
  },
  getEnsFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      const ensCache = cache[address];
      if (ensCache && !this.isCacheExpired(ensCache.timestamp, this.cacheExpiry.ens)) {
        return ensCache.ens;
      }
      StorageUtil.removeEnsFromCache(address);
    } catch {
      console.info("Unable to get ens name from cache", address);
    }
    return void 0;
  },
  updateEnsCache(params) {
    try {
      const cache = StorageUtil.getEnsCache();
      cache[params.address] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update ens name cache", params);
    }
  },
  removeEnsFromCache(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove ens name from cache", address);
    }
  },
  getIdentityCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.IDENTITY_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get identity cache");
    }
    return cache;
  },
  getIdentityFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      const identityCache = cache[address];
      if (identityCache && !this.isCacheExpired(identityCache.timestamp, this.cacheExpiry.identity)) {
        return identityCache.identity;
      }
      StorageUtil.removeIdentityFromCache(address);
    } catch {
      console.info("Unable to get identity from cache", address);
    }
    return void 0;
  },
  updateIdentityCache(params) {
    try {
      const cache = StorageUtil.getIdentityCache();
      cache[params.address] = {
        identity: params.identity,
        timestamp: params.timestamp
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update identity cache", params);
    }
  },
  removeIdentityFromCache(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove identity from cache", address);
    }
  },
  clearAddressCache() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ENS_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.IDENTITY_CACHE);
    } catch {
      console.info("Unable to clear address cache");
    }
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js
var CoreHelperUtil = {
  isMobile() {
    var _a;
    if (this.isClient()) {
      return Boolean(((_a = window == null ? void 0 : window.matchMedia("(pointer:coarse)")) == null ? void 0 : _a.matches) || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent));
    }
    return false;
  },
  checkCaipNetwork(network, networkName = "") {
    return network == null ? void 0 : network.caipNetworkId.toLocaleLowerCase().includes(networkName.toLowerCase());
  },
  isAndroid() {
    if (!this.isMobile()) {
      return false;
    }
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return CoreHelperUtil.isMobile() && ua.includes("android");
  },
  isIos() {
    if (!this.isMobile()) {
      return false;
    }
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua.includes("iphone") || ua.includes("ipad");
  },
  isSafari() {
    if (!this.isClient()) {
      return false;
    }
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua.includes("safari");
  },
  isClient() {
    return typeof window !== "undefined";
  },
  isPairingExpired(expiry) {
    return expiry ? expiry - Date.now() <= ConstantsUtil2.TEN_SEC_MS : true;
  },
  isAllowedRetry(lastRetry, differenceMs = ConstantsUtil2.ONE_SEC_MS) {
    return Date.now() - lastRetry >= differenceMs;
  },
  copyToClopboard(text) {
    navigator.clipboard.writeText(text);
  },
  isIframe() {
    try {
      return (window == null ? void 0 : window.self) !== (window == null ? void 0 : window.top);
    } catch (e3) {
      return false;
    }
  },
  getPairingExpiry() {
    return Date.now() + ConstantsUtil2.FOUR_MINUTES_MS;
  },
  getNetworkId(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[1];
  },
  getPlainAddress(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[2];
  },
  async wait(milliseconds) {
    return new Promise((resolve) => {
      setTimeout(resolve, milliseconds);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  debounce(func, timeout = 500) {
    let timer = void 0;
    return (...args) => {
      function next() {
        func(...args);
      }
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(next, timeout);
    };
  },
  isHttpUrl(url) {
    return url.startsWith("http://") || url.startsWith("https://");
  },
  formatNativeUrl(appUrl, wcUri) {
    if (CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatUniversalUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.includes("://")) {
      safeAppUrl = appUrl.replaceAll("/", "").replaceAll(":", "");
      safeAppUrl = `${safeAppUrl}://`;
    }
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    if (this.isTelegram() && this.isAndroid()) {
      wcUri = encodeURIComponent(wcUri);
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      href: safeAppUrl
    };
  },
  formatUniversalUrl(appUrl, wcUri) {
    if (!CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatNativeUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      href: safeAppUrl
    };
  },
  getOpenTargetForPlatform(target) {
    if (target === "popupWindow") {
      return target;
    }
    if (this.isTelegram()) {
      if (StorageUtil.getTelegramSocialProvider()) {
        return "_top";
      }
      return "_blank";
    }
    return target;
  },
  openHref(href, target, features) {
    window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  returnOpenHref(href, target, features) {
    return window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  isTelegram() {
    return typeof window !== "undefined" && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (Boolean(window.TelegramWebviewProxy) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.Telegram) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.TelegramWebviewProxyProto));
  },
  async preloadImage(src2) {
    const imagePromise = new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = resolve;
      image.onerror = reject;
      image.crossOrigin = "anonymous";
      image.src = src2;
    });
    return Promise.race([imagePromise, CoreHelperUtil.wait(2e3)]);
  },
  formatBalance(balance, symbol) {
    let formattedBalance = "0.000";
    if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        const formattedValue = Math.floor(number * 1e3) / 1e3;
        if (formattedValue) {
          formattedBalance = formattedValue.toString();
        }
      }
    }
    return `${formattedBalance}${symbol ? ` ${symbol}` : ""}`;
  },
  formatBalance2(balance, symbol) {
    var _a;
    let formattedBalance = void 0;
    if (balance === "0") {
      formattedBalance = "0";
    } else if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        formattedBalance = (_a = number.toString().match(/^-?\d+(?:\.\d{0,3})?/u)) == null ? void 0 : _a[0];
      }
    }
    return {
      value: formattedBalance ?? "0",
      rest: formattedBalance === "0" ? "000" : "",
      symbol
    };
  },
  getApiUrl() {
    return ConstantsUtil.W3M_API_URL;
  },
  getBlockchainApiUrl() {
    return ConstantsUtil.BLOCKCHAIN_API_RPC_URL;
  },
  getAnalyticsUrl() {
    return ConstantsUtil.PULSE_API_URL;
  },
  getUUID() {
    if (crypto == null ? void 0 : crypto.randomUUID) {
      return crypto.randomUUID();
    }
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (c8) => {
      const r4 = Math.random() * 16 | 0;
      const v7 = c8 === "x" ? r4 : r4 & 3 | 8;
      return v7.toString(16);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  parseError(error) {
    var _a, _b;
    if (typeof error === "string") {
      return error;
    } else if (typeof ((_b = (_a = error == null ? void 0 : error.issues) == null ? void 0 : _a[0]) == null ? void 0 : _b.message) === "string") {
      return error.issues[0].message;
    } else if (error instanceof Error) {
      return error.message;
    }
    return "Unknown error";
  },
  sortRequestedNetworks(approvedIds, requestedNetworks = []) {
    const approvedIndexMap = {};
    if (requestedNetworks && approvedIds) {
      approvedIds.forEach((id, index2) => {
        approvedIndexMap[id] = index2;
      });
      requestedNetworks.sort((a4, b6) => {
        const indexA = approvedIndexMap[a4.id];
        const indexB = approvedIndexMap[b6.id];
        if (indexA !== void 0 && indexB !== void 0) {
          return indexA - indexB;
        } else if (indexA !== void 0) {
          return -1;
        } else if (indexB !== void 0) {
          return 1;
        }
        return 0;
      });
    }
    return requestedNetworks;
  },
  calculateBalance(array) {
    let sum = 0;
    for (const item of array) {
      sum += item.value ?? 0;
    }
    return sum;
  },
  formatTokenBalance(number) {
    const roundedNumber = number.toFixed(2);
    const [dollars, pennies] = roundedNumber.split(".");
    return { dollars, pennies };
  },
  isAddress(address, chain = "eip155") {
    switch (chain) {
      case "eip155":
        if (!/^(?:0x)?[0-9a-f]{40}$/iu.test(address)) {
          return false;
        } else if (/^(?:0x)?[0-9a-f]{40}$/iu.test(address) || /^(?:0x)?[0-9A-F]{40}$/iu.test(address)) {
          return true;
        }
        return false;
      case "solana":
        return /[1-9A-HJ-NP-Za-km-z]{32,44}$/iu.test(address);
      default:
        return false;
    }
  },
  uniqueBy(arr, key) {
    const set2 = /* @__PURE__ */ new Set();
    return arr.filter((item) => {
      const keyValue = item[key];
      if (set2.has(keyValue)) {
        return false;
      }
      set2.add(keyValue);
      return true;
    });
  },
  generateSdkVersion(adapters, platform, version4) {
    const hasNoAdapters = adapters.length === 0;
    const adapterNames = hasNoAdapters ? ConstantsUtil2.ADAPTER_TYPES.UNIVERSAL : adapters.map((adapter) => adapter.adapterType).join(",");
    return `${platform}-${adapterNames}-${version4}`;
  },
  // eslint-disable-next-line max-params
  createAccount(namespace, address, type, publicKey, path) {
    return {
      namespace,
      address,
      type,
      publicKey,
      path
    };
  },
  isCaipAddress(address) {
    if (typeof address !== "string") {
      return false;
    }
    const sections = address.split(":");
    const namespace = sections[0];
    return sections.filter(Boolean).length === 3 && namespace in ConstantsUtil.CHAIN_NAME_MAP;
  },
  isMac() {
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua.includes("macintosh") && !ua.includes("safari");
  },
  formatTelegramSocialLoginUrl(url) {
    const valueToInject = `--${encodeURIComponent(window == null ? void 0 : window.location.href)}`;
    const paramToInject = "state=";
    const parsedUrl = new URL(url);
    if (parsedUrl.host === "auth.magic.link") {
      const providerParam = "provider_authorization_url=";
      const providerUrl = url.substring(url.indexOf(providerParam) + providerParam.length);
      const resultUrl = this.injectIntoUrl(decodeURIComponent(providerUrl), paramToInject, valueToInject);
      return url.replace(providerUrl, encodeURIComponent(resultUrl));
    }
    return this.injectIntoUrl(url, paramToInject, valueToInject);
  },
  injectIntoUrl(url, key, appendString) {
    const keyIndex = url.indexOf(key);
    if (keyIndex === -1) {
      throw new Error(`${key} parameter not found in the URL: ${url}`);
    }
    const keyEndIndex = url.indexOf("&", keyIndex);
    const keyLength = key.length;
    const keyParamEnd = keyEndIndex !== -1 ? keyEndIndex : url.length;
    const beforeKeyValue = url.substring(0, keyIndex + keyLength);
    const currentKeyValue = url.substring(keyIndex + keyLength, keyParamEnd);
    const afterKeyValue = url.substring(keyEndIndex);
    const newKeyValue = currentKeyValue + appendString;
    const newUrl = beforeKeyValue + newKeyValue + afterKeyValue;
    return newUrl;
  }
};

// ../../node_modules/proxy-compare/dist/index.modern.js
var e = Symbol();
var t = Symbol();
var r = "a";
var n = "w";
var o = (e3, t2) => new Proxy(e3, t2);
var s = Object.getPrototypeOf;
var c = /* @__PURE__ */ new WeakMap();
var l = (e3) => e3 && (c.has(e3) ? c.get(e3) : s(e3) === Object.prototype || s(e3) === Array.prototype);
var f = (e3) => "object" == typeof e3 && null !== e3;
var i = (e3) => {
  if (Array.isArray(e3))
    return Array.from(e3);
  const t2 = Object.getOwnPropertyDescriptors(e3);
  return Object.values(t2).forEach((e4) => {
    e4.configurable = true;
  }), Object.create(s(e3), t2);
};
var u = (e3) => e3[t] || e3;
var a = (s4, c8, f9, p7) => {
  if (!l(s4))
    return s4;
  let g5 = p7 && p7.get(s4);
  if (!g5) {
    const e3 = u(s4);
    g5 = ((e4) => Object.values(Object.getOwnPropertyDescriptors(e4)).some((e5) => !e5.configurable && !e5.writable))(e3) ? [e3, i(e3)] : [e3], null == p7 || p7.set(s4, g5);
  }
  const [y7, h6] = g5;
  let w7 = f9 && f9.get(y7);
  return w7 && w7[1].f === !!h6 || (w7 = ((o7, s5) => {
    const c9 = { f: s5 };
    let l8 = false;
    const f10 = (e3, t2) => {
      if (!l8) {
        let s6 = c9[r].get(o7);
        if (s6 || (s6 = {}, c9[r].set(o7, s6)), e3 === n)
          s6[n] = true;
        else {
          let r4 = s6[e3];
          r4 || (r4 = /* @__PURE__ */ new Set(), s6[e3] = r4), r4.add(t2);
        }
      }
    }, i6 = { get: (e3, n6) => n6 === t ? o7 : (f10("k", n6), a(Reflect.get(e3, n6), c9[r], c9.c, c9.t)), has: (t2, n6) => n6 === e ? (l8 = true, c9[r].delete(o7), true) : (f10("h", n6), Reflect.has(t2, n6)), getOwnPropertyDescriptor: (e3, t2) => (f10("o", t2), Reflect.getOwnPropertyDescriptor(e3, t2)), ownKeys: (e3) => (f10(n), Reflect.ownKeys(e3)) };
    return s5 && (i6.set = i6.deleteProperty = () => false), [i6, c9];
  })(y7, !!h6), w7[1].p = o(h6 || y7, w7[0]), f9 && f9.set(y7, w7)), w7[1][r] = c8, w7[1].c = f9, w7[1].t = p7, w7[1].p;
};
var p = (e3, t2, r4, o7, s4 = Object.is) => {
  if (s4(e3, t2))
    return false;
  if (!f(e3) || !f(t2))
    return true;
  const c8 = r4.get(u(e3));
  if (!c8)
    return true;
  if (o7) {
    const r5 = o7.get(e3);
    if (r5 && r5.n === t2)
      return r5.g;
    o7.set(e3, { n: t2, g: false });
  }
  let l8 = null;
  try {
    for (const r5 of c8.h || [])
      if (l8 = Reflect.has(e3, r5) !== Reflect.has(t2, r5), l8)
        return l8;
    if (true === c8[n]) {
      if (l8 = ((e4, t3) => {
        const r5 = Reflect.ownKeys(e4), n6 = Reflect.ownKeys(t3);
        return r5.length !== n6.length || r5.some((e5, t4) => e5 !== n6[t4]);
      })(e3, t2), l8)
        return l8;
    } else
      for (const r5 of c8.o || [])
        if (l8 = !!Reflect.getOwnPropertyDescriptor(e3, r5) != !!Reflect.getOwnPropertyDescriptor(t2, r5), l8)
          return l8;
    for (const n6 of c8.k || [])
      if (l8 = p(e3[n6], t2[n6], r4, o7, s4), l8)
        return l8;
    return null === l8 && (l8 = true), l8;
  } finally {
    o7 && o7.set(e3, { n: t2, g: l8 });
  }
};
var y = (e3) => l(e3) && e3[t] || null;
var h = (e3, t2 = true) => {
  c.set(e3, t2);
};
var w = (e3, t2, r4) => {
  const o7 = [], s4 = /* @__PURE__ */ new WeakSet(), c8 = (e4, l8) => {
    if (s4.has(e4))
      return;
    f(e4) && s4.add(e4);
    const i6 = f(e4) && t2.get(u(e4));
    if (i6) {
      var a4, p7;
      if (null == (a4 = i6.h) || a4.forEach((e5) => {
        const t3 = `:has(${String(e5)})`;
        o7.push(l8 ? [...l8, t3] : [t3]);
      }), true === i6[n]) {
        const e5 = ":ownKeys";
        o7.push(l8 ? [...l8, e5] : [e5]);
      } else {
        var g5;
        null == (g5 = i6.o) || g5.forEach((e5) => {
          const t3 = `:hasOwn(${String(e5)})`;
          o7.push(l8 ? [...l8, t3] : [t3]);
        });
      }
      null == (p7 = i6.k) || p7.forEach((t3) => {
        r4 && !("value" in (Object.getOwnPropertyDescriptor(e4, t3) || {})) || c8(e4[t3], l8 ? [...l8, t3] : [t3]);
      });
    } else
      l8 && o7.push(l8);
  };
  return c8(e3), o7;
};

// ../../node_modules/valtio/esm/vanilla.mjs
var isObject = (x6) => typeof x6 === "object" && x6 !== null;
var proxyStateMap = /* @__PURE__ */ new WeakMap();
var refSet = /* @__PURE__ */ new WeakSet();
var buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x6) => isObject(x6) && !refSet.has(x6) && (Array.isArray(x6) || !(Symbol.iterator in x6)) && !(x6 instanceof WeakMap) && !(x6 instanceof WeakSet) && !(x6 instanceof Error) && !(x6 instanceof Number) && !(x6 instanceof Date) && !(x6 instanceof String) && !(x6 instanceof RegExp) && !(x6 instanceof ArrayBuffer), defaultHandlePromise = (promise) => {
  switch (promise.status) {
    case "fulfilled":
      return promise.value;
    case "rejected":
      throw promise.reason;
    default:
      throw promise;
  }
}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version4, handlePromise = defaultHandlePromise) => {
  const cache = snapCache.get(target);
  if ((cache == null ? void 0 : cache[0]) === version4) {
    return cache[1];
  }
  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
  h(snap, true);
  snapCache.set(target, [version4, snap]);
  Reflect.ownKeys(target).forEach((key) => {
    if (Object.getOwnPropertyDescriptor(snap, key)) {
      return;
    }
    const value = Reflect.get(target, key);
    const { enumerable } = Reflect.getOwnPropertyDescriptor(
      target,
      key
    );
    const desc = {
      value,
      enumerable,
      // This is intentional to avoid copying with proxy-compare.
      // It's still non-writable, so it avoids assigning a value.
      configurable: true
    };
    if (refSet.has(value)) {
      h(value, false);
    } else if (value instanceof Promise) {
      delete desc.value;
      desc.get = () => handlePromise(value);
    } else if (proxyStateMap.has(value)) {
      const [target2, ensureVersion] = proxyStateMap.get(
        value
      );
      desc.value = createSnapshot(
        target2,
        ensureVersion(),
        handlePromise
      );
    }
    Object.defineProperty(snap, key, desc);
  });
  return Object.preventExtensions(snap);
}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction = (initialObject) => {
  if (!isObject(initialObject)) {
    throw new Error("object required");
  }
  const found = proxyCache.get(initialObject);
  if (found) {
    return found;
  }
  let version4 = versionHolder[0];
  const listeners = /* @__PURE__ */ new Set();
  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
    if (version4 !== nextVersion) {
      version4 = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  let checkVersion = versionHolder[1];
  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
    if (checkVersion !== nextCheckVersion && !listeners.size) {
      checkVersion = nextCheckVersion;
      propProxyStates.forEach(([propProxyState]) => {
        const propVersion = propProxyState[1](nextCheckVersion);
        if (propVersion > version4) {
          version4 = propVersion;
        }
      });
    }
    return version4;
  };
  const createPropListener = (prop) => (op, nextVersion) => {
    const newOp = [...op];
    newOp[1] = [prop, ...newOp[1]];
    notifyUpdate(newOp, nextVersion);
  };
  const propProxyStates = /* @__PURE__ */ new Map();
  const addPropListener = (prop, propProxyState) => {
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && propProxyStates.has(prop)) {
      throw new Error("prop listener already exists");
    }
    if (listeners.size) {
      const remove = propProxyState[3](createPropListener(prop));
      propProxyStates.set(prop, [propProxyState, remove]);
    } else {
      propProxyStates.set(prop, [propProxyState]);
    }
  };
  const removePropListener = (prop) => {
    var _a;
    const entry = propProxyStates.get(prop);
    if (entry) {
      propProxyStates.delete(prop);
      (_a = entry[1]) == null ? void 0 : _a.call(entry);
    }
  };
  const addListener = (listener) => {
    listeners.add(listener);
    if (listeners.size === 1) {
      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && prevRemove) {
          throw new Error("remove already exists");
        }
        const remove = propProxyState[3](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove]);
      });
    }
    const removeListener = () => {
      listeners.delete(listener);
      if (listeners.size === 0) {
        propProxyStates.forEach(([propProxyState, remove], prop) => {
          if (remove) {
            remove();
            propProxyStates.set(prop, [propProxyState]);
          }
        });
      }
    };
    return removeListener;
  };
  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const handler = {
    deleteProperty(target, prop) {
      const prevValue = Reflect.get(target, prop);
      removePropListener(prop);
      const deleted = Reflect.deleteProperty(target, prop);
      if (deleted) {
        notifyUpdate(["delete", [prop], prevValue]);
      }
      return deleted;
    },
    set(target, prop, value, receiver) {
      const hasPrevValue = Reflect.has(target, prop);
      const prevValue = Reflect.get(target, prop, receiver);
      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {
        return true;
      }
      removePropListener(prop);
      if (isObject(value)) {
        value = y(value) || value;
      }
      let nextValue = value;
      if (value instanceof Promise) {
        value.then((v7) => {
          value.status = "fulfilled";
          value.value = v7;
          notifyUpdate(["resolve", [prop], v7]);
        }).catch((e3) => {
          value.status = "rejected";
          value.reason = e3;
          notifyUpdate(["reject", [prop], e3]);
        });
      } else {
        if (!proxyStateMap.has(value) && canProxy(value)) {
          nextValue = proxyFunction(value);
        }
        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);
        if (childProxyState) {
          addPropListener(prop, childProxyState);
        }
      }
      Reflect.set(target, prop, nextValue, receiver);
      notifyUpdate(["set", [prop], value, prevValue]);
      return true;
    }
  };
  const proxyObject = newProxy(baseObject, handler);
  proxyCache.set(initialObject, proxyObject);
  const proxyState = [
    baseObject,
    ensureVersion,
    createSnapshot,
    addListener
  ];
  proxyStateMap.set(proxyObject, proxyState);
  Reflect.ownKeys(initialObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(
      initialObject,
      key
    );
    if ("value" in desc) {
      proxyObject[key] = initialObject[key];
      delete desc.value;
      delete desc.writable;
    }
    Object.defineProperty(baseObject, key, desc);
  });
  return proxyObject;
}) => [
  // public functions
  proxyFunction,
  // shared state
  proxyStateMap,
  refSet,
  // internal things
  objectIs,
  newProxy,
  canProxy,
  defaultHandlePromise,
  snapCache,
  createSnapshot,
  proxyCache,
  versionHolder
];
var [defaultProxyFunction] = buildProxyFunction();
function proxy(initialObject = {}) {
  return defaultProxyFunction(initialObject);
}
function subscribe(proxyObject, callback, notifyInSync) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  let promise;
  const ops = [];
  const addListener = proxyState[3];
  let isListenerActive = false;
  const listener = (op) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    if (!promise) {
      promise = Promise.resolve().then(() => {
        promise = void 0;
        if (isListenerActive) {
          callback(ops.splice(0));
        }
      });
    }
  };
  const removeListener = addListener(listener);
  isListenerActive = true;
  return () => {
    isListenerActive = false;
    removeListener();
  };
}
function snapshot(proxyObject, handlePromise) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  const [target, ensureVersion, createSnapshot] = proxyState;
  return createSnapshot(target, ensureVersion(), handlePromise);
}
function ref(obj) {
  refSet.add(obj);
  return obj;
}

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js
async function fetchData(...args) {
  const response = await fetch(...args);
  if (!response.ok) {
    const err = new Error(`HTTP status code: ${response.status}`, {
      cause: response
    });
    throw err;
  }
  return response;
}
var FetchUtil = class {
  constructor({ baseUrl: baseUrl4, clientId }) {
    this.baseUrl = baseUrl4;
    this.clientId = clientId;
  }
  async get({ headers, signal, cache, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal, cache });
    return response.json();
  }
  async getBlob({ headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal });
    return response.blob();
  }
  async post({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "POST",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async put({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "PUT",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async delete({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "DELETE",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  createUrl({ path, params }) {
    const url = new URL(path, this.baseUrl);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value) {
          url.searchParams.append(key, value);
        }
      });
    }
    if (this.clientId) {
      url.searchParams.append("clientId", this.clientId);
    }
    return url;
  }
};

// ../../node_modules/valtio/esm/vanilla/utils.mjs
function subscribeKey(proxyObject, key, callback, notifyInSync) {
  let prevValue = proxyObject[key];
  return subscribe(
    proxyObject,
    () => {
      const nextValue = proxyObject[key];
      if (!Object.is(prevValue, nextValue)) {
        callback(prevValue = nextValue);
      }
    },
    notifyInSync
  );
}
var DEVTOOLS = Symbol();
function proxyMap(entries2) {
  const map = proxy({
    data: Array.from(entries2 || []),
    has(key) {
      return this.data.some((p7) => p7[0] === key);
    },
    set(key, value) {
      const record = this.data.find((p7) => p7[0] === key);
      if (record) {
        record[1] = value;
      } else {
        this.data.push([key, value]);
      }
      return this;
    },
    get(key) {
      var _a;
      return (_a = this.data.find((p7) => p7[0] === key)) == null ? void 0 : _a[1];
    },
    delete(key) {
      const index2 = this.data.findIndex((p7) => p7[0] === key);
      if (index2 === -1) {
        return false;
      }
      this.data.splice(index2, 1);
      return true;
    },
    clear() {
      this.data.splice(0);
    },
    get size() {
      return this.data.length;
    },
    toJSON() {
      return new Map(this.data);
    },
    forEach(cb) {
      this.data.forEach((p7) => {
        cb(p7[1], p7[0], this);
      });
    },
    keys() {
      return this.data.map((p7) => p7[0]).values();
    },
    values() {
      return this.data.map((p7) => p7[1]).values();
    },
    entries() {
      return new Map(this.data).entries();
    },
    get [Symbol.toStringTag]() {
      return "Map";
    },
    [Symbol.iterator]() {
      return this.entries();
    }
  });
  Object.defineProperties(map, {
    data: {
      enumerable: false
    },
    size: {
      enumerable: false
    },
    toJSON: {
      enumerable: false
    }
  });
  Object.seal(map);
  return map;
}

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js
var MobileWalletUtil = {
  /**
   * Handles mobile wallet redirection for wallets that have Universal Links.
   *
   * @param {Object} properties - The properties object.
   * @param {string} properties.name - The name of the wallet.
   */
  handleSolanaDeeplinkRedirect(name2) {
    if (ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA) {
      const href = window.location.href;
      const encodedHref = encodeURIComponent(href);
      if (name2 === "Phantom" && !("phantom" in window)) {
        const protocol = href.startsWith("https") ? "https" : "http";
        const host = href.split("/")[2];
        const encodedRef = encodeURIComponent(`${protocol}://${host}`);
        window.location.href = `https://phantom.app/ul/browse/${encodedHref}?ref=${encodedRef}`;
      }
      if (name2 === "Coinbase Wallet" && !("coinbaseSolana" in window)) {
        window.location.href = `https://go.cb-w.com/dapp?cb_url=${encodedHref}`;
      }
    }
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js
var state = proxy({
  walletImages: {},
  networkImages: {},
  chainImages: {},
  connectorImages: {},
  tokenImages: {},
  currencyImages: {}
});
var AssetController = {
  state,
  subscribeNetworkImages(callback) {
    return subscribe(state.networkImages, () => callback(state.networkImages));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  subscribe(callback) {
    return subscribe(state, () => callback(state));
  },
  setWalletImage(key, value) {
    state.walletImages[key] = value;
  },
  setNetworkImage(key, value) {
    state.networkImages[key] = value;
  },
  setChainImage(key, value) {
    state.chainImages[key] = value;
  },
  setConnectorImage(key, value) {
    state.connectorImages = { ...state.connectorImages, [key]: value };
  },
  setTokenImage(key, value) {
    state.tokenImages[key] = value;
  },
  setCurrencyImage(key, value) {
    state.currencyImages[key] = value;
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js
var namespaceImageIds = {
  // Ethereum
  eip155: "ba0ba0cd-17c6-4806-ad93-f9d174f17900",
  // Solana
  solana: "a1b58899-f671-4276-6a5e-56ca5bd59700",
  // Polkadot
  polkadot: "",
  // Bitcoin
  bip122: "0b4838db-0161-4ffe-022d-532bf03dba00"
};
var state2 = proxy({
  networkImagePromises: {}
});
var AssetUtil = {
  async fetchWalletImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    await ApiController._fetchWalletImage(imageId);
    return this.getWalletImageById(imageId);
  },
  async fetchNetworkImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    const existingImage = this.getNetworkImageById(imageId);
    if (existingImage) {
      return existingImage;
    }
    if (!state2.networkImagePromises[imageId]) {
      state2.networkImagePromises[imageId] = ApiController._fetchNetworkImage(imageId);
    }
    await state2.networkImagePromises[imageId];
    return this.getNetworkImageById(imageId);
  },
  getWalletImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.walletImages[imageId];
  },
  getWalletImage(wallet) {
    if (wallet == null ? void 0 : wallet.image_url) {
      return wallet == null ? void 0 : wallet.image_url;
    }
    if (wallet == null ? void 0 : wallet.image_id) {
      return AssetController.state.walletImages[wallet.image_id];
    }
    return void 0;
  },
  getNetworkImage(network) {
    var _a, _b, _c;
    if ((_a = network == null ? void 0 : network.assets) == null ? void 0 : _a.imageUrl) {
      return (_b = network == null ? void 0 : network.assets) == null ? void 0 : _b.imageUrl;
    }
    if ((_c = network == null ? void 0 : network.assets) == null ? void 0 : _c.imageId) {
      return AssetController.state.networkImages[network.assets.imageId];
    }
    return void 0;
  },
  getNetworkImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.networkImages[imageId];
  },
  getConnectorImage(connector) {
    if (connector == null ? void 0 : connector.imageUrl) {
      return connector.imageUrl;
    }
    if (connector == null ? void 0 : connector.imageId) {
      return AssetController.state.connectorImages[connector.imageId];
    }
    return void 0;
  },
  getChainImage(chain) {
    return AssetController.state.networkImages[namespaceImageIds[chain]];
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/OptionsUtil.js
var OptionsUtil = {
  getFeatureValue(key, features) {
    const optionValue = features == null ? void 0 : features[key];
    if (optionValue === void 0) {
      return ConstantsUtil2.DEFAULT_FEATURES[key];
    }
    return optionValue;
  },
  filterSocialsByPlatform(socials) {
    if (!socials || !socials.length) {
      return socials;
    }
    if (CoreHelperUtil.isTelegram()) {
      if (CoreHelperUtil.isIos()) {
        return socials.filter((s4) => s4 !== "google");
      }
      if (CoreHelperUtil.isMac()) {
        return socials.filter((s4) => s4 !== "x");
      }
      if (CoreHelperUtil.isAndroid()) {
        return socials.filter((s4) => !["facebook", "x"].includes(s4));
      }
    }
    return socials;
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js
var state3 = proxy({
  features: ConstantsUtil2.DEFAULT_FEATURES,
  projectId: "",
  sdkType: "appkit",
  sdkVersion: "html-wagmi-undefined",
  defaultAccountTypes: ConstantsUtil2.DEFAULT_ACCOUNT_TYPES
});
var OptionsController = {
  state: state3,
  subscribeKey(key, callback) {
    return subscribeKey(state3, key, callback);
  },
  setOptions(options) {
    Object.assign(state3, options);
  },
  setFeatures(features) {
    if (!features) {
      return;
    }
    if (!state3.features) {
      state3.features = ConstantsUtil2.DEFAULT_FEATURES;
    }
    const newFeatures = { ...state3.features, ...features };
    state3.features = newFeatures;
    if (state3.features.socials) {
      state3.features.socials = OptionsUtil.filterSocialsByPlatform(state3.features.socials);
    }
  },
  setProjectId(projectId) {
    state3.projectId = projectId;
  },
  setCustomRpcUrls(customRpcUrls) {
    state3.customRpcUrls = customRpcUrls;
  },
  setAllWallets(allWallets) {
    state3.allWallets = allWallets;
  },
  setIncludeWalletIds(includeWalletIds) {
    state3.includeWalletIds = includeWalletIds;
  },
  setExcludeWalletIds(excludeWalletIds) {
    state3.excludeWalletIds = excludeWalletIds;
  },
  setFeaturedWalletIds(featuredWalletIds) {
    state3.featuredWalletIds = featuredWalletIds;
  },
  setTokens(tokens) {
    state3.tokens = tokens;
  },
  setTermsConditionsUrl(termsConditionsUrl) {
    state3.termsConditionsUrl = termsConditionsUrl;
  },
  setPrivacyPolicyUrl(privacyPolicyUrl) {
    state3.privacyPolicyUrl = privacyPolicyUrl;
  },
  setCustomWallets(customWallets) {
    state3.customWallets = customWallets;
  },
  setIsSiweEnabled(isSiweEnabled) {
    state3.isSiweEnabled = isSiweEnabled;
  },
  setIsUniversalProvider(isUniversalProvider) {
    state3.isUniversalProvider = isUniversalProvider;
  },
  setSdkVersion(sdkVersion) {
    state3.sdkVersion = sdkVersion;
  },
  setMetadata(metadata) {
    state3.metadata = metadata;
  },
  setDisableAppend(disableAppend) {
    state3.disableAppend = disableAppend;
  },
  setEIP6963Enabled(enableEIP6963) {
    state3.enableEIP6963 = enableEIP6963;
  },
  setDebug(debug) {
    state3.debug = debug;
  },
  setEnableWalletConnect(enableWalletConnect) {
    state3.enableWalletConnect = enableWalletConnect;
  },
  setEnableWalletGuide(enableWalletGuide) {
    state3.enableWalletGuide = enableWalletGuide;
  },
  setEnableAuthLogger(enableAuthLogger) {
    state3.enableAuthLogger = enableAuthLogger;
  },
  setEnableWallets(enableWallets) {
    state3.enableWallets = enableWallets;
  },
  setHasMultipleAddresses(hasMultipleAddresses) {
    state3.hasMultipleAddresses = hasMultipleAddresses;
  },
  setSIWX(siwx) {
    state3.siwx = siwx;
  },
  setConnectMethodsOrder(connectMethodsOrder) {
    state3.features = {
      ...state3.features,
      connectMethodsOrder
    };
  },
  setWalletFeaturesOrder(walletFeaturesOrder) {
    state3.features = {
      ...state3.features,
      walletFeaturesOrder
    };
  },
  setSocialsOrder(socialsOrder) {
    state3.features = {
      ...state3.features,
      socials: socialsOrder
    };
  },
  setCollapseWallets(collapseWallets) {
    state3.features = {
      ...state3.features,
      collapseWallets
    };
  },
  setEnableEmbedded(enableEmbedded) {
    state3.enableEmbedded = enableEmbedded;
  },
  setAllowUnsupportedChain(allowUnsupportedChain) {
    state3.allowUnsupportedChain = allowUnsupportedChain;
  },
  setManualWCControl(manualWCControl) {
    state3.manualWCControl = manualWCControl;
  },
  setDefaultAccountTypes(defaultAccountType = {}) {
    Object.entries(defaultAccountType).forEach(([namespace, accountType]) => {
      if (accountType) {
        state3.defaultAccountTypes[namespace] = accountType;
      }
    });
  },
  getSnapshot() {
    return snapshot(state3);
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js
var state4 = proxy({
  message: "",
  variant: "info",
  open: false
});
var AlertController = {
  state: state4,
  subscribeKey(key, callback) {
    return subscribeKey(state4, key, callback);
  },
  open(message, variant) {
    const { debug } = OptionsController.state;
    const { shortMessage, longMessage } = message;
    if (debug) {
      state4.message = shortMessage;
      state4.variant = variant;
      state4.open = true;
    }
    if (longMessage) {
      console.error(typeof longMessage === "function" ? longMessage() : longMessage);
    }
  },
  close() {
    state4.open = false;
    state4.message = "";
    state4.variant = "info";
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js
var baseUrl = CoreHelperUtil.getAnalyticsUrl();
var api = new FetchUtil({ baseUrl, clientId: null });
var excluded = ["MODAL_CREATED"];
var state5 = proxy({
  timestamp: Date.now(),
  reportedErrors: {},
  data: {
    type: "track",
    event: "MODAL_CREATED"
  }
});
var EventsController = {
  state: state5,
  subscribe(callback) {
    return subscribe(state5, () => callback(state5));
  },
  getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType,
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  async _sendAnalyticsEvent(payload) {
    try {
      const address = AccountController.state.address;
      if (excluded.includes(payload.data.event) || typeof window === "undefined") {
        return;
      }
      await api.post({
        path: "/e",
        params: EventsController.getSdkProperties(),
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: payload.timestamp,
          props: { ...payload.data, address }
        }
      });
      state5.reportedErrors["FORBIDDEN"] = false;
    } catch (err) {
      const isForbiddenError = err instanceof Error && err.cause instanceof Response && err.cause.status === ConstantsUtil.HTTP_STATUS_CODES.FORBIDDEN && !state5.reportedErrors["FORBIDDEN"];
      if (isForbiddenError) {
        AlertController.open({
          shortMessage: "Invalid App Configuration",
          longMessage: `Origin ${isSafe() ? window.origin : "uknown"} not found on Allowlist - update configuration on cloud.reown.com`
        }, "error");
        state5.reportedErrors["FORBIDDEN"] = true;
      }
    }
  },
  sendEvent(data) {
    var _a;
    state5.timestamp = Date.now();
    state5.data = data;
    if ((_a = OptionsController.state.features) == null ? void 0 : _a.analytics) {
      EventsController._sendAnalyticsEvent(state5);
    }
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js
var baseUrl2 = CoreHelperUtil.getApiUrl();
var api2 = new FetchUtil({ baseUrl: baseUrl2, clientId: null });
var entries = "40";
var recommendedEntries = "4";
var imageCountToFetch = 20;
var state6 = proxy({
  promises: {},
  page: 1,
  count: 0,
  featured: [],
  allFeatured: [],
  recommended: [],
  allRecommended: [],
  wallets: [],
  search: [],
  isAnalyticsEnabled: false,
  excludedRDNS: [],
  isFetchingRecommendedWallets: false
});
var ApiController = {
  state: state6,
  subscribeKey(key, callback) {
    return subscribeKey(state6, key, callback);
  },
  _getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType || "appkit",
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  _filterOutExtensions(wallets) {
    if (OptionsController.state.isUniversalProvider) {
      return wallets.filter((w7) => Boolean(w7.mobile_link || w7.desktop_link || w7.webapp_link));
    }
    return wallets;
  },
  async _fetchWalletImage(imageId) {
    const imageUrl = `${api2.baseUrl}/getWalletImage/${imageId}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setWalletImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchNetworkImage(imageId) {
    const imageUrl = `${api2.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setNetworkImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchConnectorImage(imageId) {
    const imageUrl = `${api2.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setConnectorImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchCurrencyImage(countryCode) {
    const imageUrl = `${api2.baseUrl}/public/getCurrencyImage/${countryCode}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setCurrencyImage(countryCode, URL.createObjectURL(blob));
  },
  async _fetchTokenImage(symbol) {
    const imageUrl = `${api2.baseUrl}/public/getTokenImage/${symbol}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setTokenImage(symbol, URL.createObjectURL(blob));
  },
  async fetchNetworkImages() {
    const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const ids = requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.map(({ assets }) => assets == null ? void 0 : assets.imageId).filter(Boolean).filter((imageId) => !AssetUtil.getNetworkImageById(imageId));
    if (ids) {
      await Promise.allSettled(ids.map((id) => ApiController._fetchNetworkImage(id)));
    }
  },
  async fetchConnectorImages() {
    const { connectors } = ConnectorController.state;
    const ids = connectors.map(({ imageId }) => imageId).filter(Boolean);
    await Promise.allSettled(ids.map((id) => ApiController._fetchConnectorImage(id)));
  },
  async fetchCurrencyImages(currencies = []) {
    await Promise.allSettled(currencies.map((currency) => ApiController._fetchCurrencyImage(currency)));
  },
  async fetchTokenImages(tokens = []) {
    await Promise.allSettled(tokens.map((token) => ApiController._fetchTokenImage(token)));
  },
  async fetchFeaturedWallets() {
    const { featuredWalletIds } = OptionsController.state;
    if (featuredWalletIds == null ? void 0 : featuredWalletIds.length) {
      const { data } = await api2.get({
        path: "/getWallets",
        params: {
          ...ApiController._getSdkProperties(),
          page: "1",
          entries: (featuredWalletIds == null ? void 0 : featuredWalletIds.length) ? String(featuredWalletIds.length) : recommendedEntries,
          include: featuredWalletIds == null ? void 0 : featuredWalletIds.join(",")
        }
      });
      data.sort((a4, b6) => featuredWalletIds.indexOf(a4.id) - featuredWalletIds.indexOf(b6.id));
      const images = data.map((d6) => d6.image_id).filter(Boolean);
      await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
      state6.featured = data;
      state6.allFeatured = data;
    }
  },
  async fetchRecommendedWallets() {
    try {
      state6.isFetchingRecommendedWallets = true;
      const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
      const exclude = [...excludeWalletIds ?? [], ...featuredWalletIds ?? []].filter(Boolean);
      const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
      const { data, count } = await api2.get({
        path: "/getWallets",
        params: {
          ...ApiController._getSdkProperties(),
          page: "1",
          chains: caipNetworkIds,
          entries: recommendedEntries,
          include: includeWalletIds == null ? void 0 : includeWalletIds.join(","),
          exclude: exclude == null ? void 0 : exclude.join(",")
        }
      });
      const recent = StorageUtil.getRecentWallets();
      const recommendedImages = data.map((d6) => d6.image_id).filter(Boolean);
      const recentImages = recent.map((r4) => r4.image_id).filter(Boolean);
      await Promise.allSettled([...recommendedImages, ...recentImages].map((id) => ApiController._fetchWalletImage(id)));
      state6.recommended = data;
      state6.allRecommended = data;
      state6.count = count ?? 0;
    } catch {
    } finally {
      state6.isFetchingRecommendedWallets = false;
    }
  },
  async fetchWallets({ page }) {
    const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    const exclude = [
      ...state6.recommended.map(({ id }) => id),
      ...excludeWalletIds ?? [],
      ...featuredWalletIds ?? []
    ].filter(Boolean);
    const { data, count } = await api2.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        page: String(page),
        entries,
        chains: caipNetworkIds,
        include: includeWalletIds == null ? void 0 : includeWalletIds.join(","),
        exclude: exclude.join(",")
      }
    });
    const images = data.slice(0, imageCountToFetch).map((w7) => w7.image_id).filter(Boolean);
    await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
    state6.wallets = CoreHelperUtil.uniqueBy([...state6.wallets, ...ApiController._filterOutExtensions(data)], "id");
    state6.count = count > state6.count ? count : state6.count;
    state6.page = page;
  },
  async initializeExcludedWalletRdns({ ids }) {
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    const { data } = await api2.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        page: "1",
        entries: String(ids.length),
        chains: caipNetworkIds,
        include: ids == null ? void 0 : ids.join(",")
      }
    });
    if (data) {
      data.forEach((wallet) => {
        if (wallet == null ? void 0 : wallet.rdns) {
          state6.excludedRDNS.push(wallet.rdns);
        }
      });
    }
  },
  async searchWallet({ search, badge }) {
    const { includeWalletIds, excludeWalletIds } = OptionsController.state;
    state6.search = [];
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    const { data } = await api2.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        page: "1",
        entries: "100",
        search: search == null ? void 0 : search.trim(),
        badge_type: badge,
        chains: caipNetworkIds,
        include: includeWalletIds == null ? void 0 : includeWalletIds.join(","),
        exclude: excludeWalletIds == null ? void 0 : excludeWalletIds.join(",")
      }
    });
    EventsController.sendEvent({
      type: "track",
      event: "SEARCH_WALLET",
      properties: { badge: badge ?? "", search: search ?? "" }
    });
    const images = data.map((w7) => w7.image_id).filter(Boolean);
    await Promise.allSettled([
      ...images.map((id) => ApiController._fetchWalletImage(id)),
      CoreHelperUtil.wait(300)
    ]);
    state6.search = ApiController._filterOutExtensions(data);
  },
  initPromise(key, fetchFn) {
    const existingPromise = state6.promises[key];
    if (existingPromise) {
      return existingPromise;
    }
    return state6.promises[key] = fetchFn();
  },
  prefetch({ fetchConnectorImages = true, fetchFeaturedWallets = true, fetchRecommendedWallets = true, fetchNetworkImages = true } = {}) {
    const promises = [
      fetchConnectorImages && ApiController.initPromise("connectorImages", ApiController.fetchConnectorImages),
      fetchFeaturedWallets && ApiController.initPromise("featuredWallets", ApiController.fetchFeaturedWallets),
      fetchRecommendedWallets && ApiController.initPromise("recommendedWallets", ApiController.fetchRecommendedWallets),
      fetchNetworkImages && ApiController.initPromise("networkImages", ApiController.fetchNetworkImages)
    ].filter(Boolean);
    return Promise.allSettled(promises);
  },
  prefetchAnalyticsConfig() {
    var _a;
    if ((_a = OptionsController.state.features) == null ? void 0 : _a.analytics) {
      ApiController.fetchAnalyticsConfig();
    }
  },
  async fetchAnalyticsConfig() {
    try {
      const { isAnalyticsEnabled } = await api2.get({
        path: "/getAnalyticsConfig",
        params: ApiController._getSdkProperties()
      });
      OptionsController.setFeatures({ analytics: isAnalyticsEnabled });
    } catch (error) {
      OptionsController.setFeatures({ analytics: false });
    }
  },
  setFilterByNamespace(namespace) {
    if (!namespace) {
      state6.featured = state6.allFeatured;
      state6.recommended = state6.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state6.featured = state6.allFeatured.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
    state6.recommended = state6.allRecommended.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
  }
};

// ../../node_modules/@walletconnect/core/dist/index.es.js
var import_events7 = __toESM(require_events());

// ../../node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs());

// ../../node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// ../../node_modules/@walletconnect/heartbeat/dist/index.es.js
var n2 = class extends IEvents {
  constructor(e3) {
    super();
  }
};
var s2 = import_time.FIVE_SECONDS;
var r2 = { pulse: "heartbeat_pulse" };
var i3 = class _i2 extends n2 {
  constructor(e3) {
    super(e3), this.events = new import_events.EventEmitter(), this.interval = s2, this.interval = (e3 == null ? void 0 : e3.interval) || s2;
  }
  static async init(e3) {
    const t2 = new _i2(e3);
    return await t2.init(), t2;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r2.pulse);
  }
};

// ../../node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  const _value = value.trim();
  if (
    // eslint-disable-next-line unicorn/prefer-at
    value[0] === '"' && value.endsWith('"') && !value.includes("\\")
  ) {
    return _value.slice(1, -1);
  }
  if (_value.length <= 9) {
    const _lval = _value.toLowerCase();
    if (_lval === "true") {
      return true;
    }
    if (_lval === "false") {
      return false;
    }
    if (_lval === "undefined") {
      return void 0;
    }
    if (_lval === "null") {
      return null;
    }
    if (_lval === "nan") {
      return Number.NaN;
    }
    if (_lval === "infinity") {
      return Number.POSITIVE_INFINITY;
    }
    if (_lval === "-infinity") {
      return Number.NEGATIVE_INFINITY;
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// ../../node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify3(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify3(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c8) => c8.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
  var _a;
  if (!key) {
    return "";
  }
  return ((_a = key.split("?")[0]) == null ? void 0 : _a.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}
function filterKeyByDepth(key, depth) {
  if (depth === void 0) {
    return true;
  }
  let substrCount = 0;
  let index2 = key.indexOf(":");
  while (index2 > -1) {
    substrCount++;
    index2 = key.indexOf(":", index2 + 1);
  }
  return substrCount <= depth;
}
function filterKeyByBase(key, base3) {
  if (base3) {
    return key.startsWith(base3) && key[key.length - 1] !== "$";
  }
  return key[key.length - 1] !== "$";
}

// ../../node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r4) => r4.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r4) => r4.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify3(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify3(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify3(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      var _a;
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      let allMountsSupportMaxDepth = true;
      for (const mount of mounts) {
        if (!((_a = mount.driver.flags) == null ? void 0 : _a.maxDepth)) {
          allMountsSupportMaxDepth = false;
        }
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p7) => fullKey.startsWith(p7))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p7) => !p7.startsWith(mount.mountpoint))
        ];
      }
      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
      return allKeys.filter(
        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base3)
      );
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m4) => {
          if (m4.driver.clear) {
            return asyncCall(m4.driver.clear, m4.relativeBase, opts);
          }
          if (m4.driver.removeItem) {
            const keys2 = await m4.driver.getKeys(m4.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m4.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a4, b6) => b6.length - a4.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      var _a, _b;
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        (_b = (_a = context.unwatch)[base3]) == null ? void 0 : _b.call(_a);
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m4 = getMount(key);
      return {
        driver: m4.driver,
        base: m4.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m4) => ({
        driver: m4.driver,
        base: m4.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// ../../node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  const request = indexedDB.open(dbName);
  request.onupgradeneeded = () => request.result.createObjectStore(storeName);
  const dbp = promisifyRequest(request);
  return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// ../../node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_4, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_4, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// ../../node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i6 = {}) => {
  const t2 = i6.base && i6.base.length > 0 ? `${i6.base}:` : "", e3 = (s4) => t2 + s4;
  let n6;
  return i6.dbName && i6.storeName && (n6 = createStore(i6.dbName, i6.storeName)), { name: x, options: i6, async hasItem(s4) {
    return !(typeof await get(e3(s4), n6) > "u");
  }, async getItem(s4) {
    return await get(e3(s4), n6) ?? null;
  }, setItem(s4, a4) {
    return set(e3(s4), a4, n6);
  }, removeItem(s4) {
    return del(e3(s4), n6);
  }, getKeys() {
    return keys(n6);
  }, clear() {
    return clear(n6);
  } };
};
var D = "WALLET_CONNECT_V2_INDEXED_DB";
var E = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D, storeName: E }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t2) => [t2.key, t2.value]);
  }
  async getItem(t2) {
    const e3 = await this.indexedDb.getItem(t2);
    if (e3 !== null)
      return e3;
  }
  async setItem(t2, e3) {
    await this.indexedDb.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    await this.indexedDb.removeItem(t2);
  }
};
var l3 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : {};
var c2 = { exports: {} };
(function() {
  let i6;
  function t2() {
  }
  i6 = t2, i6.prototype.getItem = function(e3) {
    return this.hasOwnProperty(e3) ? String(this[e3]) : null;
  }, i6.prototype.setItem = function(e3, n6) {
    this[e3] = String(n6);
  }, i6.prototype.removeItem = function(e3) {
    delete this[e3];
  }, i6.prototype.clear = function() {
    const e3 = this;
    Object.keys(e3).forEach(function(n6) {
      e3[n6] = void 0, delete e3[n6];
    });
  }, i6.prototype.key = function(e3) {
    return e3 = e3 || 0, Object.keys(this)[e3];
  }, i6.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l3 < "u" && l3.localStorage ? c2.exports = l3.localStorage : typeof window < "u" && window.localStorage ? c2.exports = window.localStorage : c2.exports = new t2();
})();
function k(i6) {
  var t2;
  return [i6[0], safeJsonParse((t2 = i6[1]) != null ? t2 : "")];
}
var K = class {
  constructor() {
    this.localStorage = c2.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k);
  }
  async getItem(t2) {
    const e3 = this.localStorage.getItem(t2);
    if (e3 !== null)
      return safeJsonParse(e3);
  }
  async setItem(t2, e3) {
    this.localStorage.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    this.localStorage.removeItem(t2);
  }
};
var N = "wc_storage_version";
var y2 = 1;
var O = async (i6, t2, e3) => {
  const n6 = N, s4 = await t2.getItem(n6);
  if (s4 && s4 >= y2) {
    e3(t2);
    return;
  }
  const a4 = await i6.getKeys();
  if (!a4.length) {
    e3(t2);
    return;
  }
  const m4 = [];
  for (; a4.length; ) {
    const r4 = a4.shift();
    if (!r4)
      continue;
    const o7 = r4.toLowerCase();
    if (o7.includes("wc@") || o7.includes("walletconnect") || o7.includes("wc_") || o7.includes("wallet_connect")) {
      const f9 = await i6.getItem(r4);
      await t2.setItem(r4, f9), m4.push(r4);
    }
  }
  await t2.setItem(n6, y2), e3(t2), j(i6, m4);
};
var j = async (i6, t2) => {
  t2.length && t2.forEach(async (e3) => {
    await i6.removeItem(e3);
  });
};
var h2 = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e3) => {
      this.storage = e3, this.initialized = true;
    };
    const t2 = new K();
    this.storage = t2;
    try {
      const e3 = new _();
      O(t2, e3, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t2) {
    return await this.initialize(), this.storage.getItem(t2);
  }
  async setItem(t2, e3) {
    return await this.initialize(), this.storage.setItem(t2, e3);
  }
  async removeItem(t2) {
    return await this.initialize(), this.storage.removeItem(t2);
  }
  async initialize() {
    this.initialized || await new Promise((t2) => {
      const e3 = setInterval(() => {
        this.initialized && (clearInterval(e3), t2());
      }, 20);
    });
  }
};

// ../../node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser());
var import_pino2 = __toESM(require_browser());
var c3 = { level: "info" };
var n3 = "custom_context";
var l4 = 1e3 * 1024;
var O2 = class {
  constructor(e3) {
    this.nodeValue = e3, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d = class {
  constructor(e3) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e3, this.sizeInBytes = 0;
  }
  append(e3) {
    const t2 = new O2(e3);
    if (t2.size > this.maxSizeInBytes)
      throw new Error(`[LinkedList] Value too big to insert into list: ${e3} with size ${t2.size}`);
    for (; this.size + t2.size > this.maxSizeInBytes; )
      this.shift();
    this.head ? (this.tail && (this.tail.next = t2), this.tail = t2) : (this.head = t2, this.tail = t2), this.lengthInNodes++, this.sizeInBytes += t2.size;
  }
  shift() {
    if (!this.head)
      return;
    const e3 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e3.size;
  }
  toArray() {
    const e3 = [];
    let t2 = this.head;
    for (; t2 !== null; )
      e3.push(t2.value), t2 = t2.next;
    return e3;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e3 = this.head;
    return { next: () => {
      if (!e3)
        return { done: true, value: null };
      const t2 = e3.value;
      return e3 = e3.next, { done: false, value: t2 };
    } };
  }
};
var L = class {
  constructor(e3, t2 = l4) {
    this.level = e3 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t2, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e3, t2) {
    t2 === import_pino.levels.values.error ? console.error(e3) : t2 === import_pino.levels.values.warn ? console.warn(e3) : t2 === import_pino.levels.values.debug ? console.debug(e3) : t2 === import_pino.levels.values.trace ? console.trace(e3) : console.log(e3);
  }
  appendToLogs(e3) {
    this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e3 }));
    const t2 = typeof e3 == "string" ? JSON.parse(e3).level : e3.level;
    t2 >= this.levelValue && this.forwardToConsole(e3, t2);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e3) {
    const t2 = this.getLogArray();
    return t2.push(safeJsonStringify({ extraMetadata: e3 })), new Blob(t2, { type: "application/json" });
  }
};
var m = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
  downloadLogsBlobInBrowser(e3) {
    const t2 = URL.createObjectURL(this.logsToBlob(e3)), o7 = document.createElement("a");
    o7.href = t2, o7.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o7), o7.click(), document.body.removeChild(o7), URL.revokeObjectURL(t2);
  }
};
var B = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
};
var x2 = Object.defineProperty;
var S = Object.defineProperties;
var _2 = Object.getOwnPropertyDescriptors;
var p2 = Object.getOwnPropertySymbols;
var T = Object.prototype.hasOwnProperty;
var z2 = Object.prototype.propertyIsEnumerable;
var f3 = (r4, e3, t2) => e3 in r4 ? x2(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var i4 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    T.call(e3, t2) && f3(r4, t2, e3[t2]);
  if (p2)
    for (var t2 of p2(e3))
      z2.call(e3, t2) && f3(r4, t2, e3[t2]);
  return r4;
};
var g = (r4, e3) => S(r4, _2(e3));
function k2(r4) {
  return g(i4({}, r4), { level: (r4 == null ? void 0 : r4.level) || c3.level });
}
function v(r4, e3 = n3) {
  return r4[e3] || "";
}
function b(r4, e3, t2 = n3) {
  return r4[t2] = e3, r4;
}
function y3(r4, e3 = n3) {
  let t2 = "";
  return typeof r4.bindings > "u" ? t2 = v(r4, e3) : t2 = r4.bindings().context || "", t2;
}
function w2(r4, e3, t2 = n3) {
  const o7 = y3(r4, t2);
  return o7.trim() ? `${o7}/${e3}` : e3;
}
function E2(r4, e3, t2 = n3) {
  const o7 = w2(r4, e3, t2), a4 = r4.child({ context: o7 });
  return b(a4, o7, t2);
}
function C(r4) {
  var e3, t2;
  const o7 = new m((e3 = r4.opts) == null ? void 0 : e3.level, r4.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i4({}, r4.opts), { level: "trace", browser: g(i4({}, (t2 = r4.opts) == null ? void 0 : t2.browser), { write: (a4) => o7.write(a4) }) })), chunkLoggerController: o7 };
}
function I(r4) {
  var e3;
  const t2 = new B((e3 = r4.opts) == null ? void 0 : e3.level, r4.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i4({}, r4.opts), { level: "trace" }), t2), chunkLoggerController: t2 };
}
function A(r4) {
  return typeof r4.loggerOverride < "u" && typeof r4.loggerOverride != "string" ? { logger: r4.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C(r4) : I(r4);
}

// ../../node_modules/@walletconnect/types/dist/index.es.js
var import_events4 = __toESM(require_events());
var a3 = Object.defineProperty;
var u3 = (e3, s4, r4) => s4 in e3 ? a3(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var c4 = (e3, s4, r4) => u3(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var h4 = class extends IEvents {
  constructor(s4) {
    super(), this.opts = s4, c4(this, "protocol", "wc"), c4(this, "version", 2);
  }
};
var p3 = Object.defineProperty;
var b2 = (e3, s4, r4) => s4 in e3 ? p3(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var v2 = (e3, s4, r4) => b2(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var I2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.core = s4, this.logger = r4, v2(this, "records", /* @__PURE__ */ new Map());
  }
};
var y4 = class {
  constructor(s4, r4) {
    this.logger = s4, this.core = r4;
  }
};
var m2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.relayer = s4, this.logger = r4;
  }
};
var d2 = class extends IEvents {
  constructor(s4) {
    super();
  }
};
var f4 = class {
  constructor(s4, r4, t2, q2) {
    this.core = s4, this.logger = r4, this.name = t2;
  }
};
var P2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.relayer = s4, this.logger = r4;
  }
};
var S2 = class extends IEvents {
  constructor(s4, r4) {
    super(), this.core = s4, this.logger = r4;
  }
};
var M = class {
  constructor(s4, r4, t2) {
    this.core = s4, this.logger = r4, this.store = t2;
  }
};
var O3 = class {
  constructor(s4, r4) {
    this.projectId = s4, this.logger = r4;
  }
};
var R = class {
  constructor(s4, r4, t2) {
    this.core = s4, this.logger = r4, this.telemetryEnabled = t2;
  }
};
var T2 = Object.defineProperty;
var k3 = (e3, s4, r4) => s4 in e3 ? T2(e3, s4, { enumerable: true, configurable: true, writable: true, value: r4 }) : e3[s4] = r4;
var i5 = (e3, s4, r4) => k3(e3, typeof s4 != "symbol" ? s4 + "" : s4, r4);
var J = class {
  constructor(s4) {
    this.opts = s4, i5(this, "protocol", "wc"), i5(this, "version", 2);
  }
};
var V = class {
  constructor(s4) {
    this.client = s4;
  }
};

// ../../node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs());

// ../../node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time2 = __toESM(require_cjs());
function En(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function fe(t2, ...e3) {
  if (!En(t2))
    throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length))
    throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function De(t2, e3 = true) {
  if (t2.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished)
    throw new Error("Hash#digest() has already been called");
}
function gn(t2, e3) {
  fe(t2);
  const n6 = e3.outputLen;
  if (t2.length < n6)
    throw new Error("digestInto() expects output buffer of length at least " + n6);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t2) => new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
function yn(t2) {
  if (typeof t2 != "string")
    throw new Error("utf8ToBytes expected string, got " + typeof t2);
  return new Uint8Array(new TextEncoder().encode(t2));
}
function de(t2) {
  return typeof t2 == "string" && (t2 = yn(t2)), fe(t2), t2;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t2) {
  const e3 = (r4) => t2().update(de(r4)).digest(), n6 = t2();
  return e3.outputLen = n6.outputLen, e3.blockLen = n6.blockLen, e3.create = () => t2(), e3;
}
function he(t2 = 32) {
  if (it && typeof it.getRandomValues == "function")
    return it.getRandomValues(new Uint8Array(t2));
  if (it && typeof it.randomBytes == "function")
    return it.randomBytes(t2);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t2, e3, n6, r4) {
  if (typeof t2.setBigUint64 == "function")
    return t2.setBigUint64(e3, n6, r4);
  const o7 = BigInt(32), s4 = BigInt(4294967295), a4 = Number(n6 >> o7 & s4), u5 = Number(n6 & s4), i6 = r4 ? 4 : 0, D3 = r4 ? 0 : 4;
  t2.setUint32(e3 + i6, a4, r4), t2.setUint32(e3 + D3, u5, r4);
}
var An = class extends xn {
  constructor(e3, n6, r4, o7) {
    super(), this.blockLen = e3, this.outputLen = n6, this.padOffset = r4, this.isLE = o7, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e3), this.view = _t(this.buffer);
  }
  update(e3) {
    De(this);
    const { view: n6, buffer: r4, blockLen: o7 } = this;
    e3 = de(e3);
    const s4 = e3.length;
    for (let a4 = 0; a4 < s4; ) {
      const u5 = Math.min(o7 - this.pos, s4 - a4);
      if (u5 === o7) {
        const i6 = _t(e3);
        for (; o7 <= s4 - a4; a4 += o7)
          this.process(i6, a4);
        continue;
      }
      r4.set(e3.subarray(a4, a4 + u5), this.pos), this.pos += u5, a4 += u5, this.pos === o7 && (this.process(n6, 0), this.pos = 0);
    }
    return this.length += e3.length, this.roundClean(), this;
  }
  digestInto(e3) {
    De(this), gn(e3, this), this.finished = true;
    const { buffer: n6, view: r4, blockLen: o7, isLE: s4 } = this;
    let { pos: a4 } = this;
    n6[a4++] = 128, this.buffer.subarray(a4).fill(0), this.padOffset > o7 - a4 && (this.process(r4, 0), a4 = 0);
    for (let l8 = a4; l8 < o7; l8++)
      n6[l8] = 0;
    Cn(r4, o7 - 8, BigInt(this.length * 8), s4), this.process(r4, 0);
    const u5 = _t(e3), i6 = this.outputLen;
    if (i6 % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i6 / 4, c8 = this.get();
    if (D3 > c8.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let l8 = 0; l8 < D3; l8++)
      u5.setUint32(4 * l8, c8[l8], s4);
  }
  digest() {
    const { buffer: e3, outputLen: n6 } = this;
    this.digestInto(e3);
    const r4 = e3.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(e3) {
    e3 || (e3 = new this.constructor()), e3.set(...this.get());
    const { blockLen: n6, buffer: r4, length: o7, finished: s4, destroyed: a4, pos: u5 } = this;
    return e3.length = o7, e3.pos = u5, e3.finished = s4, e3.destroyed = a4, o7 % n6 && e3.buffer.set(r4), e3;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t2, e3 = false) {
  return e3 ? { h: Number(t2 & wt), l: Number(t2 >> St & wt) } : { h: Number(t2 >> St & wt) | 0, l: Number(t2 & wt) | 0 };
}
function mn(t2, e3 = false) {
  let n6 = new Uint32Array(t2.length), r4 = new Uint32Array(t2.length);
  for (let o7 = 0; o7 < t2.length; o7++) {
    const { h: s4, l: a4 } = le(t2[o7], e3);
    [n6[o7], r4[o7]] = [s4, a4];
  }
  return [n6, r4];
}
var _n = (t2, e3) => BigInt(t2 >>> 0) << St | BigInt(e3 >>> 0);
var Sn = (t2, e3, n6) => t2 >>> n6;
var vn = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var In = (t2, e3, n6) => t2 >>> n6 | e3 << 32 - n6;
var Un = (t2, e3, n6) => t2 << 32 - n6 | e3 >>> n6;
var Tn = (t2, e3, n6) => t2 << 64 - n6 | e3 >>> n6 - 32;
var Fn = (t2, e3, n6) => t2 >>> n6 - 32 | e3 << 64 - n6;
var Nn = (t2, e3) => e3;
var Ln = (t2, e3) => t2;
var On = (t2, e3, n6) => t2 << n6 | e3 >>> 32 - n6;
var Hn = (t2, e3, n6) => e3 << n6 | t2 >>> 32 - n6;
var zn = (t2, e3, n6) => e3 << n6 - 32 | t2 >>> 64 - n6;
var Mn = (t2, e3, n6) => t2 << n6 - 32 | e3 >>> 64 - n6;
function qn(t2, e3, n6, r4) {
  const o7 = (e3 >>> 0) + (r4 >>> 0);
  return { h: t2 + n6 + (o7 / 2 ** 32 | 0) | 0, l: o7 | 0 };
}
var $n = (t2, e3, n6) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0);
var kn = (t2, e3, n6, r4) => e3 + n6 + r4 + (t2 / 2 ** 32 | 0) | 0;
var Rn = (t2, e3, n6, r4) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0);
var jn = (t2, e3, n6, r4, o7) => e3 + n6 + r4 + o7 + (t2 / 2 ** 32 | 0) | 0;
var Zn = (t2, e3, n6, r4, o7) => (t2 >>> 0) + (e3 >>> 0) + (n6 >>> 0) + (r4 >>> 0) + (o7 >>> 0);
var Gn = (t2, e3, n6, r4, o7, s4) => e3 + n6 + r4 + o7 + s4 + (t2 / 2 ** 32 | 0) | 0;
var x3 = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x3.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t2) => BigInt(t2))))();
var P3 = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e3, Al: n6, Bh: r4, Bl: o7, Ch: s4, Cl: a4, Dh: u5, Dl: i6, Eh: D3, El: c8, Fh: l8, Fl: p7, Gh: w7, Gl: h6, Hh: g5, Hl: S5 } = this;
    return [e3, n6, r4, o7, s4, a4, u5, i6, D3, c8, l8, p7, w7, h6, g5, S5];
  }
  set(e3, n6, r4, o7, s4, a4, u5, i6, D3, c8, l8, p7, w7, h6, g5, S5) {
    this.Ah = e3 | 0, this.Al = n6 | 0, this.Bh = r4 | 0, this.Bl = o7 | 0, this.Ch = s4 | 0, this.Cl = a4 | 0, this.Dh = u5 | 0, this.Dl = i6 | 0, this.Eh = D3 | 0, this.El = c8 | 0, this.Fh = l8 | 0, this.Fl = p7 | 0, this.Gh = w7 | 0, this.Gl = h6 | 0, this.Hh = g5 | 0, this.Hl = S5 | 0;
  }
  process(e3, n6) {
    for (let d6 = 0; d6 < 16; d6++, n6 += 4)
      P3[d6] = e3.getUint32(n6), Q[d6] = e3.getUint32(n6 += 4);
    for (let d6 = 16; d6 < 80; d6++) {
      const m4 = P3[d6 - 15] | 0, F4 = Q[d6 - 15] | 0, q2 = x3.rotrSH(m4, F4, 1) ^ x3.rotrSH(m4, F4, 8) ^ x3.shrSH(m4, F4, 7), z6 = x3.rotrSL(m4, F4, 1) ^ x3.rotrSL(m4, F4, 8) ^ x3.shrSL(m4, F4, 7), I4 = P3[d6 - 2] | 0, O7 = Q[d6 - 2] | 0, ot3 = x3.rotrSH(I4, O7, 19) ^ x3.rotrBH(I4, O7, 61) ^ x3.shrSH(I4, O7, 6), tt4 = x3.rotrSL(I4, O7, 19) ^ x3.rotrBL(I4, O7, 61) ^ x3.shrSL(I4, O7, 6), st3 = x3.add4L(z6, tt4, Q[d6 - 7], Q[d6 - 16]), at3 = x3.add4H(st3, q2, ot3, P3[d6 - 7], P3[d6 - 16]);
      P3[d6] = at3 | 0, Q[d6] = st3 | 0;
    }
    let { Ah: r4, Al: o7, Bh: s4, Bl: a4, Ch: u5, Cl: i6, Dh: D3, Dl: c8, Eh: l8, El: p7, Fh: w7, Fl: h6, Gh: g5, Gl: S5, Hh: v7, Hl: L5 } = this;
    for (let d6 = 0; d6 < 80; d6++) {
      const m4 = x3.rotrSH(l8, p7, 14) ^ x3.rotrSH(l8, p7, 18) ^ x3.rotrBH(l8, p7, 41), F4 = x3.rotrSL(l8, p7, 14) ^ x3.rotrSL(l8, p7, 18) ^ x3.rotrBL(l8, p7, 41), q2 = l8 & w7 ^ ~l8 & g5, z6 = p7 & h6 ^ ~p7 & S5, I4 = x3.add5L(L5, F4, z6, Yn[d6], Q[d6]), O7 = x3.add5H(I4, v7, m4, q2, Vn[d6], P3[d6]), ot3 = I4 | 0, tt4 = x3.rotrSH(r4, o7, 28) ^ x3.rotrBH(r4, o7, 34) ^ x3.rotrBH(r4, o7, 39), st3 = x3.rotrSL(r4, o7, 28) ^ x3.rotrBL(r4, o7, 34) ^ x3.rotrBL(r4, o7, 39), at3 = r4 & s4 ^ r4 & u5 ^ s4 & u5, Ct4 = o7 & a4 ^ o7 & i6 ^ a4 & i6;
      v7 = g5 | 0, L5 = S5 | 0, g5 = w7 | 0, S5 = h6 | 0, w7 = l8 | 0, h6 = p7 | 0, { h: l8, l: p7 } = x3.add(D3 | 0, c8 | 0, O7 | 0, ot3 | 0), D3 = u5 | 0, c8 = i6 | 0, u5 = s4 | 0, i6 = a4 | 0, s4 = r4 | 0, a4 = o7 | 0;
      const At3 = x3.add3L(ot3, st3, Ct4);
      r4 = x3.add3H(At3, O7, tt4, at3), o7 = At3 | 0;
    }
    ({ h: r4, l: o7 } = x3.add(this.Ah | 0, this.Al | 0, r4 | 0, o7 | 0)), { h: s4, l: a4 } = x3.add(this.Bh | 0, this.Bl | 0, s4 | 0, a4 | 0), { h: u5, l: i6 } = x3.add(this.Ch | 0, this.Cl | 0, u5 | 0, i6 | 0), { h: D3, l: c8 } = x3.add(this.Dh | 0, this.Dl | 0, D3 | 0, c8 | 0), { h: l8, l: p7 } = x3.add(this.Eh | 0, this.El | 0, l8 | 0, p7 | 0), { h: w7, l: h6 } = x3.add(this.Fh | 0, this.Fl | 0, w7 | 0, h6 | 0), { h: g5, l: S5 } = x3.add(this.Gh | 0, this.Gl | 0, g5 | 0, S5 | 0), { h: v7, l: L5 } = x3.add(this.Hh | 0, this.Hl | 0, v7 | 0, L5 | 0), this.set(r4, o7, s4, a4, u5, i6, D3, c8, l8, p7, w7, h6, g5, S5, v7, L5);
  }
  roundClean() {
    P3.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function Ut(t2) {
  if (!It(t2))
    throw new Error("Uint8Array expected");
}
function Tt(t2, e3) {
  if (typeof e3 != "boolean")
    throw new Error(t2 + " boolean expected, got " + e3);
}
var Xn = Array.from({ length: 256 }, (t2, e3) => e3.toString(16).padStart(2, "0"));
function Ft(t2) {
  Ut(t2);
  let e3 = "";
  for (let n6 = 0; n6 < t2.length; n6++)
    e3 += Xn[t2[n6]];
  return e3;
}
function pe(t2) {
  if (typeof t2 != "string")
    throw new Error("hex string expected, got " + typeof t2);
  return t2 === "" ? vt : BigInt("0x" + t2);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t2) {
  if (t2 >= K2._0 && t2 <= K2._9)
    return t2 - K2._0;
  if (t2 >= K2.A && t2 <= K2.F)
    return t2 - (K2.A - 10);
  if (t2 >= K2.a && t2 <= K2.f)
    return t2 - (K2.a - 10);
}
function Ee(t2) {
  if (typeof t2 != "string")
    throw new Error("hex string expected, got " + typeof t2);
  const e3 = t2.length, n6 = e3 / 2;
  if (e3 % 2)
    throw new Error("hex string expected, got unpadded hex of length " + e3);
  const r4 = new Uint8Array(n6);
  for (let o7 = 0, s4 = 0; o7 < n6; o7++, s4 += 2) {
    const a4 = we(t2.charCodeAt(s4)), u5 = we(t2.charCodeAt(s4 + 1));
    if (a4 === void 0 || u5 === void 0) {
      const i6 = t2[s4] + t2[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + i6 + '" at index ' + s4);
    }
    r4[o7] = a4 * 16 + u5;
  }
  return r4;
}
function Pn(t2) {
  return pe(Ft(t2));
}
function Et(t2) {
  return Ut(t2), pe(Ft(Uint8Array.from(t2).reverse()));
}
function ge(t2, e3) {
  return Ee(t2.toString(16).padStart(e3 * 2, "0"));
}
function Nt(t2, e3) {
  return ge(t2, e3).reverse();
}
function W(t2, e3, n6) {
  let r4;
  if (typeof e3 == "string")
    try {
      r4 = Ee(e3);
    } catch (s4) {
      throw new Error(t2 + " must be hex string or Uint8Array, cause: " + s4);
    }
  else if (It(e3))
    r4 = Uint8Array.from(e3);
  else
    throw new Error(t2 + " must be hex string or Uint8Array");
  const o7 = r4.length;
  if (typeof n6 == "number" && o7 !== n6)
    throw new Error(t2 + " of length " + n6 + " expected, got " + o7);
  return r4;
}
function ye(...t2) {
  let e3 = 0;
  for (let r4 = 0; r4 < t2.length; r4++) {
    const o7 = t2[r4];
    Ut(o7), e3 += o7.length;
  }
  const n6 = new Uint8Array(e3);
  for (let r4 = 0, o7 = 0; r4 < t2.length; r4++) {
    const s4 = t2[r4];
    n6.set(s4, o7), o7 += s4.length;
  }
  return n6;
}
var Lt = (t2) => typeof t2 == "bigint" && vt <= t2;
function Qn(t2, e3, n6) {
  return Lt(t2) && Lt(e3) && Lt(n6) && e3 <= t2 && t2 < n6;
}
function ft(t2, e3, n6, r4) {
  if (!Qn(e3, n6, r4))
    throw new Error("expected valid " + t2 + ": " + n6 + " <= n < " + r4 + ", got " + e3);
}
function tr(t2) {
  let e3;
  for (e3 = 0; t2 > vt; t2 >>= be, e3 += 1)
    ;
  return e3;
}
var er = (t2) => (Wn << BigInt(t2 - 1)) - be;
var nr = { bigint: (t2) => typeof t2 == "bigint", function: (t2) => typeof t2 == "function", boolean: (t2) => typeof t2 == "boolean", string: (t2) => typeof t2 == "string", stringOrUint8Array: (t2) => typeof t2 == "string" || It(t2), isSafeInteger: (t2) => Number.isSafeInteger(t2), array: (t2) => Array.isArray(t2), field: (t2, e3) => e3.Fp.isValid(t2), hash: (t2) => typeof t2 == "function" && Number.isSafeInteger(t2.outputLen) };
function Ot(t2, e3, n6 = {}) {
  const r4 = (o7, s4, a4) => {
    const u5 = nr[s4];
    if (typeof u5 != "function")
      throw new Error("invalid validator function");
    const i6 = t2[o7];
    if (!(a4 && i6 === void 0) && !u5(i6, t2))
      throw new Error("param " + String(o7) + " is invalid. Expected " + s4 + ", got " + i6);
  };
  for (const [o7, s4] of Object.entries(e3))
    r4(o7, s4, false);
  for (const [o7, s4] of Object.entries(n6))
    r4(o7, s4, true);
  return t2;
}
function xe(t2) {
  const e3 = /* @__PURE__ */ new WeakMap();
  return (n6, ...r4) => {
    const o7 = e3.get(n6);
    if (o7 !== void 0)
      return o7;
    const s4 = t2(n6, ...r4);
    return e3.set(n6, s4), s4;
  };
}
var M2 = BigInt(0);
var N2 = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t2, e3) {
  const n6 = t2 % e3;
  return n6 >= M2 ? n6 : e3 + n6;
}
function or(t2, e3, n6) {
  if (e3 < M2)
    throw new Error("invalid exponent, negatives unsupported");
  if (n6 <= M2)
    throw new Error("invalid modulus");
  if (n6 === N2)
    return M2;
  let r4 = N2;
  for (; e3 > M2; )
    e3 & N2 && (r4 = r4 * t2 % n6), t2 = t2 * t2 % n6, e3 >>= N2;
  return r4;
}
function J2(t2, e3, n6) {
  let r4 = t2;
  for (; e3-- > M2; )
    r4 *= r4, r4 %= n6;
  return r4;
}
function Ae(t2, e3) {
  if (t2 === M2)
    throw new Error("invert: expected non-zero number");
  if (e3 <= M2)
    throw new Error("invert: expected positive modulus, got " + e3);
  let n6 = H(t2, e3), r4 = e3, o7 = M2, s4 = N2;
  for (; n6 !== M2; ) {
    const u5 = r4 / n6, i6 = r4 % n6, D3 = o7 - s4 * u5;
    r4 = n6, n6 = i6, o7 = s4, s4 = D3;
  }
  if (r4 !== N2)
    throw new Error("invert: does not exist");
  return H(o7, e3);
}
function sr(t2) {
  const e3 = (t2 - N2) / nt;
  let n6, r4, o7;
  for (n6 = t2 - N2, r4 = 0; n6 % nt === M2; n6 /= nt, r4++)
    ;
  for (o7 = nt; o7 < t2 && or(o7, e3, t2) !== t2 - N2; o7++)
    if (o7 > 1e3)
      throw new Error("Cannot find square root: likely non-prime P");
  if (r4 === 1) {
    const a4 = (t2 + N2) / Ht;
    return function(i6, D3) {
      const c8 = i6.pow(D3, a4);
      if (!i6.eql(i6.sqr(c8), D3))
        throw new Error("Cannot find square root");
      return c8;
    };
  }
  const s4 = (n6 + N2) / nt;
  return function(u5, i6) {
    if (u5.pow(i6, e3) === u5.neg(u5.ONE))
      throw new Error("Cannot find square root");
    let D3 = r4, c8 = u5.pow(u5.mul(u5.ONE, o7), n6), l8 = u5.pow(i6, s4), p7 = u5.pow(i6, n6);
    for (; !u5.eql(p7, u5.ONE); ) {
      if (u5.eql(p7, u5.ZERO))
        return u5.ZERO;
      let w7 = 1;
      for (let g5 = u5.sqr(p7); w7 < D3 && !u5.eql(g5, u5.ONE); w7++)
        g5 = u5.sqr(g5);
      const h6 = u5.pow(c8, N2 << BigInt(D3 - w7 - 1));
      c8 = u5.sqr(h6), l8 = u5.mul(l8, h6), p7 = u5.mul(p7, c8), D3 = w7;
    }
    return l8;
  };
}
function ir(t2) {
  if (t2 % Ht === rr) {
    const e3 = (t2 + N2) / Ht;
    return function(r4, o7) {
      const s4 = r4.pow(o7, e3);
      if (!r4.eql(r4.sqr(s4), o7))
        throw new Error("Cannot find square root");
      return s4;
    };
  }
  if (t2 % Ce === Be) {
    const e3 = (t2 - Be) / Ce;
    return function(r4, o7) {
      const s4 = r4.mul(o7, nt), a4 = r4.pow(s4, e3), u5 = r4.mul(o7, a4), i6 = r4.mul(r4.mul(u5, nt), a4), D3 = r4.mul(u5, r4.sub(i6, r4.ONE));
      if (!r4.eql(r4.sqr(D3), o7))
        throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t2);
}
var ur = (t2, e3) => (H(t2, e3) & N2) === N2;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t2) {
  const e3 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n6 = cr.reduce((r4, o7) => (r4[o7] = "function", r4), e3);
  return Ot(t2, n6);
}
function fr(t2, e3, n6) {
  if (n6 < M2)
    throw new Error("invalid exponent, negatives unsupported");
  if (n6 === M2)
    return t2.ONE;
  if (n6 === N2)
    return e3;
  let r4 = t2.ONE, o7 = e3;
  for (; n6 > M2; )
    n6 & N2 && (r4 = t2.mul(r4, o7)), o7 = t2.sqr(o7), n6 >>= N2;
  return r4;
}
function Dr(t2, e3) {
  const n6 = new Array(e3.length), r4 = e3.reduce((s4, a4, u5) => t2.is0(a4) ? s4 : (n6[u5] = s4, t2.mul(s4, a4)), t2.ONE), o7 = t2.inv(r4);
  return e3.reduceRight((s4, a4, u5) => t2.is0(a4) ? s4 : (n6[u5] = t2.mul(s4, n6[u5]), t2.mul(s4, a4)), o7), n6;
}
function me(t2, e3) {
  const n6 = e3 !== void 0 ? e3 : t2.toString(2).length, r4 = Math.ceil(n6 / 8);
  return { nBitLength: n6, nByteLength: r4 };
}
function _e(t2, e3, n6 = false, r4 = {}) {
  if (t2 <= M2)
    throw new Error("invalid field: expected ORDER > 0, got " + t2);
  const { nBitLength: o7, nByteLength: s4 } = me(t2, e3);
  if (s4 > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a4;
  const u5 = Object.freeze({ ORDER: t2, isLE: n6, BITS: o7, BYTES: s4, MASK: er(o7), ZERO: M2, ONE: N2, create: (i6) => H(i6, t2), isValid: (i6) => {
    if (typeof i6 != "bigint")
      throw new Error("invalid field element: expected bigint, got " + typeof i6);
    return M2 <= i6 && i6 < t2;
  }, is0: (i6) => i6 === M2, isOdd: (i6) => (i6 & N2) === N2, neg: (i6) => H(-i6, t2), eql: (i6, D3) => i6 === D3, sqr: (i6) => H(i6 * i6, t2), add: (i6, D3) => H(i6 + D3, t2), sub: (i6, D3) => H(i6 - D3, t2), mul: (i6, D3) => H(i6 * D3, t2), pow: (i6, D3) => fr(u5, i6, D3), div: (i6, D3) => H(i6 * Ae(D3, t2), t2), sqrN: (i6) => i6 * i6, addN: (i6, D3) => i6 + D3, subN: (i6, D3) => i6 - D3, mulN: (i6, D3) => i6 * D3, inv: (i6) => Ae(i6, t2), sqrt: r4.sqrt || ((i6) => (a4 || (a4 = ir(t2)), a4(u5, i6))), invertBatch: (i6) => Dr(u5, i6), cmov: (i6, D3, c8) => c8 ? D3 : i6, toBytes: (i6) => n6 ? Nt(i6, s4) : ge(i6, s4), fromBytes: (i6) => {
    if (i6.length !== s4)
      throw new Error("Field.fromBytes: expected " + s4 + " bytes, got " + i6.length);
    return n6 ? Et(i6) : Pn(i6);
  } });
  return Object.freeze(u5);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t2, e3) {
  const n6 = e3.negate();
  return t2 ? n6 : e3;
}
function ve(t2, e3) {
  if (!Number.isSafeInteger(t2) || t2 <= 0 || t2 > e3)
    throw new Error("invalid window size, expected [1.." + e3 + "], got W=" + t2);
}
function Mt(t2, e3) {
  ve(t2, e3);
  const n6 = Math.ceil(e3 / t2) + 1, r4 = 2 ** (t2 - 1);
  return { windows: n6, windowSize: r4 };
}
function dr(t2, e3) {
  if (!Array.isArray(t2))
    throw new Error("array expected");
  t2.forEach((n6, r4) => {
    if (!(n6 instanceof e3))
      throw new Error("invalid point at index " + r4);
  });
}
function hr(t2, e3) {
  if (!Array.isArray(t2))
    throw new Error("array of scalars expected");
  t2.forEach((n6, r4) => {
    if (!e3.isValid(n6))
      throw new Error("invalid scalar at index " + r4);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t2) {
  return Ie.get(t2) || 1;
}
function lr(t2, e3) {
  return { constTimeNegate: zt, hasPrecomputes(n6) {
    return $t(n6) !== 1;
  }, unsafeLadder(n6, r4, o7 = t2.ZERO) {
    let s4 = n6;
    for (; r4 > Se; )
      r4 & gt && (o7 = o7.add(s4)), s4 = s4.double(), r4 >>= gt;
    return o7;
  }, precomputeWindow(n6, r4) {
    const { windows: o7, windowSize: s4 } = Mt(r4, e3), a4 = [];
    let u5 = n6, i6 = u5;
    for (let D3 = 0; D3 < o7; D3++) {
      i6 = u5, a4.push(i6);
      for (let c8 = 1; c8 < s4; c8++)
        i6 = i6.add(u5), a4.push(i6);
      u5 = i6.double();
    }
    return a4;
  }, wNAF(n6, r4, o7) {
    const { windows: s4, windowSize: a4 } = Mt(n6, e3);
    let u5 = t2.ZERO, i6 = t2.BASE;
    const D3 = BigInt(2 ** n6 - 1), c8 = 2 ** n6, l8 = BigInt(n6);
    for (let p7 = 0; p7 < s4; p7++) {
      const w7 = p7 * a4;
      let h6 = Number(o7 & D3);
      o7 >>= l8, h6 > a4 && (h6 -= c8, o7 += gt);
      const g5 = w7, S5 = w7 + Math.abs(h6) - 1, v7 = p7 % 2 !== 0, L5 = h6 < 0;
      h6 === 0 ? i6 = i6.add(zt(v7, r4[g5])) : u5 = u5.add(zt(L5, r4[S5]));
    }
    return { p: u5, f: i6 };
  }, wNAFUnsafe(n6, r4, o7, s4 = t2.ZERO) {
    const { windows: a4, windowSize: u5 } = Mt(n6, e3), i6 = BigInt(2 ** n6 - 1), D3 = 2 ** n6, c8 = BigInt(n6);
    for (let l8 = 0; l8 < a4; l8++) {
      const p7 = l8 * u5;
      if (o7 === Se)
        break;
      let w7 = Number(o7 & i6);
      if (o7 >>= c8, w7 > u5 && (w7 -= D3, o7 += gt), w7 === 0)
        continue;
      let h6 = r4[p7 + Math.abs(w7) - 1];
      w7 < 0 && (h6 = h6.negate()), s4 = s4.add(h6);
    }
    return s4;
  }, getPrecomputes(n6, r4, o7) {
    let s4 = qt.get(r4);
    return s4 || (s4 = this.precomputeWindow(r4, n6), n6 !== 1 && qt.set(r4, o7(s4))), s4;
  }, wNAFCached(n6, r4, o7) {
    const s4 = $t(n6);
    return this.wNAF(s4, this.getPrecomputes(s4, n6, o7), r4);
  }, wNAFCachedUnsafe(n6, r4, o7, s4) {
    const a4 = $t(n6);
    return a4 === 1 ? this.unsafeLadder(n6, r4, s4) : this.wNAFUnsafe(a4, this.getPrecomputes(a4, n6, o7), r4, s4);
  }, setWindowSize(n6, r4) {
    ve(r4, e3), Ie.set(n6, r4), qt.delete(n6);
  } };
}
function br(t2, e3, n6, r4) {
  if (dr(n6, t2), hr(r4, e3), n6.length !== r4.length)
    throw new Error("arrays of points and scalars must have equal length");
  const o7 = t2.ZERO, s4 = tr(BigInt(n6.length)), a4 = s4 > 12 ? s4 - 3 : s4 > 4 ? s4 - 2 : s4 ? 2 : 1, u5 = (1 << a4) - 1, i6 = new Array(u5 + 1).fill(o7), D3 = Math.floor((e3.BITS - 1) / a4) * a4;
  let c8 = o7;
  for (let l8 = D3; l8 >= 0; l8 -= a4) {
    i6.fill(o7);
    for (let w7 = 0; w7 < r4.length; w7++) {
      const h6 = r4[w7], g5 = Number(h6 >> BigInt(l8) & BigInt(u5));
      i6[g5] = i6[g5].add(n6[w7]);
    }
    let p7 = o7;
    for (let w7 = i6.length - 1, h6 = o7; w7 > 0; w7--)
      h6 = h6.add(i6[w7]), p7 = p7.add(h6);
    if (c8 = c8.add(p7), l8 !== 0)
      for (let w7 = 0; w7 < a4; w7++)
        c8 = c8.double();
  }
  return c8;
}
function pr(t2) {
  return ar(t2.Fp), Ot(t2, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t2.n, t2.nBitLength), ...t2, p: t2.Fp.ORDER });
}
var G = BigInt(0);
var j2 = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t2) {
  const e3 = pr(t2);
  return Ot(t2, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e3 });
}
function yr(t2) {
  const e3 = gr(t2), { Fp: n6, n: r4, prehash: o7, hash: s4, randomBytes: a4, nByteLength: u5, h: i6 } = e3, D3 = yt << BigInt(u5 * 8) - j2, c8 = n6.create, l8 = _e(e3.n, e3.nBitLength), p7 = e3.uvRatio || ((y7, f9) => {
    try {
      return { isValid: true, value: n6.sqrt(y7 * n6.inv(f9)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w7 = e3.adjustScalarBytes || ((y7) => y7), h6 = e3.domain || ((y7, f9, b6) => {
    if (Tt("phflag", b6), f9.length || b6)
      throw new Error("Contexts/pre-hash are not supported");
    return y7;
  });
  function g5(y7, f9) {
    ft("coordinate " + y7, f9, G, D3);
  }
  function S5(y7) {
    if (!(y7 instanceof d6))
      throw new Error("ExtendedPoint expected");
  }
  const v7 = xe((y7, f9) => {
    const { ex: b6, ey: E7, ez: B4 } = y7, C6 = y7.is0();
    f9 == null && (f9 = C6 ? wr : n6.inv(B4));
    const A4 = c8(b6 * f9), U3 = c8(E7 * f9), _4 = c8(B4 * f9);
    if (C6)
      return { x: G, y: j2 };
    if (_4 !== j2)
      throw new Error("invZ was invalid");
    return { x: A4, y: U3 };
  }), L5 = xe((y7) => {
    const { a: f9, d: b6 } = e3;
    if (y7.is0())
      throw new Error("bad point: ZERO");
    const { ex: E7, ey: B4, ez: C6, et: A4 } = y7, U3 = c8(E7 * E7), _4 = c8(B4 * B4), T4 = c8(C6 * C6), $4 = c8(T4 * T4), R3 = c8(U3 * f9), V5 = c8(T4 * c8(R3 + _4)), Y3 = c8($4 + c8(b6 * c8(U3 * _4)));
    if (V5 !== Y3)
      throw new Error("bad point: equation left != right (1)");
    const Z2 = c8(E7 * B4), X = c8(C6 * A4);
    if (Z2 !== X)
      throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d6 {
    constructor(f9, b6, E7, B4) {
      this.ex = f9, this.ey = b6, this.ez = E7, this.et = B4, g5("x", f9), g5("y", b6), g5("z", E7), g5("t", B4), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f9) {
      if (f9 instanceof d6)
        throw new Error("extended point not allowed");
      const { x: b6, y: E7 } = f9 || {};
      return g5("x", b6), g5("y", E7), new d6(b6, E7, j2, c8(b6 * E7));
    }
    static normalizeZ(f9) {
      const b6 = n6.invertBatch(f9.map((E7) => E7.ez));
      return f9.map((E7, B4) => E7.toAffine(b6[B4])).map(d6.fromAffine);
    }
    static msm(f9, b6) {
      return br(d6, l8, f9, b6);
    }
    _setWindowSize(f9) {
      q2.setWindowSize(this, f9);
    }
    assertValidity() {
      L5(this);
    }
    equals(f9) {
      S5(f9);
      const { ex: b6, ey: E7, ez: B4 } = this, { ex: C6, ey: A4, ez: U3 } = f9, _4 = c8(b6 * U3), T4 = c8(C6 * B4), $4 = c8(E7 * U3), R3 = c8(A4 * B4);
      return _4 === T4 && $4 === R3;
    }
    is0() {
      return this.equals(d6.ZERO);
    }
    negate() {
      return new d6(c8(-this.ex), this.ey, this.ez, c8(-this.et));
    }
    double() {
      const { a: f9 } = e3, { ex: b6, ey: E7, ez: B4 } = this, C6 = c8(b6 * b6), A4 = c8(E7 * E7), U3 = c8(yt * c8(B4 * B4)), _4 = c8(f9 * C6), T4 = b6 + E7, $4 = c8(c8(T4 * T4) - C6 - A4), R3 = _4 + A4, V5 = R3 - U3, Y3 = _4 - A4, Z2 = c8($4 * V5), X = c8(R3 * Y3), et3 = c8($4 * Y3), pt4 = c8(V5 * R3);
      return new d6(Z2, X, pt4, et3);
    }
    add(f9) {
      S5(f9);
      const { a: b6, d: E7 } = e3, { ex: B4, ey: C6, ez: A4, et: U3 } = this, { ex: _4, ey: T4, ez: $4, et: R3 } = f9;
      if (b6 === BigInt(-1)) {
        const re4 = c8((C6 - B4) * (T4 + _4)), oe3 = c8((C6 + B4) * (T4 - _4)), mt4 = c8(oe3 - re4);
        if (mt4 === G)
          return this.double();
        const se4 = c8(A4 * yt * R3), ie4 = c8(U3 * yt * $4), ue4 = ie4 + se4, ce4 = oe3 + re4, ae4 = ie4 - se4, Dn3 = c8(ue4 * mt4), dn3 = c8(ce4 * ae4), hn3 = c8(ue4 * ae4), ln3 = c8(mt4 * ce4);
        return new d6(Dn3, dn3, ln3, hn3);
      }
      const V5 = c8(B4 * _4), Y3 = c8(C6 * T4), Z2 = c8(U3 * E7 * R3), X = c8(A4 * $4), et3 = c8((B4 + C6) * (_4 + T4) - V5 - Y3), pt4 = X - Z2, ee4 = X + Z2, ne3 = c8(Y3 - b6 * V5), un3 = c8(et3 * pt4), cn3 = c8(ee4 * ne3), an3 = c8(et3 * ne3), fn3 = c8(pt4 * ee4);
      return new d6(un3, cn3, fn3, an3);
    }
    subtract(f9) {
      return this.add(f9.negate());
    }
    wNAF(f9) {
      return q2.wNAFCached(this, f9, d6.normalizeZ);
    }
    multiply(f9) {
      const b6 = f9;
      ft("scalar", b6, j2, r4);
      const { p: E7, f: B4 } = this.wNAF(b6);
      return d6.normalizeZ([E7, B4])[0];
    }
    multiplyUnsafe(f9, b6 = d6.ZERO) {
      const E7 = f9;
      return ft("scalar", E7, G, r4), E7 === G ? F4 : this.is0() || E7 === j2 ? this : q2.wNAFCachedUnsafe(this, E7, d6.normalizeZ, b6);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i6).is0();
    }
    isTorsionFree() {
      return q2.unsafeLadder(this, r4).is0();
    }
    toAffine(f9) {
      return v7(this, f9);
    }
    clearCofactor() {
      const { h: f9 } = e3;
      return f9 === j2 ? this : this.multiplyUnsafe(f9);
    }
    static fromHex(f9, b6 = false) {
      const { d: E7, a: B4 } = e3, C6 = n6.BYTES;
      f9 = W("pointHex", f9, C6), Tt("zip215", b6);
      const A4 = f9.slice(), U3 = f9[C6 - 1];
      A4[C6 - 1] = U3 & -129;
      const _4 = Et(A4), T4 = b6 ? D3 : n6.ORDER;
      ft("pointHex.y", _4, G, T4);
      const $4 = c8(_4 * _4), R3 = c8($4 - j2), V5 = c8(E7 * $4 - B4);
      let { isValid: Y3, value: Z2 } = p7(R3, V5);
      if (!Y3)
        throw new Error("Point.fromHex: invalid y coordinate");
      const X = (Z2 & j2) === j2, et3 = (U3 & 128) !== 0;
      if (!b6 && Z2 === G && et3)
        throw new Error("Point.fromHex: x=0 and x_0=1");
      return et3 !== X && (Z2 = c8(-Z2)), d6.fromAffine({ x: Z2, y: _4 });
    }
    static fromPrivateKey(f9) {
      return O7(f9).point;
    }
    toRawBytes() {
      const { x: f9, y: b6 } = this.toAffine(), E7 = Nt(b6, n6.BYTES);
      return E7[E7.length - 1] |= f9 & j2 ? 128 : 0, E7;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d6.BASE = new d6(e3.Gx, e3.Gy, j2, c8(e3.Gx * e3.Gy)), d6.ZERO = new d6(G, j2, j2, G);
  const { BASE: m4, ZERO: F4 } = d6, q2 = lr(d6, u5 * 8);
  function z6(y7) {
    return H(y7, r4);
  }
  function I4(y7) {
    return z6(Et(y7));
  }
  function O7(y7) {
    const f9 = n6.BYTES;
    y7 = W("private key", y7, f9);
    const b6 = W("hashed private key", s4(y7), 2 * f9), E7 = w7(b6.slice(0, f9)), B4 = b6.slice(f9, 2 * f9), C6 = I4(E7), A4 = m4.multiply(C6), U3 = A4.toRawBytes();
    return { head: E7, prefix: B4, scalar: C6, point: A4, pointBytes: U3 };
  }
  function ot3(y7) {
    return O7(y7).pointBytes;
  }
  function tt4(y7 = new Uint8Array(), ...f9) {
    const b6 = ye(...f9);
    return I4(s4(h6(b6, W("context", y7), !!o7)));
  }
  function st3(y7, f9, b6 = {}) {
    y7 = W("message", y7), o7 && (y7 = o7(y7));
    const { prefix: E7, scalar: B4, pointBytes: C6 } = O7(f9), A4 = tt4(b6.context, E7, y7), U3 = m4.multiply(A4).toRawBytes(), _4 = tt4(b6.context, U3, C6, y7), T4 = z6(A4 + _4 * B4);
    ft("signature.s", T4, G, r4);
    const $4 = ye(U3, Nt(T4, n6.BYTES));
    return W("result", $4, n6.BYTES * 2);
  }
  const at3 = Er;
  function Ct4(y7, f9, b6, E7 = at3) {
    const { context: B4, zip215: C6 } = E7, A4 = n6.BYTES;
    y7 = W("signature", y7, 2 * A4), f9 = W("message", f9), b6 = W("publicKey", b6, A4), C6 !== void 0 && Tt("zip215", C6), o7 && (f9 = o7(f9));
    const U3 = Et(y7.slice(A4, 2 * A4));
    let _4, T4, $4;
    try {
      _4 = d6.fromHex(b6, C6), T4 = d6.fromHex(y7.slice(0, A4), C6), $4 = m4.multiplyUnsafe(U3);
    } catch {
      return false;
    }
    if (!C6 && _4.isSmallOrder())
      return false;
    const R3 = tt4(B4, T4.toRawBytes(), _4.toRawBytes(), f9);
    return T4.add(_4.multiplyUnsafe(R3)).subtract($4).clearCofactor().equals(d6.ZERO);
  }
  return m4._setWindowSize(8), { CURVE: e3, getPublicKey: ot3, sign: st3, verify: Ct4, ExtendedPoint: d6, utils: { getExtendedPublicKey: O7, randomPrivateKey: () => a4(n6.BYTES), precompute(y7 = 8, f9 = d6.BASE) {
    return f9._setWindowSize(y7), f9.multiply(BigInt(3)), f9;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t2) {
  const e3 = BigInt(10), n6 = BigInt(20), r4 = BigInt(40), o7 = BigInt(80), s4 = kt, u5 = t2 * t2 % s4 * t2 % s4, i6 = J2(u5, Te, s4) * u5 % s4, D3 = J2(i6, xr, s4) * t2 % s4, c8 = J2(D3, Br, s4) * D3 % s4, l8 = J2(c8, e3, s4) * c8 % s4, p7 = J2(l8, n6, s4) * l8 % s4, w7 = J2(p7, r4, s4) * p7 % s4, h6 = J2(w7, o7, s4) * w7 % s4, g5 = J2(h6, o7, s4) * w7 % s4, S5 = J2(g5, e3, s4) * c8 % s4;
  return { pow_p_5_8: J2(S5, Te, s4) * t2 % s4, b2: u5 };
}
function mr(t2) {
  return t2[0] &= 248, t2[31] &= 127, t2[31] |= 64, t2;
}
function _r(t2, e3) {
  const n6 = kt, r4 = H(e3 * e3 * e3, n6), o7 = H(r4 * r4 * e3, n6), s4 = Ar(t2 * o7).pow_p_5_8;
  let a4 = H(t2 * r4 * s4, n6);
  const u5 = H(e3 * a4 * a4, n6), i6 = a4, D3 = H(a4 * Ue, n6), c8 = u5 === t2, l8 = u5 === H(-t2, n6), p7 = u5 === H(-t2 * Ue, n6);
  return c8 && (a4 = i6), (l8 || p7) && (a4 = D3), ur(a4, n6) && (a4 = H(-a4, n6)), { isValid: c8 || l8, value: a4 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t2) {
  return globalThis.Buffer != null ? new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength) : t2;
}
function Le(t2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t2)) : new Uint8Array(t2);
}
function Oe(t2, e3) {
  e3 || (e3 = t2.reduce((o7, s4) => o7 + s4.length, 0));
  const n6 = Le(e3);
  let r4 = 0;
  for (const o7 of t2)
    n6.set(o7, r4), r4 += o7.length;
  return Xt(n6);
}
function Ir(t2, e3) {
  if (t2.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var n6 = new Uint8Array(256), r4 = 0; r4 < n6.length; r4++)
    n6[r4] = 255;
  for (var o7 = 0; o7 < t2.length; o7++) {
    var s4 = t2.charAt(o7), a4 = s4.charCodeAt(0);
    if (n6[a4] !== 255)
      throw new TypeError(s4 + " is ambiguous");
    n6[a4] = o7;
  }
  var u5 = t2.length, i6 = t2.charAt(0), D3 = Math.log(u5) / Math.log(256), c8 = Math.log(256) / Math.log(u5);
  function l8(h6) {
    if (h6 instanceof Uint8Array || (ArrayBuffer.isView(h6) ? h6 = new Uint8Array(h6.buffer, h6.byteOffset, h6.byteLength) : Array.isArray(h6) && (h6 = Uint8Array.from(h6))), !(h6 instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (h6.length === 0)
      return "";
    for (var g5 = 0, S5 = 0, v7 = 0, L5 = h6.length; v7 !== L5 && h6[v7] === 0; )
      v7++, g5++;
    for (var d6 = (L5 - v7) * c8 + 1 >>> 0, m4 = new Uint8Array(d6); v7 !== L5; ) {
      for (var F4 = h6[v7], q2 = 0, z6 = d6 - 1; (F4 !== 0 || q2 < S5) && z6 !== -1; z6--, q2++)
        F4 += 256 * m4[z6] >>> 0, m4[z6] = F4 % u5 >>> 0, F4 = F4 / u5 >>> 0;
      if (F4 !== 0)
        throw new Error("Non-zero carry");
      S5 = q2, v7++;
    }
    for (var I4 = d6 - S5; I4 !== d6 && m4[I4] === 0; )
      I4++;
    for (var O7 = i6.repeat(g5); I4 < d6; ++I4)
      O7 += t2.charAt(m4[I4]);
    return O7;
  }
  function p7(h6) {
    if (typeof h6 != "string")
      throw new TypeError("Expected String");
    if (h6.length === 0)
      return new Uint8Array();
    var g5 = 0;
    if (h6[g5] !== " ") {
      for (var S5 = 0, v7 = 0; h6[g5] === i6; )
        S5++, g5++;
      for (var L5 = (h6.length - g5) * D3 + 1 >>> 0, d6 = new Uint8Array(L5); h6[g5]; ) {
        var m4 = n6[h6.charCodeAt(g5)];
        if (m4 === 255)
          return;
        for (var F4 = 0, q2 = L5 - 1; (m4 !== 0 || F4 < v7) && q2 !== -1; q2--, F4++)
          m4 += u5 * d6[q2] >>> 0, d6[q2] = m4 % 256 >>> 0, m4 = m4 / 256 >>> 0;
        if (m4 !== 0)
          throw new Error("Non-zero carry");
        v7 = F4, g5++;
      }
      if (h6[g5] !== " ") {
        for (var z6 = L5 - v7; z6 !== L5 && d6[z6] === 0; )
          z6++;
        for (var I4 = new Uint8Array(S5 + (L5 - z6)), O7 = S5; z6 !== L5; )
          I4[O7++] = d6[z6++];
        return I4;
      }
    }
  }
  function w7(h6) {
    var g5 = p7(h6);
    if (g5)
      return g5;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: l8, decodeUnsafe: p7, decode: w7 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t2) => {
  if (t2 instanceof Uint8Array && t2.constructor.name === "Uint8Array")
    return t2;
  if (t2 instanceof ArrayBuffer)
    return new Uint8Array(t2);
  if (ArrayBuffer.isView(t2))
    return new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t2) => new TextEncoder().encode(t2);
var Nr = (t2) => new TextDecoder().decode(t2);
var Lr = class {
  constructor(e3, n6, r4) {
    this.name = e3, this.prefix = n6, this.baseEncode = r4;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e3, n6, r4) {
    if (this.name = e3, this.prefix = n6, n6.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = n6.codePointAt(0), this.baseDecode = r4;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return ze(this, e3);
  }
};
var Hr = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return ze(this, e3);
  }
  decode(e3) {
    const n6 = e3[0], r4 = this.decoders[n6];
    if (r4)
      return r4.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t2, e3) => new Hr({ ...t2.decoders || { [t2.prefix]: t2 }, ...e3.decoders || { [e3.prefix]: e3 } });
var zr = class {
  constructor(e3, n6, r4, o7) {
    this.name = e3, this.prefix = n6, this.baseEncode = r4, this.baseDecode = o7, this.encoder = new Lr(e3, n6, r4), this.decoder = new Or(e3, n6, o7);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Bt = ({ name: t2, prefix: e3, encode: n6, decode: r4 }) => new zr(t2, e3, n6, r4);
var ht = ({ prefix: t2, name: e3, alphabet: n6 }) => {
  const { encode: r4, decode: o7 } = Tr(n6, e3);
  return Bt({ prefix: t2, name: e3, encode: r4, decode: (s4) => He(o7(s4)) });
};
var Mr = (t2, e3, n6, r4) => {
  const o7 = {};
  for (let c8 = 0; c8 < e3.length; ++c8)
    o7[e3[c8]] = c8;
  let s4 = t2.length;
  for (; t2[s4 - 1] === "="; )
    --s4;
  const a4 = new Uint8Array(s4 * n6 / 8 | 0);
  let u5 = 0, i6 = 0, D3 = 0;
  for (let c8 = 0; c8 < s4; ++c8) {
    const l8 = o7[t2[c8]];
    if (l8 === void 0)
      throw new SyntaxError(`Non-${r4} character`);
    i6 = i6 << n6 | l8, u5 += n6, u5 >= 8 && (u5 -= 8, a4[D3++] = 255 & i6 >> u5);
  }
  if (u5 >= n6 || 255 & i6 << 8 - u5)
    throw new SyntaxError("Unexpected end of data");
  return a4;
};
var qr = (t2, e3, n6) => {
  const r4 = e3[e3.length - 1] === "=", o7 = (1 << n6) - 1;
  let s4 = "", a4 = 0, u5 = 0;
  for (let i6 = 0; i6 < t2.length; ++i6)
    for (u5 = u5 << 8 | t2[i6], a4 += 8; a4 > n6; )
      a4 -= n6, s4 += e3[o7 & u5 >> a4];
  if (a4 && (s4 += e3[o7 & u5 << n6 - a4]), r4)
    for (; s4.length * n6 & 7; )
      s4 += "=";
  return s4;
};
var k4 = ({ name: t2, prefix: e3, bitsPerChar: n6, alphabet: r4 }) => Bt({ prefix: e3, name: t2, encode(o7) {
  return qr(o7, r4, n6);
}, decode(o7) {
  return Mr(o7, r4, n6, t2);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t2) => Nr(t2), decode: (t2) => Fr(t2) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t2, e3, n6) => (t2[n6] = e3, t2), []);
var yo = Me.reduce((t2, e3, n6) => (t2[e3.codePointAt(0)] = n6, t2), []);
function xo(t2) {
  return t2.reduce((e3, n6) => (e3 += go[n6], e3), "");
}
function Bo(t2) {
  const e3 = [];
  for (const n6 of t2) {
    const r4 = yo[n6.codePointAt(0)];
    if (r4 === void 0)
      throw new Error(`Non-base256emoji character: ${n6}`);
    e3.push(r4);
  }
  return new Uint8Array(e3);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t2, e3, n6) {
  e3 = e3 || [], n6 = n6 || 0;
  for (var r4 = n6; t2 >= vo; )
    e3[n6++] = t2 & 255 | qe, t2 /= 128;
  for (; t2 & So; )
    e3[n6++] = t2 & 255 | qe, t2 >>>= 7;
  return e3[n6] = t2 | 0, $e.bytes = n6 - r4 + 1, e3;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t2, r4) {
  var n6 = 0, r4 = r4 || 0, o7 = 0, s4 = r4, a4, u5 = t2.length;
  do {
    if (s4 >= u5)
      throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a4 = t2[s4++], n6 += o7 < 28 ? (a4 & ke) << o7 : (a4 & ke) * Math.pow(2, o7), o7 += 7;
  } while (a4 >= Uo);
  return Pt.bytes = s4 - r4, n6;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t2) {
  return t2 < To ? 1 : t2 < Fo ? 2 : t2 < No ? 3 : t2 < Lo ? 4 : t2 < Oo ? 5 : t2 < Ho ? 6 : t2 < zo ? 7 : t2 < Mo ? 8 : t2 < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t2, e3, n6 = 0) => (Re.encode(t2, e3, n6), e3);
var Ze = (t2) => Re.encodingLength(t2);
var Qt = (t2, e3) => {
  const n6 = e3.byteLength, r4 = Ze(t2), o7 = r4 + Ze(n6), s4 = new Uint8Array(o7 + n6);
  return je(t2, s4, 0), je(n6, s4, r4), s4.set(e3, o7), new Ro(t2, n6, e3, s4);
};
var Ro = class {
  constructor(e3, n6, r4, o7) {
    this.code = e3, this.size = n6, this.digest = r4, this.bytes = o7;
  }
};
var Ge = ({ name: t2, code: e3, encode: n6 }) => new jo(t2, e3, n6);
var jo = class {
  constructor(e3, n6, r4) {
    this.name = e3, this.code = n6, this.encode = r4;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const n6 = this.encode(e3);
      return n6 instanceof Uint8Array ? Qt(this.code, n6) : n6.then((r4) => Qt(this.code, r4));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t2) => async (e3) => new Uint8Array(await crypto.subtle.digest(t2, e3));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t2) => Qt(Ye, Je(t2));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t2, e3, n6, r4) {
  return { name: t2, prefix: e3, encoder: { name: t2, prefix: e3, encode: n6 }, decoder: { decode: r4 } };
}
var Xe = We("utf8", "u", (t2) => "u" + new TextDecoder("utf8").decode(t2), (t2) => new TextEncoder().encode(t2.substring(1)));
var te = We("ascii", "a", (t2) => {
  let e3 = "a";
  for (let n6 = 0; n6 < t2.length; n6++)
    e3 += String.fromCharCode(t2[n6]);
  return e3;
}, (t2) => {
  t2 = t2.substring(1);
  const e3 = Le(t2.length);
  for (let n6 = 0; n6 < t2.length; n6++)
    e3[n6] = t2.charCodeAt(n6);
  return e3;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t2, e3 = "utf8") {
  const n6 = Pe[e3];
  if (!n6)
    throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t2.buffer, t2.byteOffset, t2.byteLength).toString("utf8") : n6.encoder.encode(t2).substring(1);
}
function rt(t2, e3 = "utf8") {
  const n6 = Pe[e3];
  if (!n6)
    throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t2, "utf-8")) : n6.decoder.decode(`${n6.prefix}${t2}`);
}
function lt(t2) {
  return safeJsonParse(ct(rt(t2, Dt), Gt));
}
function bt(t2) {
  return ct(rt(safeJsonStringify(t2), Gt), Dt);
}
function Qe(t2) {
  const e3 = rt(Wt, dt), n6 = Kt + ct(Oe([e3, t2]), dt);
  return [Yt, Jt, n6].join(Vt);
}
function en(t2) {
  return ct(t2, Dt);
}
function nn(t2) {
  return rt(t2, Dt);
}
function rn(t2) {
  return rt([bt(t2.header), bt(t2.payload)].join(ut), xt);
}
function on(t2) {
  return [bt(t2.header), bt(t2.payload), en(t2.signature)].join(ut);
}
function sn(t2) {
  const e3 = t2.split(ut), n6 = lt(e3[0]), r4 = lt(e3[1]), o7 = nn(e3[2]), s4 = rt(e3.slice(0, 2).join(ut), xt);
  return { header: n6, payload: r4, signature: o7, data: s4 };
}
function Po(t2 = he(Ne)) {
  const e3 = Rt.getPublicKey(t2);
  return { secretKey: Oe([t2, e3]), publicKey: e3 };
}
async function Qo(t2, e3, n6, r4, o7 = (0, import_time2.fromMiliseconds)(Date.now())) {
  const s4 = { alg: jt, typ: Zt }, a4 = Qe(r4.publicKey), u5 = o7 + n6, i6 = { iss: a4, sub: t2, aud: e3, iat: o7, exp: u5 }, D3 = rn({ header: s4, payload: i6 }), c8 = Rt.sign(D3, r4.secretKey.slice(0, 32));
  return on({ header: s4, payload: i6, signature: c8 });
}

// ../../node_modules/detect-browser/es/index.js
var __spreadArray = function(to3, from13, pack) {
  if (pack || arguments.length === 2)
    for (var i6 = 0, l8 = from13.length, ar4; i6 < l8; i6++) {
      if (ar4 || !(i6 in from13)) {
        if (!ar4)
          ar4 = Array.prototype.slice.call(from13, 0, i6);
        ar4[i6] = from13[i6];
      }
    }
  return to3.concat(ar4 || Array.prototype.slice.call(from13));
};
var BrowserInfo = (
  /** @class */
  function() {
    function BrowserInfo2(name2, version4, os2) {
      this.name = name2;
      this.version = version4;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  function() {
    function NodeInfo2(version4) {
      this.version = version4;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  function() {
    function SearchBotDeviceInfo2(name2, version4, os2, bot) {
      this.name = name2;
      this.version = version4;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  return ua !== "" && userAgentRules.reduce(function(matched, _a) {
    var browser = _a[0], regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version4 = versionParts.join(".");
  var os2 = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version4, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version4, os2);
}
function detectOS(ua) {
  for (var ii3 = 0, count = operatingSystemRules.length; ii3 < count; ii3++) {
    var _a = operatingSystemRules[ii3], os2 = _a[0], regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii3 = 0; ii3 < count; ii3++) {
    output.push("0");
  }
  return output;
}

// ../../node_modules/@walletconnect/utils/dist/index.es.js
var import_time3 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-2CW6YZOF.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r4, s: s4, v: v7, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v7);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r4), hexToBigInt(s4)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    contractAddress: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber(count);
}

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// ../../node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = new Uint8Array(new Array(16).fill(0).map((_4, i6) => i6));
var Pi = Id.map((i6) => (9 * i6 + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i6 = 0; i6 < 4; i6++)
  for (let j4 of [idxL, idxR])
    j4.push(j4[i6].map((k7) => Rho[k7]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i6) => new Uint8Array(i6));
var shiftsL = idxL.map((idx, i6) => idx.map((j4) => shifts[i6][j4]));
var shiftsR = idxR.map((idx, i6) => idx.map((j4) => shifts[i6][j4]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr2 = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f5(group, x6, y7, z6) {
  if (group === 0)
    return x6 ^ y7 ^ z6;
  else if (group === 1)
    return x6 & y7 | ~x6 & z6;
  else if (group === 2)
    return (x6 | ~y7) ^ z6;
  else if (group === 3)
    return x6 & z6 | y7 & ~z6;
  else
    return x6 ^ (y7 | ~z6);
}
var R_BUF = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i6 = 0; i6 < 16; i6++, offset += 4)
      R_BUF[i6] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er4 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr2[group];
      const rl = idxL[group], rr4 = idxR[group];
      const sl = shiftsL[group], sr4 = shiftsR[group];
      for (let i6 = 0; i6 < 16; i6++) {
        const tl = rotl(al + f5(group, bl, cl, dl) + R_BUF[rl[i6]] + hbl, sl[i6]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i6 = 0; i6 < 16; i6++) {
        const tr4 = rotl(ar4 + f5(rGroup, br4, cr4, dr4) + R_BUF[rr4[i6]] + hbr, sr4[i6]) + er4 | 0;
        ar4 = er4, er4 = dr4, dr4 = rotl(cr4, 10) | 0, cr4 = br4, br4 = tr4;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er4 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = wrapConstructor(() => new RIPEMD160());

// ../../node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/version.js
var version = "0.1.1";

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/errors.js
function getVersion2() {
  return version;
}

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Errors.js
var BaseError3 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x6) => typeof x6 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion2()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn3) {
    return walk(this, fn3);
  }
};
function walk(err, fn3) {
  if (fn3 == null ? void 0 : fn3(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk(err.cause, fn3);
  return fn3 ? null : err;
}

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/bytes.js
function assertSize(bytes, size_) {
  if (size2(bytes) > size_)
    throw new SizeOverflowError({
      givenSize: size2(bytes),
      maxSize: size_
    });
}
var charCodeMap = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase16(char) {
  if (char >= charCodeMap.zero && char <= charCodeMap.nine)
    return char - charCodeMap.zero;
  if (char >= charCodeMap.A && char <= charCodeMap.F)
    return char - (charCodeMap.A - 10);
  if (char >= charCodeMap.a && char <= charCodeMap.f)
    return char - (charCodeMap.a - 10);
  return void 0;
}
function pad2(bytes, options = {}) {
  const { dir, size: size8 = 32 } = options;
  if (size8 === 0)
    return bytes;
  if (bytes.length > size8)
    throw new SizeExceedsPaddingSizeError({
      size: bytes.length,
      targetSize: size8,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size8);
  for (let i6 = 0; i6 < size8; i6++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i6 : size8 - i6 - 1] = bytes[padEnd ? i6 : bytes.length - i6 - 1];
  }
  return paddedBytes;
}

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/hex.js
function assertSize2(hex, size_) {
  if (size3(hex) > size_)
    throw new SizeOverflowError2({
      givenSize: size3(hex),
      maxSize: size_
    });
}
function pad3(hex_, options = {}) {
  const { dir, size: size8 = 32 } = options;
  if (size8 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size8 * 2)
    throw new SizeExceedsPaddingSizeError2({
      size: Math.ceil(hex.length / 2),
      targetSize: size8,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size8 * 2, "0")}`;
}

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Bytes.js
var decoder = new TextDecoder();
var encoder = new TextEncoder();
function from(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex2(value);
  return fromArray(value);
}
function fromArray(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex2(value, options = {}) {
  const { size: size8 } = options;
  let hex = value;
  if (size8) {
    assertSize2(value, size8);
    hex = padRight(value, size8);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length2 = hexString.length / 2;
  const bytes = new Uint8Array(length2);
  for (let index2 = 0, j4 = 0; index2 < length2; index2++) {
    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j4++));
    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j4++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError3(`Invalid byte sequence ("${hexString[j4 - 2]}${hexString[j4 - 1]}" in "${hexString}").`);
    }
    bytes[index2] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString(value, options = {}) {
  const { size: size8 } = options;
  const bytes = encoder.encode(value);
  if (typeof size8 === "number") {
    assertSize(bytes, size8);
    return padRight2(bytes, size8);
  }
  return bytes;
}
function padRight2(value, size8) {
  return pad2(value, { dir: "right", size: size8 });
}
function size2(value) {
  return value.length;
}
var SizeOverflowError = class extends BaseError3 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError = class extends BaseError3 {
  constructor({ size: size8, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size8}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Hex.js
var encoder2 = new TextEncoder();
var hexes = Array.from({ length: 256 }, (_v, i6) => i6.toString(16).padStart(2, "0"));
function concat2(...values) {
  return `0x${values.reduce((acc, x6) => acc + x6.replace("0x", ""), "")}`;
}
function fromBoolean(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padLeft(hex, options.size);
  }
  return hex;
}
function fromBytes2(value, options = {}) {
  let string2 = "";
  for (let i6 = 0; i6 < value.length; i6++)
    string2 += hexes[value[i6]];
  const hex = `0x${string2}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padRight(hex, options.size);
  }
  return hex;
}
function fromNumber(value, options = {}) {
  const { signed, size: size8 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size8) {
    if (signed)
      maxValue = (1n << BigInt(size8) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size8) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size8,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size8 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size8)
    return padLeft(hex, size8);
  return hex;
}
function fromString2(value, options = {}) {
  return fromBytes2(encoder2.encode(value), options);
}
function padLeft(value, size8) {
  return pad3(value, { dir: "left", size: size8 });
}
function padRight(value, size8) {
  return pad3(value, { dir: "right", size: size8 });
}
function size3(value) {
  return Math.ceil((value.length - 2) / 2);
}
var IntegerOutOfRangeError = class extends BaseError3 {
  constructor({ max, min, signed, size: size8, value }) {
    super(`Number \`${value}\` is not in safe${size8 ? ` ${size8 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var SizeOverflowError2 = class extends BaseError3 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError2 = class extends BaseError3 {
  constructor({ size: size8, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size8}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes2(bytes);
}

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/lru.js
var LruMap3 = class extends Map {
  constructor(size8) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size8;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap3(8192)
};
var checksum = caches.checksum;

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i6 = 0; i6 < 40; i6 += 2) {
    if (hash[i6 >> 1] >> 4 >= 8 && characters[i6]) {
      characters[i6] = characters[i6].toUpperCase();
    }
    if ((hash[i6 >> 1] & 15) >= 8 && characters[i6 + 1]) {
      characters[i6 + 1] = characters[i6 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError3 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError3 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError3 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size8) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size8 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError3 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError3 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError3 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// ../../node_modules/@walletconnect/utils/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i6 = 0; i6 < types.length; i6++) {
    const type = types[i6];
    const value = values[i6];
    data.push(encodePacked2.encode(type, value));
  }
  return concat2(...data);
}
(function(encodePacked5) {
  function encode11(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size8 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size8,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size8] = bytesMatch;
      if (Number.parseInt(size8) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size8),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i6 = 0; i6 < value.length; i6++) {
        data.push(encode11(childType, value[i6], true));
      }
      if (data.length === 0)
        return "0x";
      return concat2(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked5.encode = encode11;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError3 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size3(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError3 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError3 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// ../../node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j4 = 0; j4 < BASE_MAP.length; j4++) {
    BASE_MAP[j4] = 255;
  }
  for (let i6 = 0; i6 < ALPHABET2.length; i6++) {
    const x6 = ALPHABET2.charAt(i6);
    const xc = x6.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x6 + " is ambiguous");
    }
    BASE_MAP[xc] = i6;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode11(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length2 = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size8 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size8);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i6 = 0;
      for (let it1 = size8 - 1; (carry !== 0 || i6 < length2) && it1 !== -1; it1--, i6++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      pbegin++;
    }
    let it22 = size8 - length2;
    while (it22 !== size8 && b58[it22] === 0) {
      it22++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it22 < size8; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size8 = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size8);
    while (psz < source.length) {
      const charCode = source.charCodeAt(psz);
      if (charCode > 255) {
        return;
      }
      let carry = BASE_MAP[charCode];
      if (carry === 255) {
        return;
      }
      let i6 = 0;
      for (let it32 = size8 - 1; (carry !== 0 || i6 < length2) && it32 !== -1; it32--, i6++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      psz++;
    }
    let it42 = size8 - length2;
    while (it42 !== size8 && b256[it42] === 0) {
      it42++;
    }
    const vch = new Uint8Array(zeroes + (size8 - it42));
    let j4 = zeroes;
    while (it42 !== size8) {
      vch[j4++] = b256[it42++];
    }
    return vch;
  }
  function decode8(string2) {
    const buffer2 = decodeUnsafe(string2);
    if (buffer2) {
      return buffer2;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode: encode11,
    decodeUnsafe,
    decode: decode8
  };
}
var esm_default = base;

// ../../node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// ../../node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size8 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return globalThis.Buffer.allocUnsafe(size8);
  }
  return new Uint8Array(size8);
}

// ../../node_modules/uint8arrays/esm/src/concat.js
function concat3(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return output;
}

// ../../node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// ../../node_modules/multiformats/esm/vendor/base-x.js
function base2(ALPHABET2, name2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j4 = 0; j4 < BASE_MAP.length; j4++) {
    BASE_MAP[j4] = 255;
  }
  for (var i6 = 0; i6 < ALPHABET2.length; i6++) {
    var x6 = ALPHABET2.charAt(i6);
    var xc = x6.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x6 + " is ambiguous");
    }
    BASE_MAP[xc] = i6;
  }
  var BASE = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode11(source) {
    if (source instanceof Uint8Array)
      ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size8 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size8);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i7 = 0;
      for (var it1 = size8 - 1; (carry !== 0 || i7 < length2) && it1 !== -1; it1--, i7++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      pbegin++;
    }
    var it22 = size8 - length2;
    while (it22 !== size8 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size8; ++it22) {
      str += ALPHABET2.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size8 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size8);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i7 = 0;
      for (var it32 = size8 - 1; (carry !== 0 || i7 < length2) && it32 !== -1; it32--, i7++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i7;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it42 = size8 - length2;
    while (it42 !== size8 && b256[it42] === 0) {
      it42++;
    }
    var vch = new Uint8Array(zeroes + (size8 - it42));
    var j5 = zeroes;
    while (it42 !== size8) {
      vch[j5++] = b256[it42++];
    }
    return vch;
  }
  function decode8(string2) {
    var buffer2 = decodeUnsafe(string2);
    if (buffer2) {
      return buffer2;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode11,
    decodeUnsafe,
    decode: decode8
  };
}
var src = base2;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// ../../node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa, bb) => {
  if (aa === bb)
    return true;
  if (aa.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii3 = 0; ii3 < aa.byteLength; ii3++) {
    if (aa[ii3] !== bb[ii3]) {
      return false;
    }
  }
  return true;
};
var coerce = (o7) => {
  if (o7 instanceof Uint8Array && o7.constructor.name === "Uint8Array")
    return o7;
  if (o7 instanceof ArrayBuffer)
    return new Uint8Array(o7);
  if (ArrayBuffer.isView(o7)) {
    return new Uint8Array(o7.buffer, o7.byteOffset, o7.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString3 = (str) => new TextEncoder().encode(str);
var toString2 = (b6) => new TextDecoder().decode(b6);

// ../../node_modules/multiformats/esm/src/bases/base.js
var Encoder = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder3) {
    return or2(this, decoder3);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder3) {
    return or2(this, decoder3);
  }
  decode(input) {
    const prefix = input[0];
    const decoder3 = this.decoders[prefix];
    if (decoder3) {
      return decoder3.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder(name2, prefix, baseEncode);
    this.decoder = new Decoder(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from6 = ({ name: name2, prefix, encode: encode11, decode: decode8 }) => new Codec(name2, prefix, encode11, decode8);
var baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
  const { encode: encode11, decode: decode8 } = base_x_default(alphabet2, name2);
  return from6({
    prefix,
    name: name2,
    encode: encode11,
    decode: (text) => coerce(decode8(text))
  });
};
var decode2 = (string2, alphabet2, bitsPerChar, name2) => {
  const codes = {};
  for (let i6 = 0; i6 < alphabet2.length; ++i6) {
    codes[alphabet2[i6]] = i6;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer2 = 0;
  let written = 0;
  for (let i6 = 0; i6 < end; ++i6) {
    const value = codes[string2[i6]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer2 = buffer2 << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer2 >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode4 = (data, alphabet2, bitsPerChar) => {
  const pad7 = alphabet2[alphabet2.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer2 = 0;
  for (let i6 = 0; i6 < data.length; ++i6) {
    buffer2 = buffer2 << 8 | data[i6];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet2[mask & buffer2 >> bits];
    }
  }
  if (bits) {
    out += alphabet2[mask & buffer2 << bitsPerChar - bits];
  }
  if (pad7) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
  return from6({
    prefix,
    name: name2,
    encode(input) {
      return encode4(input, alphabet2, bitsPerChar);
    },
    decode(input) {
      return decode2(input, alphabet2, bitsPerChar, name2);
    }
  });
};

// ../../node_modules/multiformats/esm/src/bases/identity.js
var identity = from6({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString2(buf),
  decode: (str) => fromString3(str)
});

// ../../node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base22
});
var base22 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// ../../node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// ../../node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// ../../node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base16,
  base16upper: () => base16upper
});
var base16 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// ../../node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base32,
  base32hex: () => base32hex,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base32 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// ../../node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// ../../node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// ../../node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base64,
  base64pad: () => base64pad,
  base64url: () => base64url,
  base64urlpad: () => base64urlpad
});
var base64 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// ../../node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet.reduce((p7, c8, i6) => {
  p7[i6] = c8;
  return p7;
}, []);
var alphabetCharsToBytes = alphabet.reduce((p7, c8, i6) => {
  p7[c8.codePointAt(0)] = i6;
  return p7;
}, []);
function encode5(data) {
  return data.reduce((p7, c8) => {
    p7 += alphabetBytesToChars[c8];
    return p7;
  }, "");
}
function decode3(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from6({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode5,
  decode: decode3
});

// ../../node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2563,
  sha512: () => sha512
});

// ../../node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode6;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode6(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode6.bytes = offset - oldOffset + 1;
  return out;
}
var decode4 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b6, l8 = buf.length;
  do {
    if (counter >= l8) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b6 = buf[counter++];
    res += shift < 28 ? (b6 & REST$1) << shift : (b6 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b6 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode4,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// ../../node_modules/multiformats/esm/src/varint.js
var decode5 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// ../../node_modules/multiformats/esm/src/hashes/digest.js
var create2 = (code2, digest2) => {
  const size8 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size8);
  const bytes = new Uint8Array(digestOffset + size8);
  encodeTo(code2, bytes, 0);
  encodeTo(size8, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size8, digest2, bytes);
};
var decode6 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode5(bytes);
  const [size8, digestOffset] = decode5(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size8) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size8, digest2, bytes);
};
var equals2 = (a4, b6) => {
  if (a4 === b6) {
    return true;
  } else {
    return a4.code === b6.code && a4.size === b6.size && equals(a4.bytes, b6.bytes);
  }
};
var Digest = class {
  constructor(code2, size8, digest2, bytes) {
    this.code = code2;
    this.size = size8;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// ../../node_modules/multiformats/esm/src/hashes/hasher.js
var from7 = ({ name: name2, code: code2, encode: encode11 }) => new Hasher(name2, code2, encode11);
var Hasher = class {
  constructor(name2, code2, encode11) {
    this.name = name2;
    this.code = code2;
    this.encode = encode11;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// ../../node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2563 = from7({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha512 = from7({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// ../../node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode7 = coerce;
var digest = (input) => create2(code, encode7(input));
var identity2 = {
  code,
  name,
  encode: encode7,
  digest
};

// ../../node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// ../../node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version4, code2, multihash, bytes) {
    this.code = code2;
    this.version = version4;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create2(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version4, _baseCache } = this;
    switch (version4) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base32.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version4, code: code2, multihash, bytes } = value;
      return new _CID(version4, code2, multihash, bytes || encodeCID(version4, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version4, multihash, code: code2 } = value;
      const digest2 = decode6(multihash);
      return _CID.create(version4, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version4, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version4) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version4, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version4, code2, digest2.bytes);
        return new _CID(version4, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i6, length2] = decode5(initialBytes.subarray(offset));
      offset += length2;
      return i6;
    };
    let version4 = next();
    let codec = DAG_PB_CODE;
    if (version4 === 18) {
      version4 = 0;
      offset = 0;
    } else if (version4 === 1) {
      codec = next();
    }
    if (version4 !== 0 && version4 !== 1) {
      throw new RangeError(`Invalid CID version ${version4}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size8 = offset + digestSize;
    const multihashSize = size8 - prefixSize;
    return {
      version: version4,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size8
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder3 = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder3.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder3 = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder3.decode(source)
      ];
    }
    case base32.prefix: {
      const decoder3 = base3 || base32;
      return [
        base32.prefix,
        decoder3.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version4, code2, multihash) => {
  const codeOffset = encodingLength(version4);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version4, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version2 = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version2)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// ../../node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// ../../node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode11, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode11
    },
    decoder: { decode: decode8 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder3 = new TextDecoder("utf8");
  return "u" + decoder3.decode(buf);
}, (str) => {
  const encoder5 = new TextEncoder();
  return encoder5.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i6 = 0; i6 < buf.length; i6++) {
    string2 += String.fromCharCode(buf[i6]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i6 = 0; i6 < str.length; i6++) {
    buf[i6] = str.charCodeAt(i6);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// ../../node_modules/uint8arrays/esm/src/from-string.js
function fromString4(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(string2, "utf8");
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// ../../node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// ../../node_modules/@walletconnect/utils/dist/index.es.js
var import_elliptic = __toESM(require_elliptic());

// ../../node_modules/@walletconnect/relay-api/dist/index.es.js
var C2 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// ../../node_modules/@walletconnect/utils/dist/index.es.js
var Pe2 = ":";
function Ye2(e3) {
  const [t2, n6] = e3.split(Pe2);
  return { namespace: t2, reference: n6 };
}
function Be2(e3, t2) {
  return e3.includes(":") ? [e3] : t2.chains || [];
}
var Ft2 = "ReactNative";
var H2 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var Gt2 = "js";
function et() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function ne() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === Ft2;
}
function zr2() {
  return ne() && typeof globalThis < "u" && typeof (globalThis == null ? void 0 : globalThis.Platform) < "u" && (globalThis == null ? void 0 : globalThis.Platform.OS) === "android";
}
function Jr2() {
  return ne() && typeof globalThis < "u" && typeof (globalThis == null ? void 0 : globalThis.Platform) < "u" && (globalThis == null ? void 0 : globalThis.Platform.OS) === "ios";
}
function Ae2() {
  return !et() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function ue() {
  return ne() ? H2.reactNative : et() ? H2.node : Ae2() ? H2.browser : H2.unknown;
}
function Yr2() {
  var e3;
  try {
    return ne() && typeof globalThis < "u" && typeof (globalThis == null ? void 0 : globalThis.Application) < "u" ? (e3 = globalThis.Application) == null ? void 0 : e3.applicationId : void 0;
  } catch {
    return;
  }
}
function Wt2(e3, t2) {
  const n6 = new URLSearchParams(e3);
  for (const r4 of Object.keys(t2).sort())
    if (t2.hasOwnProperty(r4)) {
      const o7 = t2[r4];
      o7 !== void 0 && n6.set(r4, o7);
    }
  return n6.toString();
}
function Xr2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function zt2() {
  if (ue() === H2.reactNative && typeof globalThis < "u" && typeof (globalThis == null ? void 0 : globalThis.Platform) < "u") {
    const { OS: n6, Version: r4 } = globalThis.Platform;
    return [n6, r4].join("-");
  }
  const e3 = detect();
  if (e3 === null)
    return "unknown";
  const t2 = e3.os ? e3.os.replace(" ", "").toLowerCase() : "unknown";
  return e3.type === "browser" ? [t2, e3.name, e3.version].join("-") : [t2, e3.version].join("-");
}
function Jt2() {
  var e3;
  const t2 = ue();
  return t2 === H2.browser ? [t2, ((e3 = (0, import_window_getters.getLocation)()) == null ? void 0 : e3.host) || "unknown"].join(":") : t2;
}
function Yt2(e3, t2, n6) {
  const r4 = zt2(), o7 = Jt2();
  return [[e3, t2].join("-"), [Gt2, n6].join("-"), r4, o7].join("/");
}
function Qr2({ protocol: e3, version: t2, relayUrl: n6, sdkVersion: r4, auth: o7, projectId: s4, useOnCloseEvent: i6, bundleId: c8, packageName: u5 }) {
  const a4 = n6.split("?"), l8 = Yt2(e3, t2, r4), f9 = { auth: o7, ua: l8, projectId: s4, useOnCloseEvent: i6 || void 0, packageName: u5 || void 0, bundleId: c8 || void 0 }, d6 = Wt2(a4[1] || "", f9);
  return a4[0] + "?" + d6;
}
function re(e3, t2) {
  return e3.filter((n6) => t2.includes(n6)).length === e3.length;
}
function ro2(e3) {
  return Object.fromEntries(e3.entries());
}
function oo2(e3) {
  return new Map(Object.entries(e3));
}
function ao2(e3 = import_time3.FIVE_MINUTES, t2) {
  const n6 = (0, import_time3.toMiliseconds)(e3 || import_time3.FIVE_MINUTES);
  let r4, o7, s4, i6;
  return { resolve: (c8) => {
    s4 && r4 && (clearTimeout(s4), r4(c8), i6 = Promise.resolve(c8));
  }, reject: (c8) => {
    s4 && o7 && (clearTimeout(s4), o7(c8));
  }, done: () => new Promise((c8, u5) => {
    if (i6)
      return c8(i6);
    s4 = setTimeout(() => {
      const a4 = new Error(t2);
      i6 = Promise.reject(a4), u5(a4);
    }, n6), r4 = c8, o7 = u5;
  }) };
}
function uo2(e3, t2, n6) {
  return new Promise(async (r4, o7) => {
    const s4 = setTimeout(() => o7(new Error(n6)), t2);
    try {
      const i6 = await e3;
      r4(i6);
    } catch (i6) {
      o7(i6);
    }
    clearTimeout(s4);
  });
}
function tt(e3, t2) {
  if (typeof t2 == "string" && t2.startsWith(`${e3}:`))
    return t2;
  if (e3.toLowerCase() === "topic") {
    if (typeof t2 != "string")
      throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${t2}`;
  } else if (e3.toLowerCase() === "id") {
    if (typeof t2 != "number")
      throw new Error('Value must be "number" for expirer target type: id');
    return `id:${t2}`;
  }
  throw new Error(`Unknown expirer target type: ${e3}`);
}
function fo2(e3) {
  return tt("topic", e3);
}
function lo2(e3) {
  return tt("id", e3);
}
function ho2(e3) {
  const [t2, n6] = e3.split(":"), r4 = { id: void 0, topic: void 0 };
  if (t2 === "topic" && typeof n6 == "string")
    r4.topic = n6;
  else if (t2 === "id" && Number.isInteger(Number(n6)))
    r4.id = Number(n6);
  else
    throw new Error(`Invalid target, expected id:number or topic:string, got ${t2}:${n6}`);
  return r4;
}
function po2(e3, t2) {
  return (0, import_time3.fromMiliseconds)((t2 || Date.now()) + (0, import_time3.toMiliseconds)(e3));
}
function go2(e3) {
  return Date.now() >= (0, import_time3.toMiliseconds)(e3);
}
function yo2(e3, t2) {
  return `${e3}${t2 ? `:${t2}` : ""}`;
}
function Q2(e3 = [], t2 = []) {
  return [.../* @__PURE__ */ new Set([...e3, ...t2])];
}
async function mo2({ id: e3, topic: t2, wcDeepLink: n6 }) {
  var r4;
  try {
    if (!n6)
      return;
    const o7 = typeof n6 == "string" ? JSON.parse(n6) : n6, s4 = o7 == null ? void 0 : o7.href;
    if (typeof s4 != "string")
      return;
    const i6 = en2(s4, e3, t2), c8 = ue();
    if (c8 === H2.browser) {
      if (!((r4 = (0, import_window_getters.getDocument)()) != null && r4.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      tn(i6);
    } else
      c8 === H2.reactNative && typeof (globalThis == null ? void 0 : globalThis.Linking) < "u" && await globalThis.Linking.openURL(i6);
  } catch (o7) {
    console.error(o7);
  }
}
function en2(e3, t2, n6) {
  const r4 = `requestId=${t2}&sessionTopic=${n6}`;
  e3.endsWith("/") && (e3 = e3.slice(0, -1));
  let o7 = `${e3}`;
  if (e3.startsWith("https://t.me")) {
    const s4 = e3.includes("?") ? "&startapp=" : "?startapp=";
    o7 = `${o7}${s4}${on2(r4, true)}`;
  } else
    o7 = `${o7}/wc?${r4}`;
  return o7;
}
function tn(e3) {
  let t2 = "_self";
  rn2() ? t2 = "_top" : (nn2() || e3.startsWith("https://") || e3.startsWith("http://")) && (t2 = "_blank"), window.open(e3, t2, "noreferrer noopener");
}
async function bo2(e3, t2) {
  let n6 = "";
  try {
    if (Ae2() && (n6 = localStorage.getItem(t2), n6))
      return n6;
    n6 = await e3.getItem(t2);
  } catch (r4) {
    console.error(r4);
  }
  return n6;
}
function wo2(e3, t2) {
  if (!e3.includes(t2))
    return null;
  const n6 = e3.split(/([&,?,=])/), r4 = n6.indexOf(t2);
  return n6[r4 + 2];
}
function Eo2() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (e3) => {
    const t2 = Math.random() * 16 | 0;
    return (e3 === "x" ? t2 : t2 & 3 | 8).toString(16);
  });
}
function vo2() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function nn2() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function rn2() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function on2(e3, t2 = false) {
  const n6 = Buffer.from(e3).toString("base64");
  return t2 ? n6.replace(/[=]/g, "") : n6;
}
function rt2(e3) {
  return Buffer.from(e3, "base64").toString("utf-8");
}
function xo2(e3) {
  return new Promise((t2) => setTimeout(t2, e3));
}
function Ne2(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0)
    throw new Error("positive integer expected, got " + e3);
}
function Io2(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function je2(e3, ...t2) {
  if (!Io2(e3))
    throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length))
    throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function ot(e3) {
  if (typeof e3 != "function" || typeof e3.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Ne2(e3.outputLen), Ne2(e3.blockLen);
}
function me2(e3, t2 = true) {
  if (e3.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished)
    throw new Error("Hash#digest() has already been called");
}
function sn2(e3, t2) {
  je2(e3);
  const n6 = t2.outputLen;
  if (e3.length < n6)
    throw new Error("digestInto() expects output buffer of length at least " + n6);
}
var Ce2 = BigInt(2 ** 32 - 1);
var cn = BigInt(32);
function Oo2(e3, t2 = false) {
  return t2 ? { h: Number(e3 & Ce2), l: Number(e3 >> cn & Ce2) } : { h: Number(e3 >> cn & Ce2) | 0, l: Number(e3 & Ce2) | 0 };
}
function Ao2(e3, t2 = false) {
  let n6 = new Uint32Array(e3.length), r4 = new Uint32Array(e3.length);
  for (let o7 = 0; o7 < e3.length; o7++) {
    const { h: s4, l: i6 } = Oo2(e3[o7], t2);
    [n6[o7], r4[o7]] = [s4, i6];
  }
  return [n6, r4];
}
var No2 = (e3, t2, n6) => e3 << n6 | t2 >>> 32 - n6;
var So2 = (e3, t2, n6) => t2 << n6 | e3 >>> 32 - n6;
var Uo2 = (e3, t2, n6) => t2 << n6 - 32 | e3 >>> 64 - n6;
var _o2 = (e3, t2, n6) => e3 << n6 - 32 | t2 >>> 64 - n6;
var be2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function To2(e3) {
  return new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
}
function st(e3) {
  return new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
}
function J3(e3, t2) {
  return e3 << 32 - t2 | e3 >>> t2;
}
var an = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function $o2(e3) {
  return e3 << 24 & 4278190080 | e3 << 8 & 16711680 | e3 >>> 8 & 65280 | e3 >>> 24 & 255;
}
function un(e3) {
  for (let t2 = 0; t2 < e3.length; t2++)
    e3[t2] = $o2(e3[t2]);
}
function Ro2(e3) {
  if (typeof e3 != "string")
    throw new Error("utf8ToBytes expected string, got " + typeof e3);
  return new Uint8Array(new TextEncoder().encode(e3));
}
function we2(e3) {
  return typeof e3 == "string" && (e3 = Ro2(e3)), je2(e3), e3;
}
var it2 = class {
  clone() {
    return this._cloneInto();
  }
};
function fn(e3) {
  const t2 = (r4) => e3().update(we2(r4)).digest(), n6 = e3();
  return t2.outputLen = n6.outputLen, t2.blockLen = n6.blockLen, t2.create = () => e3(), t2;
}
function Se2(e3 = 32) {
  if (be2 && typeof be2.getRandomValues == "function")
    return be2.getRandomValues(new Uint8Array(e3));
  if (be2 && typeof be2.randomBytes == "function")
    return be2.randomBytes(e3);
  throw new Error("crypto.getRandomValues must be defined");
}
var ln = [];
var dn = [];
var hn = [];
var Po2 = BigInt(0);
var Ue2 = BigInt(1);
var Bo2 = BigInt(2);
var Lo2 = BigInt(7);
var jo2 = BigInt(256);
var Co2 = BigInt(113);
for (let e3 = 0, t2 = Ue2, n6 = 1, r4 = 0; e3 < 24; e3++) {
  [n6, r4] = [r4, (2 * n6 + 3 * r4) % 5], ln.push(2 * (5 * r4 + n6)), dn.push((e3 + 1) * (e3 + 2) / 2 % 64);
  let o7 = Po2;
  for (let s4 = 0; s4 < 7; s4++)
    t2 = (t2 << Ue2 ^ (t2 >> Lo2) * Co2) % jo2, t2 & Bo2 && (o7 ^= Ue2 << (Ue2 << BigInt(s4)) - Ue2);
  hn.push(o7);
}
var [ko2, Do2] = Ao2(hn, true);
var pn = (e3, t2, n6) => n6 > 32 ? Uo2(e3, t2, n6) : No2(e3, t2, n6);
var gn2 = (e3, t2, n6) => n6 > 32 ? _o2(e3, t2, n6) : So2(e3, t2, n6);
function Mo2(e3, t2 = 24) {
  const n6 = new Uint32Array(10);
  for (let r4 = 24 - t2; r4 < 24; r4++) {
    for (let i6 = 0; i6 < 10; i6++)
      n6[i6] = e3[i6] ^ e3[i6 + 10] ^ e3[i6 + 20] ^ e3[i6 + 30] ^ e3[i6 + 40];
    for (let i6 = 0; i6 < 10; i6 += 2) {
      const c8 = (i6 + 8) % 10, u5 = (i6 + 2) % 10, a4 = n6[u5], l8 = n6[u5 + 1], f9 = pn(a4, l8, 1) ^ n6[c8], d6 = gn2(a4, l8, 1) ^ n6[c8 + 1];
      for (let g5 = 0; g5 < 50; g5 += 10)
        e3[i6 + g5] ^= f9, e3[i6 + g5 + 1] ^= d6;
    }
    let o7 = e3[2], s4 = e3[3];
    for (let i6 = 0; i6 < 24; i6++) {
      const c8 = dn[i6], u5 = pn(o7, s4, c8), a4 = gn2(o7, s4, c8), l8 = ln[i6];
      o7 = e3[l8], s4 = e3[l8 + 1], e3[l8] = u5, e3[l8 + 1] = a4;
    }
    for (let i6 = 0; i6 < 50; i6 += 10) {
      for (let c8 = 0; c8 < 10; c8++)
        n6[c8] = e3[i6 + c8];
      for (let c8 = 0; c8 < 10; c8++)
        e3[i6 + c8] ^= ~n6[(c8 + 2) % 10] & n6[(c8 + 4) % 10];
    }
    e3[0] ^= ko2[r4], e3[1] ^= Do2[r4];
  }
  n6.fill(0);
}
var Lt2 = class _Lt extends it2 {
  constructor(t2, n6, r4, o7 = false, s4 = 24) {
    if (super(), this.blockLen = t2, this.suffix = n6, this.outputLen = r4, this.enableXOF = o7, this.rounds = s4, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Ne2(r4), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = To2(this.state);
  }
  keccak() {
    an || un(this.state32), Mo2(this.state32, this.rounds), an || un(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(t2) {
    me2(this);
    const { blockLen: n6, state: r4 } = this;
    t2 = we2(t2);
    const o7 = t2.length;
    for (let s4 = 0; s4 < o7; ) {
      const i6 = Math.min(n6 - this.pos, o7 - s4);
      for (let c8 = 0; c8 < i6; c8++)
        r4[this.pos++] ^= t2[s4++];
      this.pos === n6 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: t2, suffix: n6, pos: r4, blockLen: o7 } = this;
    t2[r4] ^= n6, (n6 & 128) !== 0 && r4 === o7 - 1 && this.keccak(), t2[o7 - 1] ^= 128, this.keccak();
  }
  writeInto(t2) {
    me2(this, false), je2(t2), this.finish();
    const n6 = this.state, { blockLen: r4 } = this;
    for (let o7 = 0, s4 = t2.length; o7 < s4; ) {
      this.posOut >= r4 && this.keccak();
      const i6 = Math.min(r4 - this.posOut, s4 - o7);
      t2.set(n6.subarray(this.posOut, this.posOut + i6), o7), this.posOut += i6, o7 += i6;
    }
    return t2;
  }
  xofInto(t2) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(t2);
  }
  xof(t2) {
    return Ne2(t2), this.xofInto(new Uint8Array(t2));
  }
  digestInto(t2) {
    if (sn2(t2, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(t2), this.destroy(), t2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(t2) {
    const { blockLen: n6, suffix: r4, outputLen: o7, rounds: s4, enableXOF: i6 } = this;
    return t2 || (t2 = new _Lt(n6, r4, o7, i6, s4)), t2.state32.set(this.state32), t2.pos = this.pos, t2.posOut = this.posOut, t2.finished = this.finished, t2.rounds = s4, t2.suffix = r4, t2.outputLen = o7, t2.enableXOF = i6, t2.destroyed = this.destroyed, t2;
  }
};
var Vo2 = (e3, t2, n6) => fn(() => new Lt2(t2, e3, n6));
var Ho2 = Vo2(1, 136, 256 / 8);
var Ko2 = "https://rpc.walletconnect.org/v1";
function ct2(e3) {
  const t2 = `Ethereum Signed Message:
${e3.length}`, n6 = new TextEncoder().encode(t2 + e3);
  return "0x" + Buffer.from(Ho2(n6)).toString("hex");
}
async function yn2(e3, t2, n6, r4, o7, s4) {
  switch (n6.t) {
    case "eip191":
      return await mn2(e3, t2, n6.s);
    case "eip1271":
      return await bn2(e3, t2, n6.s, r4, o7, s4);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n6.t}`);
  }
}
async function mn2(e3, t2, n6) {
  return (await recoverAddress({ hash: ct2(t2), signature: n6 })).toLowerCase() === e3.toLowerCase();
}
async function bn2(e3, t2, n6, r4, o7, s4) {
  const i6 = Ye2(r4);
  if (!i6.namespace || !i6.reference)
    throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r4}`);
  try {
    const c8 = "0x1626ba7e", u5 = "0000000000000000000000000000000000000000000000000000000000000040", a4 = "0000000000000000000000000000000000000000000000000000000000000041", l8 = n6.substring(2), f9 = ct2(t2).substring(2), d6 = c8 + f9 + u5 + a4 + l8, g5 = await fetch(`${s4 || Ko2}/?chainId=${r4}&projectId=${o7}`, { method: "POST", body: JSON.stringify({ id: Fo2(), jsonrpc: "2.0", method: "eth_call", params: [{ to: e3, data: d6 }, "latest"] }) }), { result: y7 } = await g5.json();
    return y7 ? y7.slice(0, c8.length).toLowerCase() === c8.toLowerCase() : false;
  } catch (c8) {
    return console.error("isValidEip1271Signature: ", c8), false;
  }
}
function Fo2() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function qo2(e3) {
  const t2 = atob(e3), n6 = new Uint8Array(t2.length);
  for (let i6 = 0; i6 < t2.length; i6++)
    n6[i6] = t2.charCodeAt(i6);
  const r4 = n6[0];
  if (r4 === 0)
    throw new Error("No signatures found");
  const o7 = 1 + r4 * 64;
  if (n6.length < o7)
    throw new Error("Transaction data too short for claimed signature count");
  if (n6.length < 100)
    throw new Error("Transaction too short");
  const s4 = Buffer.from(e3, "base64").slice(1, 65);
  return esm_default2.encode(s4);
}
var Go2 = Object.defineProperty;
var Wo2 = Object.defineProperties;
var zo2 = Object.getOwnPropertyDescriptors;
var wn = Object.getOwnPropertySymbols;
var Jo2 = Object.prototype.hasOwnProperty;
var Yo2 = Object.prototype.propertyIsEnumerable;
var En2 = (e3, t2, n6) => t2 in e3 ? Go2(e3, t2, { enumerable: true, configurable: true, writable: true, value: n6 }) : e3[t2] = n6;
var at = (e3, t2) => {
  for (var n6 in t2 || (t2 = {}))
    Jo2.call(t2, n6) && En2(e3, n6, t2[n6]);
  if (wn)
    for (var n6 of wn(t2))
      Yo2.call(t2, n6) && En2(e3, n6, t2[n6]);
  return e3;
};
var vn2 = (e3, t2) => Wo2(e3, zo2(t2));
var Xo = "did:pkh:";
var ke2 = (e3) => e3 == null ? void 0 : e3.split(":");
var xn2 = (e3) => {
  const t2 = e3 && ke2(e3);
  if (t2)
    return e3.includes(Xo) ? t2[3] : t2[1];
};
var In2 = (e3) => {
  const t2 = e3 && ke2(e3);
  if (t2)
    return t2[2] + ":" + t2[3];
};
var ut2 = (e3) => {
  const t2 = e3 && ke2(e3);
  if (t2)
    return t2.pop();
};
async function Zo2(e3) {
  const { cacao: t2, projectId: n6 } = e3, { s: r4, p: o7 } = t2, s4 = On2(o7, o7.iss), i6 = ut2(o7.iss);
  return await yn2(i6, s4, r4, In2(o7.iss), n6);
}
var On2 = (e3, t2) => {
  const n6 = `${e3.domain} wants you to sign in with your Ethereum account:`, r4 = ut2(t2);
  if (!e3.aud && !e3.uri)
    throw new Error("Either `aud` or `uri` is required to construct the message");
  let o7 = e3.statement || void 0;
  const s4 = `URI: ${e3.aud || e3.uri}`, i6 = `Version: ${e3.version}`, c8 = `Chain ID: ${xn2(t2)}`, u5 = `Nonce: ${e3.nonce}`, a4 = `Issued At: ${e3.iat}`, l8 = e3.exp ? `Expiration Time: ${e3.exp}` : void 0, f9 = e3.nbf ? `Not Before: ${e3.nbf}` : void 0, d6 = e3.requestId ? `Request ID: ${e3.requestId}` : void 0, g5 = e3.resources ? `Resources:${e3.resources.map((h6) => `
- ${h6}`).join("")}` : void 0, y7 = Me2(e3.resources);
  if (y7) {
    const h6 = oe(y7);
    o7 = dt2(o7, h6);
  }
  return [n6, r4, "", o7, "", s4, i6, c8, u5, a4, l8, f9, d6, g5].filter((h6) => h6 != null).join(`
`);
};
function Un2(e3) {
  return Buffer.from(JSON.stringify(e3)).toString("base64");
}
function _n2(e3) {
  return JSON.parse(Buffer.from(e3, "base64").toString("utf-8"));
}
function Y(e3) {
  if (!e3)
    throw new Error("No recap provided, value is undefined");
  if (!e3.att)
    throw new Error("No `att` property found");
  const t2 = Object.keys(e3.att);
  if (!(t2 != null && t2.length))
    throw new Error("No resources found in `att` property");
  t2.forEach((n6) => {
    const r4 = e3.att[n6];
    if (Array.isArray(r4))
      throw new Error(`Resource must be an object: ${n6}`);
    if (typeof r4 != "object")
      throw new Error(`Resource must be an object: ${n6}`);
    if (!Object.keys(r4).length)
      throw new Error(`Resource object is empty: ${n6}`);
    Object.keys(r4).forEach((o7) => {
      const s4 = r4[o7];
      if (!Array.isArray(s4))
        throw new Error(`Ability limits ${o7} must be an array of objects, found: ${s4}`);
      if (!s4.length)
        throw new Error(`Value of ${o7} is empty array, must be an array with objects`);
      s4.forEach((i6) => {
        if (typeof i6 != "object")
          throw new Error(`Ability limits (${o7}) must be an array of objects, found: ${i6}`);
      });
    });
  });
}
function Tn2(e3, t2, n6, r4 = {}) {
  return n6 == null ? void 0 : n6.sort((o7, s4) => o7.localeCompare(s4)), { att: { [e3]: ft2(t2, n6, r4) } };
}
function ft2(e3, t2, n6 = {}) {
  t2 = t2 == null ? void 0 : t2.sort((o7, s4) => o7.localeCompare(s4));
  const r4 = t2.map((o7) => ({ [`${e3}/${o7}`]: [n6] }));
  return Object.assign({}, ...r4);
}
function De2(e3) {
  return Y(e3), `urn:recap:${Un2(e3).replace(/=/g, "")}`;
}
function oe(e3) {
  const t2 = _n2(e3.replace("urn:recap:", ""));
  return Y(t2), t2;
}
function rs(e3, t2, n6) {
  const r4 = Tn2(e3, t2, n6);
  return De2(r4);
}
function lt2(e3) {
  return e3 && e3.includes("urn:recap:");
}
function os(e3, t2) {
  const n6 = oe(e3), r4 = oe(t2), o7 = Rn2(n6, r4);
  return De2(o7);
}
function Rn2(e3, t2) {
  Y(e3), Y(t2);
  const n6 = Object.keys(e3.att).concat(Object.keys(t2.att)).sort((o7, s4) => o7.localeCompare(s4)), r4 = { att: {} };
  return n6.forEach((o7) => {
    var s4, i6;
    Object.keys(((s4 = e3.att) == null ? void 0 : s4[o7]) || {}).concat(Object.keys(((i6 = t2.att) == null ? void 0 : i6[o7]) || {})).sort((c8, u5) => c8.localeCompare(u5)).forEach((c8) => {
      var u5, a4;
      r4.att[o7] = vn2(at({}, r4.att[o7]), { [c8]: ((u5 = e3.att[o7]) == null ? void 0 : u5[c8]) || ((a4 = t2.att[o7]) == null ? void 0 : a4[c8]) });
    });
  }), r4;
}
function dt2(e3 = "", t2) {
  Y(t2);
  const n6 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (e3.includes(n6))
    return e3;
  const r4 = [];
  let o7 = 0;
  Object.keys(t2.att).forEach((c8) => {
    const u5 = Object.keys(t2.att[c8]).map((f9) => ({ ability: f9.split("/")[0], action: f9.split("/")[1] }));
    u5.sort((f9, d6) => f9.action.localeCompare(d6.action));
    const a4 = {};
    u5.forEach((f9) => {
      a4[f9.ability] || (a4[f9.ability] = []), a4[f9.ability].push(f9.action);
    });
    const l8 = Object.keys(a4).map((f9) => (o7++, `(${o7}) '${f9}': '${a4[f9].join("', '")}' for '${c8}'.`));
    r4.push(l8.join(", ").replace(".,", "."));
  });
  const s4 = r4.join(" "), i6 = `${n6}${s4}`;
  return `${e3 ? e3 + " " : ""}${i6}`;
}
function ss(e3) {
  var t2;
  const n6 = oe(e3);
  Y(n6);
  const r4 = (t2 = n6.att) == null ? void 0 : t2.eip155;
  return r4 ? Object.keys(r4).map((o7) => o7.split("/")[1]) : [];
}
function is(e3) {
  const t2 = oe(e3);
  Y(t2);
  const n6 = [];
  return Object.values(t2.att).forEach((r4) => {
    Object.values(r4).forEach((o7) => {
      var s4;
      (s4 = o7 == null ? void 0 : o7[0]) != null && s4.chains && n6.push(o7[0].chains);
    });
  }), [...new Set(n6.flat())];
}
function Me2(e3) {
  if (!e3)
    return;
  const t2 = e3 == null ? void 0 : e3[e3.length - 1];
  return lt2(t2) ? t2 : void 0;
}
function ht2(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0)
    throw new Error("positive integer expected, got " + e3);
}
function Bn2(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function F(e3, ...t2) {
  if (!Bn2(e3))
    throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length))
    throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function Ln2(e3, t2 = true) {
  if (e3.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished)
    throw new Error("Hash#digest() has already been called");
}
function cs(e3, t2) {
  F(e3);
  const n6 = t2.outputLen;
  if (e3.length < n6)
    throw new Error("digestInto() expects output buffer of length at least " + n6);
}
function jn2(e3) {
  if (typeof e3 != "boolean")
    throw new Error(`boolean expected, not ${e3}`);
}
var se = (e3) => new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
var as = (e3) => new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
var us = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!us)
  throw new Error("Non little-endian hardware is not supported");
function fs(e3) {
  if (typeof e3 != "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(e3));
}
function pt(e3) {
  if (typeof e3 == "string")
    e3 = fs(e3);
  else if (Bn2(e3))
    e3 = gt2(e3);
  else
    throw new Error("Uint8Array expected, got " + typeof e3);
  return e3;
}
function ls(e3, t2) {
  if (t2 == null || typeof t2 != "object")
    throw new Error("options must be defined");
  return Object.assign(e3, t2);
}
function ds(e3, t2) {
  if (e3.length !== t2.length)
    return false;
  let n6 = 0;
  for (let r4 = 0; r4 < e3.length; r4++)
    n6 |= e3[r4] ^ t2[r4];
  return n6 === 0;
}
var hs = (e3, t2) => {
  function n6(r4, ...o7) {
    if (F(r4), e3.nonceLength !== void 0) {
      const l8 = o7[0];
      if (!l8)
        throw new Error("nonce / iv required");
      e3.varSizeNonce ? F(l8) : F(l8, e3.nonceLength);
    }
    const s4 = e3.tagLength;
    s4 && o7[1] !== void 0 && F(o7[1]);
    const i6 = t2(r4, ...o7), c8 = (l8, f9) => {
      if (f9 !== void 0) {
        if (l8 !== 2)
          throw new Error("cipher output not supported");
        F(f9);
      }
    };
    let u5 = false;
    return { encrypt(l8, f9) {
      if (u5)
        throw new Error("cannot encrypt() twice with same key + nonce");
      return u5 = true, F(l8), c8(i6.encrypt.length, f9), i6.encrypt(l8, f9);
    }, decrypt(l8, f9) {
      if (F(l8), s4 && l8.length < s4)
        throw new Error("invalid ciphertext length: smaller than tagLength=" + s4);
      return c8(i6.decrypt.length, f9), i6.decrypt(l8, f9);
    } };
  }
  return Object.assign(n6, e3), n6;
};
function Cn2(e3, t2, n6 = true) {
  if (t2 === void 0)
    return new Uint8Array(e3);
  if (t2.length !== e3)
    throw new Error("invalid output length, expected " + e3 + ", got: " + t2.length);
  if (n6 && !ps(t2))
    throw new Error("invalid output, must be aligned");
  return t2;
}
function kn2(e3, t2, n6, r4) {
  if (typeof e3.setBigUint64 == "function")
    return e3.setBigUint64(t2, n6, r4);
  const o7 = BigInt(32), s4 = BigInt(4294967295), i6 = Number(n6 >> o7 & s4), c8 = Number(n6 & s4), u5 = r4 ? 4 : 0, a4 = r4 ? 0 : 4;
  e3.setUint32(t2 + u5, i6, r4), e3.setUint32(t2 + a4, c8, r4);
}
function ps(e3) {
  return e3.byteOffset % 4 === 0;
}
function gt2(e3) {
  return Uint8Array.from(e3);
}
function Ee2(...e3) {
  for (let t2 = 0; t2 < e3.length; t2++)
    e3[t2].fill(0);
}
var Dn = (e3) => Uint8Array.from(e3.split("").map((t2) => t2.charCodeAt(0)));
var gs = Dn("expand 16-byte k");
var ys = Dn("expand 32-byte k");
var ms = se(gs);
var bs = se(ys);
function x4(e3, t2) {
  return e3 << t2 | e3 >>> 32 - t2;
}
function yt2(e3) {
  return e3.byteOffset % 4 === 0;
}
var Ve2 = 64;
var ws = 16;
var Mn2 = 2 ** 32 - 1;
var Vn2 = new Uint32Array();
function Es(e3, t2, n6, r4, o7, s4, i6, c8) {
  const u5 = o7.length, a4 = new Uint8Array(Ve2), l8 = se(a4), f9 = yt2(o7) && yt2(s4), d6 = f9 ? se(o7) : Vn2, g5 = f9 ? se(s4) : Vn2;
  for (let y7 = 0; y7 < u5; i6++) {
    if (e3(t2, n6, r4, l8, i6, c8), i6 >= Mn2)
      throw new Error("arx: counter overflow");
    const h6 = Math.min(Ve2, u5 - y7);
    if (f9 && h6 === Ve2) {
      const m4 = y7 / 4;
      if (y7 % 4 !== 0)
        throw new Error("arx: invalid block position");
      for (let L5 = 0, b6; L5 < ws; L5++)
        b6 = m4 + L5, g5[b6] = d6[b6] ^ l8[L5];
      y7 += Ve2;
      continue;
    }
    for (let m4 = 0, L5; m4 < h6; m4++)
      L5 = y7 + m4, s4[L5] = o7[L5] ^ a4[m4];
    y7 += h6;
  }
}
function vs(e3, t2) {
  const { allowShortKeys: n6, extendNonceFn: r4, counterLength: o7, counterRight: s4, rounds: i6 } = ls({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, t2);
  if (typeof e3 != "function")
    throw new Error("core must be a function");
  return ht2(o7), ht2(i6), jn2(s4), jn2(n6), (c8, u5, a4, l8, f9 = 0) => {
    F(c8), F(u5), F(a4);
    const d6 = a4.length;
    if (l8 === void 0 && (l8 = new Uint8Array(d6)), F(l8), ht2(f9), f9 < 0 || f9 >= Mn2)
      throw new Error("arx: counter overflow");
    if (l8.length < d6)
      throw new Error(`arx: output (${l8.length}) is shorter than data (${d6})`);
    const g5 = [];
    let y7 = c8.length, h6, m4;
    if (y7 === 32)
      g5.push(h6 = gt2(c8)), m4 = bs;
    else if (y7 === 16 && n6)
      h6 = new Uint8Array(32), h6.set(c8), h6.set(c8, 16), m4 = ms, g5.push(h6);
    else
      throw new Error(`arx: invalid 32-byte key, got length=${y7}`);
    yt2(u5) || g5.push(u5 = gt2(u5));
    const L5 = se(h6);
    if (r4) {
      if (u5.length !== 24)
        throw new Error("arx: extended nonce must be 24 bytes");
      r4(m4, L5, se(u5.subarray(0, 16)), L5), u5 = u5.subarray(16);
    }
    const b6 = 16 - o7;
    if (b6 !== u5.length)
      throw new Error(`arx: nonce must be ${b6} or 16 bytes`);
    if (b6 !== 12) {
      const O7 = new Uint8Array(12);
      O7.set(u5, s4 ? 0 : 12 - u5.length), u5 = O7, g5.push(u5);
    }
    const _4 = se(u5);
    return Es(e3, m4, L5, _4, a4, l8, f9, i6), Ee2(...g5), l8;
  };
}
var M3 = (e3, t2) => e3[t2++] & 255 | (e3[t2++] & 255) << 8;
var xs = class {
  constructor(t2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, t2 = pt(t2), F(t2, 32);
    const n6 = M3(t2, 0), r4 = M3(t2, 2), o7 = M3(t2, 4), s4 = M3(t2, 6), i6 = M3(t2, 8), c8 = M3(t2, 10), u5 = M3(t2, 12), a4 = M3(t2, 14);
    this.r[0] = n6 & 8191, this.r[1] = (n6 >>> 13 | r4 << 3) & 8191, this.r[2] = (r4 >>> 10 | o7 << 6) & 7939, this.r[3] = (o7 >>> 7 | s4 << 9) & 8191, this.r[4] = (s4 >>> 4 | i6 << 12) & 255, this.r[5] = i6 >>> 1 & 8190, this.r[6] = (i6 >>> 14 | c8 << 2) & 8191, this.r[7] = (c8 >>> 11 | u5 << 5) & 8065, this.r[8] = (u5 >>> 8 | a4 << 8) & 8191, this.r[9] = a4 >>> 5 & 127;
    for (let l8 = 0; l8 < 8; l8++)
      this.pad[l8] = M3(t2, 16 + 2 * l8);
  }
  process(t2, n6, r4 = false) {
    const o7 = r4 ? 0 : 2048, { h: s4, r: i6 } = this, c8 = i6[0], u5 = i6[1], a4 = i6[2], l8 = i6[3], f9 = i6[4], d6 = i6[5], g5 = i6[6], y7 = i6[7], h6 = i6[8], m4 = i6[9], L5 = M3(t2, n6 + 0), b6 = M3(t2, n6 + 2), _4 = M3(t2, n6 + 4), O7 = M3(t2, n6 + 6), k7 = M3(t2, n6 + 8), E7 = M3(t2, n6 + 10), B4 = M3(t2, n6 + 12), j4 = M3(t2, n6 + 14);
    let v7 = s4[0] + (L5 & 8191), I4 = s4[1] + ((L5 >>> 13 | b6 << 3) & 8191), w7 = s4[2] + ((b6 >>> 10 | _4 << 6) & 8191), R3 = s4[3] + ((_4 >>> 7 | O7 << 9) & 8191), A4 = s4[4] + ((O7 >>> 4 | k7 << 12) & 8191), T4 = s4[5] + (k7 >>> 1 & 8191), N12 = s4[6] + ((k7 >>> 14 | E7 << 2) & 8191), S5 = s4[7] + ((E7 >>> 11 | B4 << 5) & 8191), U3 = s4[8] + ((B4 >>> 8 | j4 << 8) & 8191), $4 = s4[9] + (j4 >>> 5 | o7), p7 = 0, C6 = p7 + v7 * c8 + I4 * (5 * m4) + w7 * (5 * h6) + R3 * (5 * y7) + A4 * (5 * g5);
    p7 = C6 >>> 13, C6 &= 8191, C6 += T4 * (5 * d6) + N12 * (5 * f9) + S5 * (5 * l8) + U3 * (5 * a4) + $4 * (5 * u5), p7 += C6 >>> 13, C6 &= 8191;
    let D3 = p7 + v7 * u5 + I4 * c8 + w7 * (5 * m4) + R3 * (5 * h6) + A4 * (5 * y7);
    p7 = D3 >>> 13, D3 &= 8191, D3 += T4 * (5 * g5) + N12 * (5 * d6) + S5 * (5 * f9) + U3 * (5 * l8) + $4 * (5 * a4), p7 += D3 >>> 13, D3 &= 8191;
    let P7 = p7 + v7 * a4 + I4 * u5 + w7 * c8 + R3 * (5 * m4) + A4 * (5 * h6);
    p7 = P7 >>> 13, P7 &= 8191, P7 += T4 * (5 * y7) + N12 * (5 * g5) + S5 * (5 * d6) + U3 * (5 * f9) + $4 * (5 * l8), p7 += P7 >>> 13, P7 &= 8191;
    let G4 = p7 + v7 * l8 + I4 * a4 + w7 * u5 + R3 * c8 + A4 * (5 * m4);
    p7 = G4 >>> 13, G4 &= 8191, G4 += T4 * (5 * h6) + N12 * (5 * y7) + S5 * (5 * g5) + U3 * (5 * d6) + $4 * (5 * f9), p7 += G4 >>> 13, G4 &= 8191;
    let X = p7 + v7 * f9 + I4 * l8 + w7 * a4 + R3 * u5 + A4 * c8;
    p7 = X >>> 13, X &= 8191, X += T4 * (5 * m4) + N12 * (5 * h6) + S5 * (5 * y7) + U3 * (5 * g5) + $4 * (5 * d6), p7 += X >>> 13, X &= 8191;
    let Z2 = p7 + v7 * d6 + I4 * f9 + w7 * l8 + R3 * a4 + A4 * u5;
    p7 = Z2 >>> 13, Z2 &= 8191, Z2 += T4 * c8 + N12 * (5 * m4) + S5 * (5 * h6) + U3 * (5 * y7) + $4 * (5 * g5), p7 += Z2 >>> 13, Z2 &= 8191;
    let he4 = p7 + v7 * g5 + I4 * d6 + w7 * f9 + R3 * l8 + A4 * a4;
    p7 = he4 >>> 13, he4 &= 8191, he4 += T4 * u5 + N12 * c8 + S5 * (5 * m4) + U3 * (5 * h6) + $4 * (5 * y7), p7 += he4 >>> 13, he4 &= 8191;
    let pe4 = p7 + v7 * y7 + I4 * g5 + w7 * d6 + R3 * f9 + A4 * l8;
    p7 = pe4 >>> 13, pe4 &= 8191, pe4 += T4 * a4 + N12 * u5 + S5 * c8 + U3 * (5 * m4) + $4 * (5 * h6), p7 += pe4 >>> 13, pe4 &= 8191;
    let ge4 = p7 + v7 * h6 + I4 * y7 + w7 * g5 + R3 * d6 + A4 * f9;
    p7 = ge4 >>> 13, ge4 &= 8191, ge4 += T4 * l8 + N12 * a4 + S5 * u5 + U3 * c8 + $4 * (5 * m4), p7 += ge4 >>> 13, ge4 &= 8191;
    let ye4 = p7 + v7 * m4 + I4 * h6 + w7 * y7 + R3 * g5 + A4 * d6;
    p7 = ye4 >>> 13, ye4 &= 8191, ye4 += T4 * f9 + N12 * l8 + S5 * a4 + U3 * u5 + $4 * c8, p7 += ye4 >>> 13, ye4 &= 8191, p7 = (p7 << 2) + p7 | 0, p7 = p7 + C6 | 0, C6 = p7 & 8191, p7 = p7 >>> 13, D3 += p7, s4[0] = C6, s4[1] = D3, s4[2] = P7, s4[3] = G4, s4[4] = X, s4[5] = Z2, s4[6] = he4, s4[7] = pe4, s4[8] = ge4, s4[9] = ye4;
  }
  finalize() {
    const { h: t2, pad: n6 } = this, r4 = new Uint16Array(10);
    let o7 = t2[1] >>> 13;
    t2[1] &= 8191;
    for (let c8 = 2; c8 < 10; c8++)
      t2[c8] += o7, o7 = t2[c8] >>> 13, t2[c8] &= 8191;
    t2[0] += o7 * 5, o7 = t2[0] >>> 13, t2[0] &= 8191, t2[1] += o7, o7 = t2[1] >>> 13, t2[1] &= 8191, t2[2] += o7, r4[0] = t2[0] + 5, o7 = r4[0] >>> 13, r4[0] &= 8191;
    for (let c8 = 1; c8 < 10; c8++)
      r4[c8] = t2[c8] + o7, o7 = r4[c8] >>> 13, r4[c8] &= 8191;
    r4[9] -= 8192;
    let s4 = (o7 ^ 1) - 1;
    for (let c8 = 0; c8 < 10; c8++)
      r4[c8] &= s4;
    s4 = ~s4;
    for (let c8 = 0; c8 < 10; c8++)
      t2[c8] = t2[c8] & s4 | r4[c8];
    t2[0] = (t2[0] | t2[1] << 13) & 65535, t2[1] = (t2[1] >>> 3 | t2[2] << 10) & 65535, t2[2] = (t2[2] >>> 6 | t2[3] << 7) & 65535, t2[3] = (t2[3] >>> 9 | t2[4] << 4) & 65535, t2[4] = (t2[4] >>> 12 | t2[5] << 1 | t2[6] << 14) & 65535, t2[5] = (t2[6] >>> 2 | t2[7] << 11) & 65535, t2[6] = (t2[7] >>> 5 | t2[8] << 8) & 65535, t2[7] = (t2[8] >>> 8 | t2[9] << 5) & 65535;
    let i6 = t2[0] + n6[0];
    t2[0] = i6 & 65535;
    for (let c8 = 1; c8 < 8; c8++)
      i6 = (t2[c8] + n6[c8] | 0) + (i6 >>> 16) | 0, t2[c8] = i6 & 65535;
    Ee2(r4);
  }
  update(t2) {
    Ln2(this);
    const { buffer: n6, blockLen: r4 } = this;
    t2 = pt(t2);
    const o7 = t2.length;
    for (let s4 = 0; s4 < o7; ) {
      const i6 = Math.min(r4 - this.pos, o7 - s4);
      if (i6 === r4) {
        for (; r4 <= o7 - s4; s4 += r4)
          this.process(t2, s4);
        continue;
      }
      n6.set(t2.subarray(s4, s4 + i6), this.pos), this.pos += i6, s4 += i6, this.pos === r4 && (this.process(n6, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Ee2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(t2) {
    Ln2(this), cs(t2, this), this.finished = true;
    const { buffer: n6, h: r4 } = this;
    let { pos: o7 } = this;
    if (o7) {
      for (n6[o7++] = 1; o7 < 16; o7++)
        n6[o7] = 0;
      this.process(n6, 0, true);
    }
    this.finalize();
    let s4 = 0;
    for (let i6 = 0; i6 < 8; i6++)
      t2[s4++] = r4[i6] >>> 0, t2[s4++] = r4[i6] >>> 8;
    return t2;
  }
  digest() {
    const { buffer: t2, outputLen: n6 } = this;
    this.digestInto(t2);
    const r4 = t2.slice(0, n6);
    return this.destroy(), r4;
  }
};
function Is(e3) {
  const t2 = (r4, o7) => e3(o7).update(pt(r4)).digest(), n6 = e3(new Uint8Array(32));
  return t2.outputLen = n6.outputLen, t2.blockLen = n6.blockLen, t2.create = (r4) => e3(r4), t2;
}
var Os = Is((e3) => new xs(e3));
function As(e3, t2, n6, r4, o7, s4 = 20) {
  let i6 = e3[0], c8 = e3[1], u5 = e3[2], a4 = e3[3], l8 = t2[0], f9 = t2[1], d6 = t2[2], g5 = t2[3], y7 = t2[4], h6 = t2[5], m4 = t2[6], L5 = t2[7], b6 = o7, _4 = n6[0], O7 = n6[1], k7 = n6[2], E7 = i6, B4 = c8, j4 = u5, v7 = a4, I4 = l8, w7 = f9, R3 = d6, A4 = g5, T4 = y7, N12 = h6, S5 = m4, U3 = L5, $4 = b6, p7 = _4, C6 = O7, D3 = k7;
  for (let G4 = 0; G4 < s4; G4 += 2)
    E7 = E7 + I4 | 0, $4 = x4($4 ^ E7, 16), T4 = T4 + $4 | 0, I4 = x4(I4 ^ T4, 12), E7 = E7 + I4 | 0, $4 = x4($4 ^ E7, 8), T4 = T4 + $4 | 0, I4 = x4(I4 ^ T4, 7), B4 = B4 + w7 | 0, p7 = x4(p7 ^ B4, 16), N12 = N12 + p7 | 0, w7 = x4(w7 ^ N12, 12), B4 = B4 + w7 | 0, p7 = x4(p7 ^ B4, 8), N12 = N12 + p7 | 0, w7 = x4(w7 ^ N12, 7), j4 = j4 + R3 | 0, C6 = x4(C6 ^ j4, 16), S5 = S5 + C6 | 0, R3 = x4(R3 ^ S5, 12), j4 = j4 + R3 | 0, C6 = x4(C6 ^ j4, 8), S5 = S5 + C6 | 0, R3 = x4(R3 ^ S5, 7), v7 = v7 + A4 | 0, D3 = x4(D3 ^ v7, 16), U3 = U3 + D3 | 0, A4 = x4(A4 ^ U3, 12), v7 = v7 + A4 | 0, D3 = x4(D3 ^ v7, 8), U3 = U3 + D3 | 0, A4 = x4(A4 ^ U3, 7), E7 = E7 + w7 | 0, D3 = x4(D3 ^ E7, 16), S5 = S5 + D3 | 0, w7 = x4(w7 ^ S5, 12), E7 = E7 + w7 | 0, D3 = x4(D3 ^ E7, 8), S5 = S5 + D3 | 0, w7 = x4(w7 ^ S5, 7), B4 = B4 + R3 | 0, $4 = x4($4 ^ B4, 16), U3 = U3 + $4 | 0, R3 = x4(R3 ^ U3, 12), B4 = B4 + R3 | 0, $4 = x4($4 ^ B4, 8), U3 = U3 + $4 | 0, R3 = x4(R3 ^ U3, 7), j4 = j4 + A4 | 0, p7 = x4(p7 ^ j4, 16), T4 = T4 + p7 | 0, A4 = x4(A4 ^ T4, 12), j4 = j4 + A4 | 0, p7 = x4(p7 ^ j4, 8), T4 = T4 + p7 | 0, A4 = x4(A4 ^ T4, 7), v7 = v7 + I4 | 0, C6 = x4(C6 ^ v7, 16), N12 = N12 + C6 | 0, I4 = x4(I4 ^ N12, 12), v7 = v7 + I4 | 0, C6 = x4(C6 ^ v7, 8), N12 = N12 + C6 | 0, I4 = x4(I4 ^ N12, 7);
  let P7 = 0;
  r4[P7++] = i6 + E7 | 0, r4[P7++] = c8 + B4 | 0, r4[P7++] = u5 + j4 | 0, r4[P7++] = a4 + v7 | 0, r4[P7++] = l8 + I4 | 0, r4[P7++] = f9 + w7 | 0, r4[P7++] = d6 + R3 | 0, r4[P7++] = g5 + A4 | 0, r4[P7++] = y7 + T4 | 0, r4[P7++] = h6 + N12 | 0, r4[P7++] = m4 + S5 | 0, r4[P7++] = L5 + U3 | 0, r4[P7++] = b6 + $4 | 0, r4[P7++] = _4 + p7 | 0, r4[P7++] = O7 + C6 | 0, r4[P7++] = k7 + D3 | 0;
}
var Ns = vs(As, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ss = new Uint8Array(16);
var Hn2 = (e3, t2) => {
  e3.update(t2);
  const n6 = t2.length % 16;
  n6 && e3.update(Ss.subarray(n6));
};
var Us = new Uint8Array(32);
function Kn2(e3, t2, n6, r4, o7) {
  const s4 = e3(t2, n6, Us), i6 = Os.create(s4);
  o7 && Hn2(i6, o7), Hn2(i6, r4);
  const c8 = new Uint8Array(16), u5 = as(c8);
  kn2(u5, 0, BigInt(o7 ? o7.length : 0), true), kn2(u5, 8, BigInt(r4.length), true), i6.update(c8);
  const a4 = i6.digest();
  return Ee2(s4, c8), a4;
}
var _s = (e3) => (t2, n6, r4) => ({ encrypt(s4, i6) {
  const c8 = s4.length;
  i6 = Cn2(c8 + 16, i6, false), i6.set(s4);
  const u5 = i6.subarray(0, -16);
  e3(t2, n6, u5, u5, 1);
  const a4 = Kn2(e3, t2, n6, u5, r4);
  return i6.set(a4, c8), Ee2(a4), i6;
}, decrypt(s4, i6) {
  i6 = Cn2(s4.length - 16, i6, false);
  const c8 = s4.subarray(0, -16), u5 = s4.subarray(-16), a4 = Kn2(e3, t2, n6, c8, r4);
  if (!ds(u5, a4))
    throw new Error("invalid tag");
  return i6.set(s4.subarray(0, -16)), e3(t2, n6, i6, i6, 1), Ee2(a4), i6;
} });
var Fn2 = hs({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _s(Ns));
var qn2 = class extends it2 {
  constructor(t2, n6) {
    super(), this.finished = false, this.destroyed = false, ot(t2);
    const r4 = we2(n6);
    if (this.iHash = t2.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o7 = this.blockLen, s4 = new Uint8Array(o7);
    s4.set(r4.length > o7 ? t2.create().update(r4).digest() : r4);
    for (let i6 = 0; i6 < s4.length; i6++)
      s4[i6] ^= 54;
    this.iHash.update(s4), this.oHash = t2.create();
    for (let i6 = 0; i6 < s4.length; i6++)
      s4[i6] ^= 106;
    this.oHash.update(s4), s4.fill(0);
  }
  update(t2) {
    return me2(this), this.iHash.update(t2), this;
  }
  digestInto(t2) {
    me2(this), je2(t2, this.outputLen), this.finished = true, this.iHash.digestInto(t2), this.oHash.update(t2), this.oHash.digestInto(t2), this.destroy();
  }
  digest() {
    const t2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t2), t2;
  }
  _cloneInto(t2) {
    t2 || (t2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n6, iHash: r4, finished: o7, destroyed: s4, blockLen: i6, outputLen: c8 } = this;
    return t2 = t2, t2.finished = o7, t2.destroyed = s4, t2.blockLen = i6, t2.outputLen = c8, t2.oHash = n6._cloneInto(t2.oHash), t2.iHash = r4._cloneInto(t2.iHash), t2;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var mt = (e3, t2, n6) => new qn2(e3, t2).update(n6).digest();
mt.create = (e3, t2) => new qn2(e3, t2);
function Ts(e3, t2, n6) {
  return ot(e3), n6 === void 0 && (n6 = new Uint8Array(e3.outputLen)), mt(e3, we2(n6), we2(t2));
}
var bt2 = new Uint8Array([0]);
var Gn2 = new Uint8Array();
function $s(e3, t2, n6, r4 = 32) {
  if (ot(e3), Ne2(r4), r4 > 255 * e3.outputLen)
    throw new Error("Length should be <= 255*HashLen");
  const o7 = Math.ceil(r4 / e3.outputLen);
  n6 === void 0 && (n6 = Gn2);
  const s4 = new Uint8Array(o7 * e3.outputLen), i6 = mt.create(e3, t2), c8 = i6._cloneInto(), u5 = new Uint8Array(i6.outputLen);
  for (let a4 = 0; a4 < o7; a4++)
    bt2[0] = a4 + 1, c8.update(a4 === 0 ? Gn2 : u5).update(n6).update(bt2).digestInto(u5), s4.set(u5, e3.outputLen * a4), i6._cloneInto(c8);
  return i6.destroy(), c8.destroy(), u5.fill(0), bt2.fill(0), s4.slice(0, r4);
}
var Rs = (e3, t2, n6, r4, o7) => $s(e3, Ts(e3, t2, n6), r4, o7);
function Ps(e3, t2, n6, r4) {
  if (typeof e3.setBigUint64 == "function")
    return e3.setBigUint64(t2, n6, r4);
  const o7 = BigInt(32), s4 = BigInt(4294967295), i6 = Number(n6 >> o7 & s4), c8 = Number(n6 & s4), u5 = r4 ? 4 : 0, a4 = r4 ? 0 : 4;
  e3.setUint32(t2 + u5, i6, r4), e3.setUint32(t2 + a4, c8, r4);
}
function Bs(e3, t2, n6) {
  return e3 & t2 ^ ~e3 & n6;
}
function Ls(e3, t2, n6) {
  return e3 & t2 ^ e3 & n6 ^ t2 & n6;
}
var js = class extends it2 {
  constructor(t2, n6, r4, o7) {
    super(), this.blockLen = t2, this.outputLen = n6, this.padOffset = r4, this.isLE = o7, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(t2), this.view = st(this.buffer);
  }
  update(t2) {
    me2(this);
    const { view: n6, buffer: r4, blockLen: o7 } = this;
    t2 = we2(t2);
    const s4 = t2.length;
    for (let i6 = 0; i6 < s4; ) {
      const c8 = Math.min(o7 - this.pos, s4 - i6);
      if (c8 === o7) {
        const u5 = st(t2);
        for (; o7 <= s4 - i6; i6 += o7)
          this.process(u5, i6);
        continue;
      }
      r4.set(t2.subarray(i6, i6 + c8), this.pos), this.pos += c8, i6 += c8, this.pos === o7 && (this.process(n6, 0), this.pos = 0);
    }
    return this.length += t2.length, this.roundClean(), this;
  }
  digestInto(t2) {
    me2(this), sn2(t2, this), this.finished = true;
    const { buffer: n6, view: r4, blockLen: o7, isLE: s4 } = this;
    let { pos: i6 } = this;
    n6[i6++] = 128, this.buffer.subarray(i6).fill(0), this.padOffset > o7 - i6 && (this.process(r4, 0), i6 = 0);
    for (let f9 = i6; f9 < o7; f9++)
      n6[f9] = 0;
    Ps(r4, o7 - 8, BigInt(this.length * 8), s4), this.process(r4, 0);
    const c8 = st(t2), u5 = this.outputLen;
    if (u5 % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const a4 = u5 / 4, l8 = this.get();
    if (a4 > l8.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let f9 = 0; f9 < a4; f9++)
      c8.setUint32(4 * f9, l8[f9], s4);
  }
  digest() {
    const { buffer: t2, outputLen: n6 } = this;
    this.digestInto(t2);
    const r4 = t2.slice(0, n6);
    return this.destroy(), r4;
  }
  _cloneInto(t2) {
    t2 || (t2 = new this.constructor()), t2.set(...this.get());
    const { blockLen: n6, buffer: r4, length: o7, finished: s4, destroyed: i6, pos: c8 } = this;
    return t2.length = o7, t2.pos = c8, t2.finished = s4, t2.destroyed = i6, o7 % n6 && t2.buffer.set(r4), t2;
  }
};
var Cs = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var ie = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var ce = new Uint32Array(64);
var ks = class extends js {
  constructor() {
    super(64, 32, 8, false), this.A = ie[0] | 0, this.B = ie[1] | 0, this.C = ie[2] | 0, this.D = ie[3] | 0, this.E = ie[4] | 0, this.F = ie[5] | 0, this.G = ie[6] | 0, this.H = ie[7] | 0;
  }
  get() {
    const { A: t2, B: n6, C: r4, D: o7, E: s4, F: i6, G: c8, H: u5 } = this;
    return [t2, n6, r4, o7, s4, i6, c8, u5];
  }
  set(t2, n6, r4, o7, s4, i6, c8, u5) {
    this.A = t2 | 0, this.B = n6 | 0, this.C = r4 | 0, this.D = o7 | 0, this.E = s4 | 0, this.F = i6 | 0, this.G = c8 | 0, this.H = u5 | 0;
  }
  process(t2, n6) {
    for (let f9 = 0; f9 < 16; f9++, n6 += 4)
      ce[f9] = t2.getUint32(n6, false);
    for (let f9 = 16; f9 < 64; f9++) {
      const d6 = ce[f9 - 15], g5 = ce[f9 - 2], y7 = J3(d6, 7) ^ J3(d6, 18) ^ d6 >>> 3, h6 = J3(g5, 17) ^ J3(g5, 19) ^ g5 >>> 10;
      ce[f9] = h6 + ce[f9 - 7] + y7 + ce[f9 - 16] | 0;
    }
    let { A: r4, B: o7, C: s4, D: i6, E: c8, F: u5, G: a4, H: l8 } = this;
    for (let f9 = 0; f9 < 64; f9++) {
      const d6 = J3(c8, 6) ^ J3(c8, 11) ^ J3(c8, 25), g5 = l8 + d6 + Bs(c8, u5, a4) + Cs[f9] + ce[f9] | 0, h6 = (J3(r4, 2) ^ J3(r4, 13) ^ J3(r4, 22)) + Ls(r4, o7, s4) | 0;
      l8 = a4, a4 = u5, u5 = c8, c8 = i6 + g5 | 0, i6 = s4, s4 = o7, o7 = r4, r4 = g5 + h6 | 0;
    }
    r4 = r4 + this.A | 0, o7 = o7 + this.B | 0, s4 = s4 + this.C | 0, i6 = i6 + this.D | 0, c8 = c8 + this.E | 0, u5 = u5 + this.F | 0, a4 = a4 + this.G | 0, l8 = l8 + this.H | 0, this.set(r4, o7, s4, i6, c8, u5, a4, l8);
  }
  roundClean() {
    ce.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var He2 = fn(() => new ks());
var Wn2 = BigInt(0);
function wt2(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function zn2(e3) {
  if (!wt2(e3))
    throw new Error("Uint8Array expected");
}
var Ds = Array.from({ length: 256 }, (e3, t2) => t2.toString(16).padStart(2, "0"));
function Ms(e3) {
  zn2(e3);
  let t2 = "";
  for (let n6 = 0; n6 < e3.length; n6++)
    t2 += Ds[e3[n6]];
  return t2;
}
function Vs(e3) {
  if (typeof e3 != "string")
    throw new Error("hex string expected, got " + typeof e3);
  return e3 === "" ? Wn2 : BigInt("0x" + e3);
}
var ee = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Jn2(e3) {
  if (e3 >= ee._0 && e3 <= ee._9)
    return e3 - ee._0;
  if (e3 >= ee.A && e3 <= ee.F)
    return e3 - (ee.A - 10);
  if (e3 >= ee.a && e3 <= ee.f)
    return e3 - (ee.a - 10);
}
function Yn2(e3) {
  if (typeof e3 != "string")
    throw new Error("hex string expected, got " + typeof e3);
  const t2 = e3.length, n6 = t2 / 2;
  if (t2 % 2)
    throw new Error("hex string expected, got unpadded hex of length " + t2);
  const r4 = new Uint8Array(n6);
  for (let o7 = 0, s4 = 0; o7 < n6; o7++, s4 += 2) {
    const i6 = Jn2(e3.charCodeAt(s4)), c8 = Jn2(e3.charCodeAt(s4 + 1));
    if (i6 === void 0 || c8 === void 0) {
      const u5 = e3[s4] + e3[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + u5 + '" at index ' + s4);
    }
    r4[o7] = i6 * 16 + c8;
  }
  return r4;
}
function Xn2(e3) {
  return zn2(e3), Vs(Ms(Uint8Array.from(e3).reverse()));
}
function Hs(e3, t2) {
  return Yn2(e3.toString(16).padStart(t2 * 2, "0"));
}
function Ks(e3, t2) {
  return Hs(e3, t2).reverse();
}
function Zn2(e3, t2, n6) {
  let r4;
  if (typeof t2 == "string")
    try {
      r4 = Yn2(t2);
    } catch (s4) {
      throw new Error(e3 + " must be hex string or Uint8Array, cause: " + s4);
    }
  else if (wt2(t2))
    r4 = Uint8Array.from(t2);
  else
    throw new Error(e3 + " must be hex string or Uint8Array");
  const o7 = r4.length;
  if (typeof n6 == "number" && o7 !== n6)
    throw new Error(e3 + " of length " + n6 + " expected, got " + o7);
  return r4;
}
var Et2 = (e3) => typeof e3 == "bigint" && Wn2 <= e3;
function Fs(e3, t2, n6) {
  return Et2(e3) && Et2(t2) && Et2(n6) && t2 <= e3 && e3 < n6;
}
function Qn2(e3, t2, n6, r4) {
  if (!Fs(t2, n6, r4))
    throw new Error("expected valid " + e3 + ": " + n6 + " <= n < " + r4 + ", got " + t2);
}
var qs = { bigint: (e3) => typeof e3 == "bigint", function: (e3) => typeof e3 == "function", boolean: (e3) => typeof e3 == "boolean", string: (e3) => typeof e3 == "string", stringOrUint8Array: (e3) => typeof e3 == "string" || wt2(e3), isSafeInteger: (e3) => Number.isSafeInteger(e3), array: (e3) => Array.isArray(e3), field: (e3, t2) => t2.Fp.isValid(e3), hash: (e3) => typeof e3 == "function" && Number.isSafeInteger(e3.outputLen) };
function Gs(e3, t2, n6 = {}) {
  const r4 = (o7, s4, i6) => {
    const c8 = qs[s4];
    if (typeof c8 != "function")
      throw new Error("invalid validator function");
    const u5 = e3[o7];
    if (!(i6 && u5 === void 0) && !c8(u5, e3))
      throw new Error("param " + String(o7) + " is invalid. Expected " + s4 + ", got " + u5);
  };
  for (const [o7, s4] of Object.entries(t2))
    r4(o7, s4, false);
  for (const [o7, s4] of Object.entries(n6))
    r4(o7, s4, true);
  return e3;
}
var ve2 = BigInt(0);
var Ke2 = BigInt(1);
function er2(e3, t2) {
  const n6 = e3 % t2;
  return n6 >= ve2 ? n6 : t2 + n6;
}
function Ws(e3, t2, n6) {
  if (t2 < ve2)
    throw new Error("invalid exponent, negatives unsupported");
  if (n6 <= ve2)
    throw new Error("invalid modulus");
  if (n6 === Ke2)
    return ve2;
  let r4 = Ke2;
  for (; t2 > ve2; )
    t2 & Ke2 && (r4 = r4 * e3 % n6), e3 = e3 * e3 % n6, t2 >>= Ke2;
  return r4;
}
function z3(e3, t2, n6) {
  let r4 = e3;
  for (; t2-- > ve2; )
    r4 *= r4, r4 %= n6;
  return r4;
}
BigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var xe2 = BigInt(0);
var vt2 = BigInt(1);
function zs(e3) {
  return Gs(e3, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...e3 });
}
function Js(e3) {
  const t2 = zs(e3), { P: n6 } = t2, r4 = (b6) => er2(b6, n6), o7 = t2.montgomeryBits, s4 = Math.ceil(o7 / 8), i6 = t2.nByteLength, c8 = t2.adjustScalarBytes || ((b6) => b6), u5 = t2.powPminus2 || ((b6) => Ws(b6, n6 - BigInt(2), n6));
  function a4(b6, _4, O7) {
    const k7 = r4(b6 * (_4 - O7));
    return _4 = r4(_4 - k7), O7 = r4(O7 + k7), [_4, O7];
  }
  const l8 = (t2.a - BigInt(2)) / BigInt(4);
  function f9(b6, _4) {
    Qn2("u", b6, xe2, n6), Qn2("scalar", _4, xe2, n6);
    const O7 = _4, k7 = b6;
    let E7 = vt2, B4 = xe2, j4 = b6, v7 = vt2, I4 = xe2, w7;
    for (let A4 = BigInt(o7 - 1); A4 >= xe2; A4--) {
      const T4 = O7 >> A4 & vt2;
      I4 ^= T4, w7 = a4(I4, E7, j4), E7 = w7[0], j4 = w7[1], w7 = a4(I4, B4, v7), B4 = w7[0], v7 = w7[1], I4 = T4;
      const N12 = E7 + B4, S5 = r4(N12 * N12), U3 = E7 - B4, $4 = r4(U3 * U3), p7 = S5 - $4, C6 = j4 + v7, D3 = j4 - v7, P7 = r4(D3 * N12), G4 = r4(C6 * U3), X = P7 + G4, Z2 = P7 - G4;
      j4 = r4(X * X), v7 = r4(k7 * r4(Z2 * Z2)), E7 = r4(S5 * $4), B4 = r4(p7 * (S5 + r4(l8 * p7)));
    }
    w7 = a4(I4, E7, j4), E7 = w7[0], j4 = w7[1], w7 = a4(I4, B4, v7), B4 = w7[0], v7 = w7[1];
    const R3 = u5(B4);
    return r4(E7 * R3);
  }
  function d6(b6) {
    return Ks(r4(b6), s4);
  }
  function g5(b6) {
    const _4 = Zn2("u coordinate", b6, s4);
    return i6 === 32 && (_4[31] &= 127), Xn2(_4);
  }
  function y7(b6) {
    const _4 = Zn2("scalar", b6), O7 = _4.length;
    if (O7 !== s4 && O7 !== i6) {
      let k7 = "" + s4 + " or " + i6;
      throw new Error("invalid scalar, expected " + k7 + " bytes, got " + O7);
    }
    return Xn2(c8(_4));
  }
  function h6(b6, _4) {
    const O7 = g5(_4), k7 = y7(b6), E7 = f9(O7, k7);
    if (E7 === xe2)
      throw new Error("invalid private or public key received");
    return d6(E7);
  }
  const m4 = d6(t2.Gu);
  function L5(b6) {
    return h6(b6, m4);
  }
  return { scalarMult: h6, scalarMultBase: L5, getSharedSecret: (b6, _4) => h6(b6, _4), getPublicKey: (b6) => L5(b6), utils: { randomPrivateKey: () => t2.randomBytes(t2.nByteLength) }, GuBytes: m4 };
}
var xt2 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var Ys = BigInt(1);
var tr2 = BigInt(2);
var Xs = BigInt(3);
var Zs = BigInt(5);
BigInt(8);
function Qs(e3) {
  const t2 = BigInt(10), n6 = BigInt(20), r4 = BigInt(40), o7 = BigInt(80), s4 = xt2, c8 = e3 * e3 % s4 * e3 % s4, u5 = z3(c8, tr2, s4) * c8 % s4, a4 = z3(u5, Ys, s4) * e3 % s4, l8 = z3(a4, Zs, s4) * a4 % s4, f9 = z3(l8, t2, s4) * l8 % s4, d6 = z3(f9, n6, s4) * f9 % s4, g5 = z3(d6, r4, s4) * d6 % s4, y7 = z3(g5, o7, s4) * g5 % s4, h6 = z3(y7, o7, s4) * g5 % s4, m4 = z3(h6, t2, s4) * l8 % s4;
  return { pow_p_5_8: z3(m4, tr2, s4) * e3 % s4, b2: c8 };
}
function ei(e3) {
  return e3[0] &= 248, e3[31] &= 127, e3[31] |= 64, e3;
}
var It2 = Js({ P: xt2, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (e3) => {
  const t2 = xt2, { pow_p_5_8: n6, b2: r4 } = Qs(e3);
  return er2(z3(n6, Xs, t2) * r4, t2);
}, adjustScalarBytes: ei, randomBytes: Se2 });
var Ot2 = "base10";
var V2 = "base16";
var At = "base64pad";
var ti = "base64url";
var Ie2 = "utf8";
var Nt2 = 0;
var Oe2 = 1;
var _e2 = 2;
var ni = 0;
var nr2 = 1;
var Te2 = 12;
var St2 = 32;
function ri() {
  const e3 = It2.utils.randomPrivateKey(), t2 = It2.getPublicKey(e3);
  return { privateKey: toString3(e3, V2), publicKey: toString3(t2, V2) };
}
function oi() {
  const e3 = Se2(St2);
  return toString3(e3, V2);
}
function si(e3, t2) {
  const n6 = It2.getSharedSecret(fromString4(e3, V2), fromString4(t2, V2)), r4 = Rs(He2, n6, void 0, void 0, St2);
  return toString3(r4, V2);
}
function ii(e3) {
  const t2 = He2(fromString4(e3, V2));
  return toString3(t2, V2);
}
function ci(e3) {
  const t2 = He2(fromString4(e3, Ie2));
  return toString3(t2, V2);
}
function Ut2(e3) {
  return fromString4(`${e3}`, Ot2);
}
function fe2(e3) {
  return Number(toString3(e3, Ot2));
}
function ai(e3) {
  const t2 = Ut2(typeof e3.type < "u" ? e3.type : Nt2);
  if (fe2(t2) === Oe2 && typeof e3.senderPublicKey > "u")
    throw new Error("Missing sender public key for type 1 envelope");
  const n6 = typeof e3.senderPublicKey < "u" ? fromString4(e3.senderPublicKey, V2) : void 0, r4 = typeof e3.iv < "u" ? fromString4(e3.iv, V2) : Se2(Te2), o7 = fromString4(e3.symKey, V2), s4 = Fn2(o7, r4).encrypt(fromString4(e3.message, Ie2));
  return _t2({ type: t2, sealed: s4, iv: r4, senderPublicKey: n6, encoding: e3.encoding });
}
function ui(e3) {
  const t2 = fromString4(e3.symKey, V2), { sealed: n6, iv: r4 } = Fe(e3), o7 = Fn2(t2, r4).decrypt(n6);
  if (o7 === null)
    throw new Error("Failed to decrypt");
  return toString3(o7, Ie2);
}
function fi(e3, t2) {
  const n6 = Ut2(_e2), r4 = Se2(Te2), o7 = fromString4(e3, Ie2);
  return _t2({ type: n6, sealed: o7, iv: r4, encoding: t2 });
}
function li(e3, t2) {
  const { sealed: n6 } = Fe({ encoded: e3, encoding: t2 });
  return toString3(n6, Ie2);
}
function _t2(e3) {
  const { encoding: t2 = At } = e3;
  if (fe2(e3.type) === _e2)
    return toString3(concat3([e3.type, e3.sealed]), t2);
  if (fe2(e3.type) === Oe2) {
    if (typeof e3.senderPublicKey > "u")
      throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat3([e3.type, e3.senderPublicKey, e3.iv, e3.sealed]), t2);
  }
  return toString3(concat3([e3.type, e3.iv, e3.sealed]), t2);
}
function Fe(e3) {
  const { encoded: t2, encoding: n6 = At } = e3, r4 = fromString4(t2, n6), o7 = r4.slice(ni, nr2), s4 = nr2;
  if (fe2(o7) === Oe2) {
    const a4 = s4 + St2, l8 = a4 + Te2, f9 = r4.slice(s4, a4), d6 = r4.slice(a4, l8), g5 = r4.slice(l8);
    return { type: o7, sealed: g5, iv: d6, senderPublicKey: f9 };
  }
  if (fe2(o7) === _e2) {
    const a4 = r4.slice(s4), l8 = Se2(Te2);
    return { type: o7, sealed: a4, iv: l8 };
  }
  const i6 = s4 + Te2, c8 = r4.slice(s4, i6), u5 = r4.slice(i6);
  return { type: o7, sealed: u5, iv: c8 };
}
function di(e3, t2) {
  const n6 = Fe({ encoded: e3, encoding: t2 == null ? void 0 : t2.encoding });
  return rr2({ type: fe2(n6.type), senderPublicKey: typeof n6.senderPublicKey < "u" ? toString3(n6.senderPublicKey, V2) : void 0, receiverPublicKey: t2 == null ? void 0 : t2.receiverPublicKey });
}
function rr2(e3) {
  const t2 = (e3 == null ? void 0 : e3.type) || Nt2;
  if (t2 === Oe2) {
    if (typeof (e3 == null ? void 0 : e3.senderPublicKey) > "u")
      throw new Error("missing sender public key");
    if (typeof (e3 == null ? void 0 : e3.receiverPublicKey) > "u")
      throw new Error("missing receiver public key");
  }
  return { type: t2, senderPublicKey: e3 == null ? void 0 : e3.senderPublicKey, receiverPublicKey: e3 == null ? void 0 : e3.receiverPublicKey };
}
function hi(e3) {
  return e3.type === Oe2 && typeof e3.senderPublicKey == "string" && typeof e3.receiverPublicKey == "string";
}
function pi(e3) {
  return e3.type === _e2;
}
function or3(e3) {
  return new import_elliptic.ec("p256").keyFromPublic({ x: Buffer.from(e3.x, "base64").toString("hex"), y: Buffer.from(e3.y, "base64").toString("hex") }, "hex");
}
function gi(e3) {
  let t2 = e3.replace(/-/g, "+").replace(/_/g, "/");
  const n6 = t2.length % 4;
  return n6 > 0 && (t2 += "=".repeat(4 - n6)), t2;
}
function yi(e3) {
  return Buffer.from(gi(e3), "base64");
}
function mi(e3, t2) {
  const [n6, r4, o7] = e3.split("."), s4 = yi(o7);
  if (s4.length !== 64)
    throw new Error("Invalid signature length");
  const i6 = s4.slice(0, 32).toString("hex"), c8 = s4.slice(32, 64).toString("hex"), u5 = `${n6}.${r4}`, a4 = He2(u5), l8 = or3(t2), f9 = toString3(a4, V2);
  if (!l8.verify(f9, { r: i6, s: c8 }))
    throw new Error("Invalid signature");
  return sn(e3).payload;
}
var sr2 = "irn";
function bi(e3) {
  return (e3 == null ? void 0 : e3.relay) || { protocol: sr2 };
}
function wi(e3) {
  const t2 = C2[e3];
  if (typeof t2 > "u")
    throw new Error(`Relay Protocol not supported: ${e3}`);
  return t2;
}
function ir2(e3, t2 = "-") {
  const n6 = {}, r4 = "relay" + t2;
  return Object.keys(e3).forEach((o7) => {
    if (o7.startsWith(r4)) {
      const s4 = o7.replace(r4, ""), i6 = e3[o7];
      n6[s4] = i6;
    }
  }), n6;
}
function Ei(e3) {
  if (!e3.includes("wc:")) {
    const a4 = rt2(e3);
    a4 != null && a4.includes("wc:") && (e3 = a4);
  }
  e3 = e3.includes("wc://") ? e3.replace("wc://", "") : e3, e3 = e3.includes("wc:") ? e3.replace("wc:", "") : e3;
  const t2 = e3.indexOf(":"), n6 = e3.indexOf("?") !== -1 ? e3.indexOf("?") : void 0, r4 = e3.substring(0, t2), o7 = e3.substring(t2 + 1, n6).split("@"), s4 = typeof n6 < "u" ? e3.substring(n6) : "", i6 = new URLSearchParams(s4), c8 = {};
  i6.forEach((a4, l8) => {
    c8[l8] = a4;
  });
  const u5 = typeof c8.methods == "string" ? c8.methods.split(",") : void 0;
  return { protocol: r4, topic: cr2(o7[0]), version: parseInt(o7[1], 10), symKey: c8.symKey, relay: ir2(c8), methods: u5, expiryTimestamp: c8.expiryTimestamp ? parseInt(c8.expiryTimestamp, 10) : void 0 };
}
function cr2(e3) {
  return e3.startsWith("//") ? e3.substring(2) : e3;
}
function ar2(e3, t2 = "-") {
  const n6 = "relay", r4 = {};
  return Object.keys(e3).forEach((o7) => {
    const s4 = o7, i6 = n6 + t2 + s4;
    e3[s4] && (r4[i6] = e3[s4]);
  }), r4;
}
function vi(e3) {
  const t2 = new URLSearchParams(), n6 = ar2(e3.relay);
  Object.keys(n6).sort().forEach((o7) => {
    t2.set(o7, n6[o7]);
  }), t2.set("symKey", e3.symKey), e3.expiryTimestamp && t2.set("expiryTimestamp", e3.expiryTimestamp.toString()), e3.methods && t2.set("methods", e3.methods.join(","));
  const r4 = t2.toString();
  return `${e3.protocol}:${e3.topic}@${e3.version}?${r4}`;
}
function xi(e3, t2, n6) {
  return `${e3}?wc_ev=${n6}&topic=${t2}`;
}
function le2(e3) {
  const t2 = [];
  return e3.forEach((n6) => {
    const [r4, o7] = n6.split(":");
    t2.push(`${r4}:${o7}`);
  }), t2;
}
function lr2(e3) {
  const t2 = [];
  return Object.values(e3).forEach((n6) => {
    t2.push(...le2(n6.accounts));
  }), t2;
}
function dr2(e3, t2) {
  const n6 = [];
  return Object.values(e3).forEach((r4) => {
    le2(r4.accounts).includes(t2) && n6.push(...r4.methods);
  }), n6;
}
function hr2(e3, t2) {
  const n6 = [];
  return Object.values(e3).forEach((r4) => {
    le2(r4.accounts).includes(t2) && n6.push(...r4.events);
  }), n6;
}
function Tt2(e3) {
  return e3.includes(":");
}
function pr2(e3) {
  return Tt2(e3) ? e3.split(":")[0] : e3;
}
function gr2(e3) {
  const t2 = {};
  return e3 == null ? void 0 : e3.forEach((n6) => {
    var r4;
    const [o7, s4] = n6.split(":");
    t2[o7] || (t2[o7] = { accounts: [], chains: [], events: [], methods: [] }), t2[o7].accounts.push(n6), (r4 = t2[o7].chains) == null || r4.push(`${o7}:${s4}`);
  }), t2;
}
function Ri(e3, t2) {
  t2 = t2.map((r4) => r4.replace("did:pkh:", ""));
  const n6 = gr2(t2);
  for (const [r4, o7] of Object.entries(n6))
    o7.methods ? o7.methods = Q2(o7.methods, e3) : o7.methods = e3, o7.events = ["chainChanged", "accountsChanged"];
  return n6;
}
var yr2 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var mr2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function te2(e3, t2) {
  const { message: n6, code: r4 } = mr2[e3];
  return { message: t2 ? `${n6} ${t2}` : n6, code: r4 };
}
function de2(e3, t2) {
  const { message: n6, code: r4 } = yr2[e3];
  return { message: t2 ? `${n6} ${t2}` : n6, code: r4 };
}
function $e2(e3, t2) {
  return Array.isArray(e3) ? typeof t2 < "u" && e3.length ? e3.every(t2) : true : false;
}
function qe2(e3) {
  return Object.getPrototypeOf(e3) === Object.prototype && Object.keys(e3).length;
}
function ae(e3) {
  return typeof e3 > "u";
}
function q(e3, t2) {
  return t2 && ae(e3) ? true : typeof e3 == "string" && !!e3.trim().length;
}
function Ge2(e3, t2) {
  return t2 && ae(e3) ? true : typeof e3 == "number" && !isNaN(e3);
}
function Pi2(e3, t2) {
  const { requiredNamespaces: n6 } = t2, r4 = Object.keys(e3.namespaces), o7 = Object.keys(n6);
  let s4 = true;
  return re(o7, r4) ? (r4.forEach((i6) => {
    const { accounts: c8, methods: u5, events: a4 } = e3.namespaces[i6], l8 = le2(c8), f9 = n6[i6];
    (!re(Be2(i6, f9), l8) || !re(f9.methods, u5) || !re(f9.events, a4)) && (s4 = false);
  }), s4) : false;
}
function Re2(e3) {
  return q(e3, false) && e3.includes(":") ? e3.split(":").length === 2 : false;
}
function br2(e3) {
  if (q(e3, false) && e3.includes(":")) {
    const t2 = e3.split(":");
    if (t2.length === 3) {
      const n6 = t2[0] + ":" + t2[1];
      return !!t2[2] && Re2(n6);
    }
  }
  return false;
}
function Bi(e3) {
  function t2(n6) {
    try {
      return typeof new URL(n6) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (q(e3, false)) {
      if (t2(e3))
        return true;
      const n6 = rt2(e3);
      return t2(n6);
    }
  } catch {
  }
  return false;
}
function Li(e3) {
  var t2;
  return (t2 = e3 == null ? void 0 : e3.proposer) == null ? void 0 : t2.publicKey;
}
function ji(e3) {
  return e3 == null ? void 0 : e3.topic;
}
function Ci(e3, t2) {
  let n6 = null;
  return q(e3 == null ? void 0 : e3.publicKey, false) || (n6 = te2("MISSING_OR_INVALID", `${t2} controller public key should be a string`)), n6;
}
function Rt2(e3) {
  let t2 = true;
  return $e2(e3) ? e3.length && (t2 = e3.every((n6) => q(n6, false))) : t2 = false, t2;
}
function wr2(e3, t2, n6) {
  let r4 = null;
  return $e2(t2) && t2.length ? t2.forEach((o7) => {
    r4 || Re2(o7) || (r4 = de2("UNSUPPORTED_CHAINS", `${n6}, chain ${o7} should be a string and conform to "namespace:chainId" format`));
  }) : Re2(e3) || (r4 = de2("UNSUPPORTED_CHAINS", `${n6}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r4;
}
function Er2(e3, t2, n6) {
  let r4 = null;
  return Object.entries(e3).forEach(([o7, s4]) => {
    if (r4)
      return;
    const i6 = wr2(o7, Be2(o7, s4), `${t2} ${n6}`);
    i6 && (r4 = i6);
  }), r4;
}
function vr2(e3, t2) {
  let n6 = null;
  return $e2(e3) ? e3.forEach((r4) => {
    n6 || br2(r4) || (n6 = de2("UNSUPPORTED_ACCOUNTS", `${t2}, account ${r4} should be a string and conform to "namespace:chainId:address" format`));
  }) : n6 = de2("UNSUPPORTED_ACCOUNTS", `${t2}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n6;
}
function xr2(e3, t2) {
  let n6 = null;
  return Object.values(e3).forEach((r4) => {
    if (n6)
      return;
    const o7 = vr2(r4 == null ? void 0 : r4.accounts, `${t2} namespace`);
    o7 && (n6 = o7);
  }), n6;
}
function Ir2(e3, t2) {
  let n6 = null;
  return Rt2(e3 == null ? void 0 : e3.methods) ? Rt2(e3 == null ? void 0 : e3.events) || (n6 = de2("UNSUPPORTED_EVENTS", `${t2}, events should be an array of strings or empty array for no events`)) : n6 = de2("UNSUPPORTED_METHODS", `${t2}, methods should be an array of strings or empty array for no methods`), n6;
}
function Pt2(e3, t2) {
  let n6 = null;
  return Object.values(e3).forEach((r4) => {
    if (n6)
      return;
    const o7 = Ir2(r4, `${t2}, namespace`);
    o7 && (n6 = o7);
  }), n6;
}
function ki(e3, t2, n6) {
  let r4 = null;
  if (e3 && qe2(e3)) {
    const o7 = Pt2(e3, t2);
    o7 && (r4 = o7);
    const s4 = Er2(e3, t2, n6);
    s4 && (r4 = s4);
  } else
    r4 = te2("MISSING_OR_INVALID", `${t2}, ${n6} should be an object with data`);
  return r4;
}
function Or2(e3, t2) {
  let n6 = null;
  if (e3 && qe2(e3)) {
    const r4 = Pt2(e3, t2);
    r4 && (n6 = r4);
    const o7 = xr2(e3, t2);
    o7 && (n6 = o7);
  } else
    n6 = te2("MISSING_OR_INVALID", `${t2}, namespaces should be an object with data`);
  return n6;
}
function Ar2(e3) {
  return q(e3.protocol, true);
}
function Di(e3, t2) {
  let n6 = false;
  return t2 && !e3 ? n6 = true : e3 && $e2(e3) && e3.length && e3.forEach((r4) => {
    n6 = Ar2(r4);
  }), n6;
}
function Mi(e3) {
  return typeof e3 == "number";
}
function Vi(e3) {
  return typeof e3 < "u" && typeof e3 !== null;
}
function Hi(e3) {
  return !(!e3 || typeof e3 != "object" || !e3.code || !Ge2(e3.code, false) || !e3.message || !q(e3.message, false));
}
function Ki(e3) {
  return !(ae(e3) || !q(e3.method, false));
}
function Fi(e3) {
  return !(ae(e3) || ae(e3.result) && ae(e3.error) || !Ge2(e3.id, false) || !q(e3.jsonrpc, false));
}
function qi(e3) {
  return !(ae(e3) || !q(e3.name, false));
}
function Gi(e3, t2) {
  return !(!Re2(t2) || !lr2(e3).includes(t2));
}
function Wi(e3, t2, n6) {
  return q(n6, false) ? dr2(e3, t2).includes(n6) : false;
}
function zi(e3, t2, n6) {
  return q(n6, false) ? hr2(e3, t2).includes(n6) : false;
}
function Nr2(e3, t2, n6) {
  let r4 = null;
  const o7 = Ji(e3), s4 = Yi(t2), i6 = Object.keys(o7), c8 = Object.keys(s4), u5 = Sr2(Object.keys(e3)), a4 = Sr2(Object.keys(t2)), l8 = u5.filter((f9) => !a4.includes(f9));
  return l8.length && (r4 = te2("NON_CONFORMING_NAMESPACES", `${n6} namespaces keys don't satisfy requiredNamespaces.
      Required: ${l8.toString()}
      Received: ${Object.keys(t2).toString()}`)), re(i6, c8) || (r4 = te2("NON_CONFORMING_NAMESPACES", `${n6} namespaces chains don't satisfy required namespaces.
      Required: ${i6.toString()}
      Approved: ${c8.toString()}`)), Object.keys(t2).forEach((f9) => {
    if (!f9.includes(":") || r4)
      return;
    const d6 = le2(t2[f9].accounts);
    d6.includes(f9) || (r4 = te2("NON_CONFORMING_NAMESPACES", `${n6} namespaces accounts don't satisfy namespace accounts for ${f9}
        Required: ${f9}
        Approved: ${d6.toString()}`));
  }), i6.forEach((f9) => {
    r4 || (re(o7[f9].methods, s4[f9].methods) ? re(o7[f9].events, s4[f9].events) || (r4 = te2("NON_CONFORMING_NAMESPACES", `${n6} namespaces events don't satisfy namespace events for ${f9}`)) : r4 = te2("NON_CONFORMING_NAMESPACES", `${n6} namespaces methods don't satisfy namespace methods for ${f9}`));
  }), r4;
}
function Ji(e3) {
  const t2 = {};
  return Object.keys(e3).forEach((n6) => {
    var r4;
    n6.includes(":") ? t2[n6] = e3[n6] : (r4 = e3[n6].chains) == null || r4.forEach((o7) => {
      t2[o7] = { methods: e3[n6].methods, events: e3[n6].events };
    });
  }), t2;
}
function Sr2(e3) {
  return [...new Set(e3.map((t2) => t2.includes(":") ? t2.split(":")[0] : t2))];
}
function Yi(e3) {
  const t2 = {};
  return Object.keys(e3).forEach((n6) => {
    if (n6.includes(":"))
      t2[n6] = e3[n6];
    else {
      const r4 = le2(e3[n6].accounts);
      r4 == null ? void 0 : r4.forEach((o7) => {
        t2[o7] = { accounts: e3[n6].accounts.filter((s4) => s4.includes(`${o7}:`)), methods: e3[n6].methods, events: e3[n6].events };
      });
    }
  }), t2;
}
function Xi(e3, t2) {
  return Ge2(e3, false) && e3 <= t2.max && e3 >= t2.min;
}
function Zi() {
  const e3 = ue();
  return new Promise((t2) => {
    switch (e3) {
      case H2.browser:
        t2(Ur2());
        break;
      case H2.reactNative:
        t2(_r2());
        break;
      case H2.node:
        t2(Tr2());
        break;
      default:
        t2(true);
    }
  });
}
function Ur2() {
  return Ae2() && (navigator == null ? void 0 : navigator.onLine);
}
async function _r2() {
  if (ne() && typeof globalThis < "u" && globalThis != null && globalThis.NetInfo) {
    const e3 = await (globalThis == null ? void 0 : globalThis.NetInfo.fetch());
    return e3 == null ? void 0 : e3.isConnected;
  }
  return true;
}
function Tr2() {
  return true;
}
function Qi(e3) {
  switch (ue()) {
    case H2.browser:
      $r2(e3);
      break;
    case H2.reactNative:
      Rr2(e3);
      break;
    case H2.node:
      break;
  }
}
function $r2(e3) {
  !ne() && Ae2() && (window.addEventListener("online", () => e3(true)), window.addEventListener("offline", () => e3(false)));
}
function Rr2(e3) {
  ne() && typeof globalThis < "u" && globalThis != null && globalThis.NetInfo && (globalThis == null ? void 0 : globalThis.NetInfo.addEventListener((t2) => e3(t2 == null ? void 0 : t2.isConnected)));
}
var Bt2 = {};
var ec = class {
  static get(t2) {
    return Bt2[t2];
  }
  static set(t2, n6) {
    Bt2[t2] = n6;
  }
  static delete(t2) {
    delete Bt2[t2];
  }
};

// ../../node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n5,
  IEvents: () => e2,
  IJsonRpcConnection: () => o3,
  IJsonRpcProvider: () => r3,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e3) => e3.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e3, url, type) {
  return e3.message.includes("getaddrinfo ENOTFOUND") || e3.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e3;
}

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs4());
__reExport(env_exports, __toESM(require_cjs4()));
var isNodeJs = import_environment.isNode;

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x6) => x6.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// ../../node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e2 = class {
};
var o3 = class extends e2 {
  constructor(c8) {
    super();
  }
};
var n5 = class extends e2 {
  constructor() {
    super();
  }
};
var r3 = class extends n5 {
  constructor(c8) {
    super();
  }
};

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// ../../node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// ../../node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o4 = class extends r3 {
  constructor(t2) {
    super(t2), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t2), this.connection.connected && this.registerEventListeners();
  }
  async connect(t2 = this.connection) {
    await this.open(t2);
  }
  async disconnect() {
    await this.close();
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async request(t2, e3) {
    return this.requestStrict(formatJsonRpcRequest(t2.method, t2.params || [], t2.id || getBigIntRpcId().toString()), e3);
  }
  async requestStrict(t2, e3) {
    return new Promise(async (i6, s4) => {
      if (!this.connection.connected)
        try {
          await this.open();
        } catch (n6) {
          s4(n6);
        }
      this.events.on(`${t2.id}`, (n6) => {
        isJsonRpcError(n6) ? s4(n6.error) : i6(n6.result);
      });
      try {
        await this.connection.send(t2, e3);
      } catch (n6) {
        s4(n6);
      }
    });
  }
  setConnection(t2 = this.connection) {
    return t2;
  }
  onPayload(t2) {
    this.events.emit("payload", t2), isJsonRpcResponse(t2) ? this.events.emit(`${t2.id}`, t2) : this.events.emit("message", { type: t2.method, data: t2.params });
  }
  onClose(t2) {
    t2 && t2.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t2.code} ${t2.reason ? `(${t2.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t2 = this.connection) {
    this.connection === t2 && this.connection.connected || (this.connection.connected && this.close(), typeof t2 == "string" && (await this.connection.open(t2), t2 = this.connection), this.connection = this.setConnection(t2), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t2) => this.onPayload(t2)), this.connection.on("close", (t2) => this.onClose(t2)), this.connection.on("error", (t2) => this.events.emit("error", t2)), this.connection.on("register_error", (t2) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// ../../node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v3 = () => typeof WebSocket < "u" ? WebSocket : typeof globalThis < "u" && typeof globalThis.WebSocket < "u" ? globalThis.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser2();
var w3 = () => typeof WebSocket < "u" || typeof globalThis < "u" && typeof globalThis.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d3 = (r4) => r4.split("?")[0];
var h5 = 10;
var b3 = v3();
var f6 = class {
  constructor(e3) {
    if (this.url = e3, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e3))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    this.url = e3;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async open(e3 = this.url) {
    await this.register(e3);
  }
  async close() {
    return new Promise((e3, t2) => {
      if (typeof this.socket > "u") {
        t2(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n6) => {
        this.onClose(n6), e3();
      }, this.socket.close();
    });
  }
  async send(e3) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e3));
    } catch (t2) {
      this.onError(e3.id, t2);
    }
  }
  register(e3 = this.url) {
    if (!isWsUrl(e3))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    if (this.registering) {
      const t2 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t2 || this.events.listenerCount("open") >= t2) && this.events.setMaxListeners(t2 + 1), new Promise((n6, s4) => {
        this.events.once("register_error", (o7) => {
          this.resetMaxListeners(), s4(o7);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u")
            return s4(new Error("WebSocket connection is missing or invalid"));
          n6(this.socket);
        });
      });
    }
    return this.url = e3, this.registering = true, new Promise((t2, n6) => {
      const s4 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e3) }, o7 = new b3(e3, [], s4);
      w3() ? o7.onerror = (i6) => {
        const a4 = i6;
        n6(this.emitError(a4.error));
      } : o7.on("error", (i6) => {
        n6(this.emitError(i6));
      }), o7.onopen = () => {
        this.onOpen(o7), t2(o7);
      };
    });
  }
  onOpen(e3) {
    e3.onmessage = (t2) => this.onPayload(t2), e3.onclose = (t2) => this.onClose(t2), this.socket = e3, this.registering = false, this.events.emit("open");
  }
  onClose(e3) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e3);
  }
  onPayload(e3) {
    if (typeof e3.data > "u")
      return;
    const t2 = typeof e3.data == "string" ? safeJsonParse(e3.data) : e3.data;
    this.events.emit("payload", t2);
  }
  onError(e3, t2) {
    const n6 = this.parseError(t2), s4 = n6.message || n6.toString(), o7 = formatJsonRpcError(e3, s4);
    this.events.emit("payload", o7);
  }
  parseError(e3, t2 = this.url) {
    return parseConnectionError(e3, d3(t2), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h5 && this.events.setMaxListeners(h5);
  }
  emitError(e3) {
    const t2 = this.parseError(new Error((e3 == null ? void 0 : e3.message) || `WebSocket connection failed for host: ${d3(this.url)}`));
    return this.events.emit("register_error", t2), t2;
  }
};

// ../../node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var ze3 = "wc";
var Le2 = 2;
var he2 = "core";
var B2 = `${ze3}@2:${he2}:`;
var Et3 = { name: he2, logger: "error" };
var It3 = { database: ":memory:" };
var Tt3 = "crypto";
var ke3 = "client_ed25519_seed";
var Ct2 = import_time4.ONE_DAY;
var Pt3 = "keychain";
var St3 = "0.3";
var Rt3 = "messages";
var Ot3 = "0.3";
var je3 = import_time4.SIX_HOURS;
var At2 = "publisher";
var xt3 = "irn";
var Nt3 = "error";
var Ue3 = "wss://relay.walletconnect.org";
var $t2 = "relayer";
var C3 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt3 = "_subscription";
var L2 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt3 = 0.1;
var _e3 = "2.19.1";
var Q3 = { link_mode: "link_mode", relay: "relay" };
var le3 = { inbound: "inbound", outbound: "outbound" };
var kt3 = "0.3";
var jt3 = "WALLETCONNECT_CLIENT_ID";
var Me3 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut3 = "subscription";
var Mt2 = "0.3";
var Hs2 = import_time4.FIVE_SECONDS * 1e3;
var Ft3 = "pairing";
var Kt2 = "0.3";
var ie2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var se2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var M4 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt3 = "history";
var Vt2 = "0.3";
var qt2 = "expirer";
var F2 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt3 = "0.3";
var Wt3 = "verify-api";
var Xs2 = "https://verify.walletconnect.com";
var Ht2 = "https://verify.walletconnect.org";
var ue2 = Ht2;
var Yt3 = `${ue2}/v3`;
var Jt3 = [Xs2, Ht2];
var Xt2 = "echo";
var Zt2 = "https://echo.walletconnect.com";
var G2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var Qs2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var er3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var tr3 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var ir3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt2 = 0.1;
var ei2 = "event-client";
var ti2 = 86400;
var ii2 = "https://pulse.walletconnect.org/batch";
function sr3(r4, e3) {
  if (r4.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t2 = new Uint8Array(256), s4 = 0; s4 < t2.length; s4++)
    t2[s4] = 255;
  for (var i6 = 0; i6 < r4.length; i6++) {
    var n6 = r4.charAt(i6), o7 = n6.charCodeAt(0);
    if (t2[o7] !== 255)
      throw new TypeError(n6 + " is ambiguous");
    t2[o7] = i6;
  }
  var a4 = r4.length, c8 = r4.charAt(0), h6 = Math.log(a4) / Math.log(256), u5 = Math.log(256) / Math.log(a4);
  function d6(l8) {
    if (l8 instanceof Uint8Array || (ArrayBuffer.isView(l8) ? l8 = new Uint8Array(l8.buffer, l8.byteOffset, l8.byteLength) : Array.isArray(l8) && (l8 = Uint8Array.from(l8))), !(l8 instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (l8.length === 0)
      return "";
    for (var b6 = 0, x6 = 0, I4 = 0, D3 = l8.length; I4 !== D3 && l8[I4] === 0; )
      I4++, b6++;
    for (var j4 = (D3 - I4) * u5 + 1 >>> 0, T4 = new Uint8Array(j4); I4 !== D3; ) {
      for (var q2 = l8[I4], J6 = 0, K5 = j4 - 1; (q2 !== 0 || J6 < x6) && K5 !== -1; K5--, J6++)
        q2 += 256 * T4[K5] >>> 0, T4[K5] = q2 % a4 >>> 0, q2 = q2 / a4 >>> 0;
      if (q2 !== 0)
        throw new Error("Non-zero carry");
      x6 = J6, I4++;
    }
    for (var H4 = j4 - x6; H4 !== j4 && T4[H4] === 0; )
      H4++;
    for (var me5 = c8.repeat(b6); H4 < j4; ++H4)
      me5 += r4.charAt(T4[H4]);
    return me5;
  }
  function g5(l8) {
    if (typeof l8 != "string")
      throw new TypeError("Expected String");
    if (l8.length === 0)
      return new Uint8Array();
    var b6 = 0;
    if (l8[b6] !== " ") {
      for (var x6 = 0, I4 = 0; l8[b6] === c8; )
        x6++, b6++;
      for (var D3 = (l8.length - b6) * h6 + 1 >>> 0, j4 = new Uint8Array(D3); l8[b6]; ) {
        var T4 = t2[l8.charCodeAt(b6)];
        if (T4 === 255)
          return;
        for (var q2 = 0, J6 = D3 - 1; (T4 !== 0 || q2 < I4) && J6 !== -1; J6--, q2++)
          T4 += a4 * j4[J6] >>> 0, j4[J6] = T4 % 256 >>> 0, T4 = T4 / 256 >>> 0;
        if (T4 !== 0)
          throw new Error("Non-zero carry");
        I4 = q2, b6++;
      }
      if (l8[b6] !== " ") {
        for (var K5 = D3 - I4; K5 !== D3 && j4[K5] === 0; )
          K5++;
        for (var H4 = new Uint8Array(x6 + (D3 - K5)), me5 = x6; K5 !== D3; )
          H4[me5++] = j4[K5++];
        return H4;
      }
    }
  }
  function _4(l8) {
    var b6 = g5(l8);
    if (b6)
      return b6;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: d6, decodeUnsafe: g5, decode: _4 };
}
var rr3 = sr3;
var nr3 = rr3;
var si2 = (r4) => {
  if (r4 instanceof Uint8Array && r4.constructor.name === "Uint8Array")
    return r4;
  if (r4 instanceof ArrayBuffer)
    return new Uint8Array(r4);
  if (ArrayBuffer.isView(r4))
    return new Uint8Array(r4.buffer, r4.byteOffset, r4.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var or4 = (r4) => new TextEncoder().encode(r4);
var ar3 = (r4) => new TextDecoder().decode(r4);
var cr3 = class {
  constructor(e3, t2, s4) {
    this.name = e3, this.prefix = t2, this.baseEncode = s4;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var hr3 = class {
  constructor(e3, t2, s4) {
    if (this.name = e3, this.prefix = t2, t2.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = t2.codePointAt(0), this.baseDecode = s4;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return ri2(this, e3);
  }
};
var lr3 = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return ri2(this, e3);
  }
  decode(e3) {
    const t2 = e3[0], s4 = this.decoders[t2];
    if (s4)
      return s4.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r4, e3) => new lr3({ ...r4.decoders || { [r4.prefix]: r4 }, ...e3.decoders || { [e3.prefix]: e3 } });
var ur2 = class {
  constructor(e3, t2, s4, i6) {
    this.name = e3, this.prefix = t2, this.baseEncode = s4, this.baseDecode = i6, this.encoder = new cr3(e3, t2, s4), this.decoder = new hr3(e3, t2, i6);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Ee3 = ({ name: r4, prefix: e3, encode: t2, decode: s4 }) => new ur2(r4, e3, t2, s4);
var de3 = ({ prefix: r4, name: e3, alphabet: t2 }) => {
  const { encode: s4, decode: i6 } = nr3(t2, e3);
  return Ee3({ prefix: r4, name: e3, encode: s4, decode: (n6) => si2(i6(n6)) });
};
var dr3 = (r4, e3, t2, s4) => {
  const i6 = {};
  for (let u5 = 0; u5 < e3.length; ++u5)
    i6[e3[u5]] = u5;
  let n6 = r4.length;
  for (; r4[n6 - 1] === "="; )
    --n6;
  const o7 = new Uint8Array(n6 * t2 / 8 | 0);
  let a4 = 0, c8 = 0, h6 = 0;
  for (let u5 = 0; u5 < n6; ++u5) {
    const d6 = i6[r4[u5]];
    if (d6 === void 0)
      throw new SyntaxError(`Non-${s4} character`);
    c8 = c8 << t2 | d6, a4 += t2, a4 >= 8 && (a4 -= 8, o7[h6++] = 255 & c8 >> a4);
  }
  if (a4 >= t2 || 255 & c8 << 8 - a4)
    throw new SyntaxError("Unexpected end of data");
  return o7;
};
var gr3 = (r4, e3, t2) => {
  const s4 = e3[e3.length - 1] === "=", i6 = (1 << t2) - 1;
  let n6 = "", o7 = 0, a4 = 0;
  for (let c8 = 0; c8 < r4.length; ++c8)
    for (a4 = a4 << 8 | r4[c8], o7 += 8; o7 > t2; )
      o7 -= t2, n6 += e3[i6 & a4 >> o7];
  if (o7 && (n6 += e3[i6 & a4 << t2 - o7]), s4)
    for (; n6.length * t2 & 7; )
      n6 += "=";
  return n6;
};
var P4 = ({ name: r4, prefix: e3, bitsPerChar: t2, alphabet: s4 }) => Ee3({ prefix: e3, name: r4, encode(i6) {
  return gr3(i6, s4, t2);
}, decode(i6) {
  return dr3(i6, s4, t2, r4);
} });
var pr3 = Ee3({ prefix: "\0", name: "identity", encode: (r4) => ar3(r4), decode: (r4) => or4(r4) });
var yr3 = Object.freeze({ __proto__: null, identity: pr3 });
var br3 = P4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var mr3 = Object.freeze({ __proto__: null, base2: br3 });
var fr2 = P4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Dr3 = Object.freeze({ __proto__: null, base8: fr2 });
var vr3 = de3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var wr3 = Object.freeze({ __proto__: null, base10: vr3 });
var _r3 = P4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Er3 = P4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Ir3 = Object.freeze({ __proto__: null, base16: _r3, base16upper: Er3 });
var Tr3 = P4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Cr2 = P4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Pr2 = P4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Sr3 = P4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Rr3 = P4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var Or3 = P4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Ar3 = P4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var xr3 = P4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var Nr3 = P4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var $r3 = Object.freeze({ __proto__: null, base32: Tr3, base32upper: Cr2, base32pad: Pr2, base32padupper: Sr3, base32hex: Rr3, base32hexupper: Or3, base32hexpad: Ar3, base32hexpadupper: xr3, base32z: Nr3 });
var zr3 = de3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Lr3 = de3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var kr2 = Object.freeze({ __proto__: null, base36: zr3, base36upper: Lr3 });
var jr2 = de3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Ur3 = de3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Mr2 = Object.freeze({ __proto__: null, base58btc: jr2, base58flickr: Ur3 });
var Fr2 = P4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Kr3 = P4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Br3 = P4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Vr2 = P4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var qr2 = Object.freeze({ __proto__: null, base64: Fr2, base64pad: Kr3, base64url: Br3, base64urlpad: Vr2 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Gr2 = ni2.reduce((r4, e3, t2) => (r4[t2] = e3, r4), []);
var Wr2 = ni2.reduce((r4, e3, t2) => (r4[e3.codePointAt(0)] = t2, r4), []);
function Hr2(r4) {
  return r4.reduce((e3, t2) => (e3 += Gr2[t2], e3), "");
}
function Yr3(r4) {
  const e3 = [];
  for (const t2 of r4) {
    const s4 = Wr2[t2.codePointAt(0)];
    if (s4 === void 0)
      throw new Error(`Non-base256emoji character: ${t2}`);
    e3.push(s4);
  }
  return new Uint8Array(e3);
}
var Jr3 = Ee3({ prefix: "🚀", name: "base256emoji", encode: Hr2, decode: Yr3 });
var Xr3 = Object.freeze({ __proto__: null, base256emoji: Jr3 });
var Zr2 = ai2;
var oi2 = 128;
var Qr3 = 127;
var en3 = ~Qr3;
var tn2 = Math.pow(2, 31);
function ai2(r4, e3, t2) {
  e3 = e3 || [], t2 = t2 || 0;
  for (var s4 = t2; r4 >= tn2; )
    e3[t2++] = r4 & 255 | oi2, r4 /= 128;
  for (; r4 & en3; )
    e3[t2++] = r4 & 255 | oi2, r4 >>>= 7;
  return e3[t2] = r4 | 0, ai2.bytes = t2 - s4 + 1, e3;
}
var sn3 = Fe2;
var rn3 = 128;
var ci2 = 127;
function Fe2(r4, s4) {
  var t2 = 0, s4 = s4 || 0, i6 = 0, n6 = s4, o7, a4 = r4.length;
  do {
    if (n6 >= a4)
      throw Fe2.bytes = 0, new RangeError("Could not decode varint");
    o7 = r4[n6++], t2 += i6 < 28 ? (o7 & ci2) << i6 : (o7 & ci2) * Math.pow(2, i6), i6 += 7;
  } while (o7 >= rn3);
  return Fe2.bytes = n6 - s4, t2;
}
var nn3 = Math.pow(2, 7);
var on3 = Math.pow(2, 14);
var an2 = Math.pow(2, 21);
var cn2 = Math.pow(2, 28);
var hn2 = Math.pow(2, 35);
var ln2 = Math.pow(2, 42);
var un2 = Math.pow(2, 49);
var dn2 = Math.pow(2, 56);
var gn3 = Math.pow(2, 63);
var pn2 = function(r4) {
  return r4 < nn3 ? 1 : r4 < on3 ? 2 : r4 < an2 ? 3 : r4 < cn2 ? 4 : r4 < hn2 ? 5 : r4 < ln2 ? 6 : r4 < un2 ? 7 : r4 < dn2 ? 8 : r4 < gn3 ? 9 : 10;
};
var yn3 = { encode: Zr2, decode: sn3, encodingLength: pn2 };
var hi2 = yn3;
var li2 = (r4, e3, t2 = 0) => (hi2.encode(r4, e3, t2), e3);
var ui2 = (r4) => hi2.encodingLength(r4);
var Ke3 = (r4, e3) => {
  const t2 = e3.byteLength, s4 = ui2(r4), i6 = s4 + ui2(t2), n6 = new Uint8Array(i6 + t2);
  return li2(r4, n6, 0), li2(t2, n6, s4), n6.set(e3, i6), new bn3(r4, t2, e3, n6);
};
var bn3 = class {
  constructor(e3, t2, s4, i6) {
    this.code = e3, this.size = t2, this.digest = s4, this.bytes = i6;
  }
};
var di2 = ({ name: r4, code: e3, encode: t2 }) => new mn3(r4, e3, t2);
var mn3 = class {
  constructor(e3, t2, s4) {
    this.name = e3, this.code = t2, this.encode = s4;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const t2 = this.encode(e3);
      return t2 instanceof Uint8Array ? Ke3(this.code, t2) : t2.then((s4) => Ke3(this.code, s4));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r4) => async (e3) => new Uint8Array(await crypto.subtle.digest(r4, e3));
var fn2 = di2({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var Dn2 = di2({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var vn3 = Object.freeze({ __proto__: null, sha256: fn2, sha512: Dn2 });
var pi2 = 0;
var wn2 = "identity";
var yi2 = si2;
var _n3 = (r4) => Ke3(pi2, yi2(r4));
var En3 = { code: pi2, name: wn2, encode: yi2, digest: _n3 };
var In3 = Object.freeze({ __proto__: null, identity: En3 });
new TextEncoder(), new TextDecoder();
var bi2 = { ...yr3, ...mr3, ...Dr3, ...wr3, ...Ir3, ...$r3, ...kr2, ...Mr2, ...qr2, ...Xr3 };
({ ...vn3, ...In3 });
function Tn3(r4 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r4) : new Uint8Array(r4);
}
function mi2(r4, e3, t2, s4) {
  return { name: r4, prefix: e3, encoder: { name: r4, prefix: e3, encode: t2 }, decoder: { decode: s4 } };
}
var fi2 = mi2("utf8", "u", (r4) => "u" + new TextDecoder("utf8").decode(r4), (r4) => new TextEncoder().encode(r4.substring(1)));
var Be3 = mi2("ascii", "a", (r4) => {
  let e3 = "a";
  for (let t2 = 0; t2 < r4.length; t2++)
    e3 += String.fromCharCode(r4[t2]);
  return e3;
}, (r4) => {
  r4 = r4.substring(1);
  const e3 = Tn3(r4.length);
  for (let t2 = 0; t2 < r4.length; t2++)
    e3[t2] = r4.charCodeAt(t2);
  return e3;
});
var Cn3 = { utf8: fi2, "utf-8": fi2, hex: bi2.base16, latin1: Be3, ascii: Be3, binary: Be3, ...bi2 };
function Pn2(r4, e3 = "utf8") {
  const t2 = Cn3[e3];
  if (!t2)
    throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r4, "utf8") : t2.decoder.decode(`${t2.prefix}${r4}`);
}
var Sn2 = Object.defineProperty;
var Rn3 = (r4, e3, t2) => e3 in r4 ? Sn2(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var W2 = (r4, e3, t2) => Rn3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Di2 = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, W2(this, "keychain", /* @__PURE__ */ new Map()), W2(this, "name", Pt3), W2(this, "version", St3), W2(this, "initialized", false), W2(this, "storagePrefix", B2), W2(this, "init", async () => {
      if (!this.initialized) {
        const s4 = await this.getKeyChain();
        typeof s4 < "u" && (this.keychain = s4), this.initialized = true;
      }
    }), W2(this, "has", (s4) => (this.isInitialized(), this.keychain.has(s4))), W2(this, "set", async (s4, i6) => {
      this.isInitialized(), this.keychain.set(s4, i6), await this.persist();
    }), W2(this, "get", (s4) => {
      this.isInitialized();
      const i6 = this.keychain.get(s4);
      if (typeof i6 > "u") {
        const { message: n6 } = te2("NO_MATCHING_KEY", `${this.name}: ${s4}`);
        throw new Error(n6);
      }
      return i6;
    }), W2(this, "del", async (s4) => {
      this.isInitialized(), this.keychain.delete(s4), await this.persist();
    }), this.core = e3, this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e3) {
    await this.core.storage.setItem(this.storageKey, ro2(e3));
  }
  async getKeyChain() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? oo2(e3) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var On3 = Object.defineProperty;
var An2 = (r4, e3, t2) => e3 in r4 ? On3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var S3 = (r4, e3, t2) => An2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var vi2 = class {
  constructor(e3, t2, s4) {
    this.core = e3, this.logger = t2, S3(this, "name", Tt3), S3(this, "keychain"), S3(this, "randomSessionIdentifier", oi()), S3(this, "initialized", false), S3(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S3(this, "hasKeys", (i6) => (this.isInitialized(), this.keychain.has(i6))), S3(this, "getClientId", async () => {
      this.isInitialized();
      const i6 = await this.getClientSeed(), n6 = Po(i6);
      return Qe(n6.publicKey);
    }), S3(this, "generateKeyPair", () => {
      this.isInitialized();
      const i6 = ri();
      return this.setPrivateKey(i6.publicKey, i6.privateKey);
    }), S3(this, "signJWT", async (i6) => {
      this.isInitialized();
      const n6 = await this.getClientSeed(), o7 = Po(n6), a4 = this.randomSessionIdentifier, c8 = Ct2;
      return await Qo(a4, i6, c8, o7);
    }), S3(this, "generateSharedKey", (i6, n6, o7) => {
      this.isInitialized();
      const a4 = this.getPrivateKey(i6), c8 = si(a4, n6);
      return this.setSymKey(c8, o7);
    }), S3(this, "setSymKey", async (i6, n6) => {
      this.isInitialized();
      const o7 = n6 || ii(i6);
      return await this.keychain.set(o7, i6), o7;
    }), S3(this, "deleteKeyPair", async (i6) => {
      this.isInitialized(), await this.keychain.del(i6);
    }), S3(this, "deleteSymKey", async (i6) => {
      this.isInitialized(), await this.keychain.del(i6);
    }), S3(this, "encode", async (i6, n6, o7) => {
      this.isInitialized();
      const a4 = rr2(o7), c8 = safeJsonStringify(n6);
      if (pi(a4))
        return fi(c8, o7 == null ? void 0 : o7.encoding);
      if (hi(a4)) {
        const g5 = a4.senderPublicKey, _4 = a4.receiverPublicKey;
        i6 = await this.generateSharedKey(g5, _4);
      }
      const h6 = this.getSymKey(i6), { type: u5, senderPublicKey: d6 } = a4;
      return ai({ type: u5, symKey: h6, message: c8, senderPublicKey: d6, encoding: o7 == null ? void 0 : o7.encoding });
    }), S3(this, "decode", async (i6, n6, o7) => {
      this.isInitialized();
      const a4 = di(n6, o7);
      if (pi(a4)) {
        const c8 = li(n6, o7 == null ? void 0 : o7.encoding);
        return safeJsonParse(c8);
      }
      if (hi(a4)) {
        const c8 = a4.receiverPublicKey, h6 = a4.senderPublicKey;
        i6 = await this.generateSharedKey(c8, h6);
      }
      try {
        const c8 = this.getSymKey(i6), h6 = ui({ symKey: c8, encoded: n6, encoding: o7 == null ? void 0 : o7.encoding });
        return safeJsonParse(h6);
      } catch (c8) {
        this.logger.error(`Failed to decode message from topic: '${i6}', clientId: '${await this.getClientId()}'`), this.logger.error(c8);
      }
    }), S3(this, "getPayloadType", (i6, n6 = At) => {
      const o7 = Fe({ encoded: i6, encoding: n6 });
      return fe2(o7.type);
    }), S3(this, "getPayloadSenderPublicKey", (i6, n6 = At) => {
      const o7 = Fe({ encoded: i6, encoding: n6 });
      return o7.senderPublicKey ? toString3(o7.senderPublicKey, V2) : void 0;
    }), this.core = e3, this.logger = E2(t2, this.name), this.keychain = s4 || new Di2(this.core, this.logger);
  }
  get context() {
    return y3(this.logger);
  }
  async setPrivateKey(e3, t2) {
    return await this.keychain.set(e3, t2), e3;
  }
  getPrivateKey(e3) {
    return this.keychain.get(e3);
  }
  async getClientSeed() {
    let e3 = "";
    try {
      e3 = this.keychain.get(ke3);
    } catch {
      e3 = oi(), await this.keychain.set(ke3, e3);
    }
    return Pn2(e3, "base16");
  }
  getSymKey(e3) {
    return this.keychain.get(e3);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var xn3 = Object.defineProperty;
var Nn2 = Object.defineProperties;
var $n2 = Object.getOwnPropertyDescriptors;
var wi2 = Object.getOwnPropertySymbols;
var zn3 = Object.prototype.hasOwnProperty;
var Ln3 = Object.prototype.propertyIsEnumerable;
var Ve3 = (r4, e3, t2) => e3 in r4 ? xn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var kn3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    zn3.call(e3, t2) && Ve3(r4, t2, e3[t2]);
  if (wi2)
    for (var t2 of wi2(e3))
      Ln3.call(e3, t2) && Ve3(r4, t2, e3[t2]);
  return r4;
};
var jn3 = (r4, e3) => Nn2(r4, $n2(e3));
var k5 = (r4, e3, t2) => Ve3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var _i = class extends y4 {
  constructor(e3, t2) {
    super(e3, t2), this.logger = e3, this.core = t2, k5(this, "messages", /* @__PURE__ */ new Map()), k5(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k5(this, "name", Rt3), k5(this, "version", Ot3), k5(this, "initialized", false), k5(this, "storagePrefix", B2), k5(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const s4 = await this.getRelayerMessages();
          typeof s4 < "u" && (this.messages = s4);
          const i6 = await this.getRelayerMessagesWithoutClientAck();
          typeof i6 < "u" && (this.messagesWithoutClientAck = i6), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (s4) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s4);
        } finally {
          this.initialized = true;
        }
      }
    }), k5(this, "set", async (s4, i6, n6) => {
      this.isInitialized();
      const o7 = ci(i6);
      let a4 = this.messages.get(s4);
      if (typeof a4 > "u" && (a4 = {}), typeof a4[o7] < "u")
        return o7;
      if (a4[o7] = i6, this.messages.set(s4, a4), n6 === le3.inbound) {
        const c8 = this.messagesWithoutClientAck.get(s4) || {};
        this.messagesWithoutClientAck.set(s4, jn3(kn3({}, c8), { [o7]: i6 }));
      }
      return await this.persist(), o7;
    }), k5(this, "get", (s4) => {
      this.isInitialized();
      let i6 = this.messages.get(s4);
      return typeof i6 > "u" && (i6 = {}), i6;
    }), k5(this, "getWithoutAck", (s4) => {
      this.isInitialized();
      const i6 = {};
      for (const n6 of s4) {
        const o7 = this.messagesWithoutClientAck.get(n6) || {};
        i6[n6] = Object.values(o7);
      }
      return i6;
    }), k5(this, "has", (s4, i6) => {
      this.isInitialized();
      const n6 = this.get(s4), o7 = ci(i6);
      return typeof n6[o7] < "u";
    }), k5(this, "ack", async (s4, i6) => {
      this.isInitialized();
      const n6 = this.messagesWithoutClientAck.get(s4);
      if (typeof n6 > "u")
        return;
      const o7 = ci(i6);
      delete n6[o7], Object.keys(n6).length === 0 ? this.messagesWithoutClientAck.delete(s4) : this.messagesWithoutClientAck.set(s4, n6), await this.persist();
    }), k5(this, "del", async (s4) => {
      this.isInitialized(), this.messages.delete(s4), this.messagesWithoutClientAck.delete(s4), await this.persist();
    }), this.logger = E2(e3, this.name), this.core = t2;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e3) {
    await this.core.storage.setItem(this.storageKey, ro2(e3));
  }
  async setRelayerMessagesWithoutClientAck(e3) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, ro2(e3));
  }
  async getRelayerMessages() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? oo2(e3) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e3 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e3 < "u" ? oo2(e3) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Un3 = Object.defineProperty;
var Mn3 = Object.defineProperties;
var Fn3 = Object.getOwnPropertyDescriptors;
var Ei2 = Object.getOwnPropertySymbols;
var Kn3 = Object.prototype.hasOwnProperty;
var Bn3 = Object.prototype.propertyIsEnumerable;
var qe3 = (r4, e3, t2) => e3 in r4 ? Un3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Ie3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    Kn3.call(e3, t2) && qe3(r4, t2, e3[t2]);
  if (Ei2)
    for (var t2 of Ei2(e3))
      Bn3.call(e3, t2) && qe3(r4, t2, e3[t2]);
  return r4;
};
var Ge3 = (r4, e3) => Mn3(r4, Fn3(e3));
var V3 = (r4, e3, t2) => qe3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Vn3 = class extends m2 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, V3(this, "events", new import_events7.EventEmitter()), V3(this, "name", At2), V3(this, "queue", /* @__PURE__ */ new Map()), V3(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), V3(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), V3(this, "needsTransportRestart", false), V3(this, "publish", async (s4, i6, n6) => {
      var o7;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s4, message: i6, opts: n6 } });
      const a4 = (n6 == null ? void 0 : n6.ttl) || je3, c8 = bi(n6), h6 = (n6 == null ? void 0 : n6.prompt) || false, u5 = (n6 == null ? void 0 : n6.tag) || 0, d6 = (n6 == null ? void 0 : n6.id) || getBigIntRpcId().toString(), g5 = { topic: s4, message: i6, opts: { ttl: a4, relay: c8, prompt: h6, tag: u5, id: d6, attestation: n6 == null ? void 0 : n6.attestation, tvf: n6 == null ? void 0 : n6.tvf } }, _4 = `Failed to publish payload, please try again. id:${d6} tag:${u5}`;
      try {
        const l8 = new Promise(async (b6) => {
          const x6 = ({ id: D3 }) => {
            g5.opts.id === D3 && (this.removeRequestFromQueue(D3), this.relayer.events.removeListener(C3.publish, x6), b6(g5));
          };
          this.relayer.events.on(C3.publish, x6);
          const I4 = uo2(new Promise((D3, j4) => {
            this.rpcPublish({ topic: s4, message: i6, ttl: a4, prompt: h6, tag: u5, id: d6, attestation: n6 == null ? void 0 : n6.attestation, tvf: n6 == null ? void 0 : n6.tvf }).then(D3).catch((T4) => {
              this.logger.warn(T4, T4 == null ? void 0 : T4.message), j4(T4);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d6} tag:${u5}`);
          try {
            await I4, this.events.removeListener(C3.publish, x6);
          } catch (D3) {
            this.queue.set(d6, Ge3(Ie3({}, g5), { attempt: 1 })), this.logger.warn(D3, D3 == null ? void 0 : D3.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d6, topic: s4, message: i6, opts: n6 } }), await uo2(l8, this.publishTimeout, _4);
      } catch (l8) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(l8), (o7 = n6 == null ? void 0 : n6.internal) != null && o7.throwOnFailedPublish)
          throw l8;
      } finally {
        this.queue.delete(d6);
      }
    }), V3(this, "on", (s4, i6) => {
      this.events.on(s4, i6);
    }), V3(this, "once", (s4, i6) => {
      this.events.once(s4, i6);
    }), V3(this, "off", (s4, i6) => {
      this.events.off(s4, i6);
    }), V3(this, "removeListener", (s4, i6) => {
      this.events.removeListener(s4, i6);
    }), this.relayer = e3, this.logger = E2(t2, this.name), this.registerEventListeners();
  }
  get context() {
    return y3(this.logger);
  }
  async rpcPublish(e3) {
    var t2, s4, i6, n6;
    const { topic: o7, message: a4, ttl: c8 = je3, prompt: h6, tag: u5, id: d6, attestation: g5, tvf: _4 } = e3, l8 = { method: wi(bi().protocol).publish, params: Ie3({ topic: o7, message: a4, ttl: c8, prompt: h6, tag: u5, attestation: g5 }, _4), id: d6 };
    ae((t2 = l8.params) == null ? void 0 : t2.prompt) && ((s4 = l8.params) == null || delete s4.prompt), ae((i6 = l8.params) == null ? void 0 : i6.tag) && ((n6 = l8.params) == null || delete n6.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: l8 });
    const b6 = await this.relayer.request(l8);
    return this.relayer.events.emit(C3.publish, e3), this.logger.debug("Successfully Published Payload"), b6;
  }
  removeRequestFromQueue(e3) {
    this.queue.delete(e3);
  }
  checkQueue() {
    this.queue.forEach(async (e3, t2) => {
      const s4 = e3.attempt + 1;
      this.queue.set(t2, Ge3(Ie3({}, e3), { attempt: s4 }));
      const { topic: i6, message: n6, opts: o7, attestation: a4 } = e3;
      this.logger.warn({}, `Publisher: queue->publishing: ${e3.opts.id}, tag: ${e3.opts.tag}, attempt: ${s4}`), await this.rpcPublish(Ge3(Ie3({}, e3), { topic: i6, message: n6, ttl: o7.ttl, prompt: o7.prompt, tag: o7.tag, id: o7.id, attestation: a4, tvf: o7.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e3.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r2.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C3.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C3.message_ack, (e3) => {
      this.removeRequestFromQueue(e3.id.toString());
    });
  }
};
var qn3 = Object.defineProperty;
var Gn3 = (r4, e3, t2) => e3 in r4 ? qn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var re2 = (r4, e3, t2) => Gn3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Wn3 = class {
  constructor() {
    re2(this, "map", /* @__PURE__ */ new Map()), re2(this, "set", (e3, t2) => {
      const s4 = this.get(e3);
      this.exists(e3, t2) || this.map.set(e3, [...s4, t2]);
    }), re2(this, "get", (e3) => this.map.get(e3) || []), re2(this, "exists", (e3, t2) => this.get(e3).includes(t2)), re2(this, "delete", (e3, t2) => {
      if (typeof t2 > "u") {
        this.map.delete(e3);
        return;
      }
      if (!this.map.has(e3))
        return;
      const s4 = this.get(e3);
      if (!this.exists(e3, t2))
        return;
      const i6 = s4.filter((n6) => n6 !== t2);
      if (!i6.length) {
        this.map.delete(e3);
        return;
      }
      this.map.set(e3, i6);
    }), re2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Hn3 = Object.defineProperty;
var Yn3 = Object.defineProperties;
var Jn3 = Object.getOwnPropertyDescriptors;
var Ii = Object.getOwnPropertySymbols;
var Xn3 = Object.prototype.hasOwnProperty;
var Zn3 = Object.prototype.propertyIsEnumerable;
var We3 = (r4, e3, t2) => e3 in r4 ? Hn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var ge2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    Xn3.call(e3, t2) && We3(r4, t2, e3[t2]);
  if (Ii)
    for (var t2 of Ii(e3))
      Zn3.call(e3, t2) && We3(r4, t2, e3[t2]);
  return r4;
};
var He3 = (r4, e3) => Yn3(r4, Jn3(e3));
var f7 = (r4, e3, t2) => We3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ti = class extends P2 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, f7(this, "subscriptions", /* @__PURE__ */ new Map()), f7(this, "topicMap", new Wn3()), f7(this, "events", new import_events7.EventEmitter()), f7(this, "name", Ut3), f7(this, "version", Mt2), f7(this, "pending", /* @__PURE__ */ new Map()), f7(this, "cached", []), f7(this, "initialized", false), f7(this, "storagePrefix", B2), f7(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), f7(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), f7(this, "clientId"), f7(this, "batchSubscribeTopicsLimit", 500), f7(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f7(this, "subscribe", async (s4, i6) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s4, opts: i6 } });
      try {
        const n6 = bi(i6), o7 = { topic: s4, relay: n6, transportType: i6 == null ? void 0 : i6.transportType };
        this.pending.set(s4, o7);
        const a4 = await this.rpcSubscribe(s4, n6, i6);
        return typeof a4 == "string" && (this.onSubscribe(a4, o7), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s4, opts: i6 } })), a4;
      } catch (n6) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n6), n6;
      }
    }), f7(this, "unsubscribe", async (s4, i6) => {
      this.isInitialized(), typeof (i6 == null ? void 0 : i6.id) < "u" ? await this.unsubscribeById(s4, i6.id, i6) : await this.unsubscribeByTopic(s4, i6);
    }), f7(this, "isSubscribed", (s4) => new Promise((i6) => {
      i6(this.topicMap.topics.includes(s4));
    })), f7(this, "isKnownTopic", (s4) => new Promise((i6) => {
      i6(this.topicMap.topics.includes(s4) || this.pending.has(s4) || this.cached.some((n6) => n6.topic === s4));
    })), f7(this, "on", (s4, i6) => {
      this.events.on(s4, i6);
    }), f7(this, "once", (s4, i6) => {
      this.events.once(s4, i6);
    }), f7(this, "off", (s4, i6) => {
      this.events.off(s4, i6);
    }), f7(this, "removeListener", (s4, i6) => {
      this.events.removeListener(s4, i6);
    }), f7(this, "start", async () => {
      await this.onConnect();
    }), f7(this, "stop", async () => {
      await this.onDisconnect();
    }), f7(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f7(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected))
        return;
      const s4 = [];
      this.pending.forEach((i6) => {
        s4.push(i6);
      }), await this.batchSubscribe(s4);
    }), f7(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r2.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (s4) => {
        const i6 = $.created;
        this.logger.info(`Emitting ${i6}`), this.logger.debug({ type: "event", event: i6, data: s4 }), await this.persist();
      }), this.events.on($.deleted, async (s4) => {
        const i6 = $.deleted;
        this.logger.info(`Emitting ${i6}`), this.logger.debug({ type: "event", event: i6, data: s4 }), await this.persist();
      });
    }), this.relayer = e3, this.logger = E2(t2, this.name), this.clientId = "";
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e3, t2) {
    let s4 = false;
    try {
      s4 = this.getSubscription(e3).topic === t2;
    } catch {
    }
    return s4;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e3, t2) {
    const s4 = this.topicMap.get(e3);
    await Promise.all(s4.map(async (i6) => await this.unsubscribeById(e3, i6, t2)));
  }
  async unsubscribeById(e3, t2, s4) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: s4 } });
    try {
      const i6 = bi(s4);
      await this.restartToComplete({ topic: e3, id: t2, relay: i6 }), await this.rpcUnsubscribe(e3, t2, i6);
      const n6 = de2("USER_DISCONNECTED", `${this.name}, ${e3}`);
      await this.onUnsubscribe(e3, t2, n6), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: s4 } });
    } catch (i6) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(i6), i6;
    }
  }
  async rpcSubscribe(e3, t2, s4) {
    var i6;
    (!s4 || (s4 == null ? void 0 : s4.transportType) === Q3.relay) && await this.restartToComplete({ topic: e3, id: e3, relay: t2 });
    const n6 = { method: wi(t2.protocol).subscribe, params: { topic: e3 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n6 });
    const o7 = (i6 = s4 == null ? void 0 : s4.internal) == null ? void 0 : i6.throwOnFailedPublish;
    try {
      const a4 = await this.getSubscriptionId(e3);
      if ((s4 == null ? void 0 : s4.transportType) === Q3.link_mode)
        return setTimeout(() => {
          (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n6).catch((u5) => this.logger.warn(u5));
        }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), a4;
      const c8 = new Promise(async (u5) => {
        const d6 = (g5) => {
          g5.topic === e3 && (this.events.removeListener($.created, d6), u5(g5.id));
        };
        this.events.on($.created, d6);
        try {
          const g5 = await uo2(new Promise((_4, l8) => {
            this.relayer.request(n6).catch((b6) => {
              this.logger.warn(b6, b6 == null ? void 0 : b6.message), l8(b6);
            }).then(_4);
          }), this.initialSubscribeTimeout, `Subscribing to ${e3} failed, please try again`);
          this.events.removeListener($.created, d6), u5(g5);
        } catch {
        }
      }), h6 = await uo2(c8, this.subscribeTimeout, `Subscribing to ${e3} failed, please try again`);
      if (!h6 && o7)
        throw new Error(`Subscribing to ${e3} failed, please try again`);
      return h6 ? a4 : null;
    } catch (a4) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C3.connection_stalled), o7)
        throw a4;
    }
    return null;
  }
  async rpcBatchSubscribe(e3) {
    if (!e3.length)
      return;
    const t2 = e3[0].relay, s4 = { method: wi(t2.protocol).batchSubscribe, params: { topics: e3.map((i6) => i6.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 });
    try {
      await await uo2(new Promise((i6) => {
        this.relayer.request(s4).catch((n6) => this.logger.warn(n6)).then(i6);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e3) {
    if (!e3.length)
      return;
    const t2 = e3[0].relay, s4 = { method: wi(t2.protocol).batchFetchMessages, params: { topics: e3.map((n6) => n6.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 });
    let i6;
    try {
      i6 = await await uo2(new Promise((n6, o7) => {
        this.relayer.request(s4).catch((a4) => {
          this.logger.warn(a4), o7(a4);
        }).then(n6);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
    return i6;
  }
  rpcUnsubscribe(e3, t2, s4) {
    const i6 = { method: wi(s4.protocol).unsubscribe, params: { topic: e3, id: t2 } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i6 }), this.relayer.request(i6);
  }
  onSubscribe(e3, t2) {
    this.setSubscription(e3, He3(ge2({}, t2), { id: e3 })), this.pending.delete(t2.topic);
  }
  onBatchSubscribe(e3) {
    e3.length && e3.forEach((t2) => {
      this.setSubscription(t2.id, ge2({}, t2)), this.pending.delete(t2.topic);
    });
  }
  async onUnsubscribe(e3, t2, s4) {
    this.events.removeAllListeners(t2), this.hasSubscription(t2, e3) && this.deleteSubscription(t2, s4), await this.relayer.messages.del(e3);
  }
  async setRelayerSubscriptions(e3) {
    await this.relayer.core.storage.setItem(this.storageKey, e3);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e3, t2) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e3, subscription: t2 }), this.addSubscription(e3, t2);
  }
  addSubscription(e3, t2) {
    this.subscriptions.set(e3, ge2({}, t2)), this.topicMap.set(t2.topic, e3), this.events.emit($.created, t2);
  }
  getSubscription(e3) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e3 });
    const t2 = this.subscriptions.get(e3);
    if (!t2) {
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(s4);
    }
    return t2;
  }
  deleteSubscription(e3, t2) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e3, reason: t2 });
    const s4 = this.getSubscription(e3);
    this.subscriptions.delete(e3), this.topicMap.delete(s4.topic, e3), this.events.emit($.deleted, He3(ge2({}, s4), { reason: t2 }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e3 = [...this.cached], t2 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let s4 = 0; s4 < t2; s4++) {
        const i6 = e3.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(i6);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e3 = await this.getRelayerSubscriptions();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.subscriptions.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e3);
    }
  }
  async batchSubscribe(e3) {
    e3.length && (await this.rpcBatchSubscribe(e3), this.onBatchSubscribe(await Promise.all(e3.map(async (t2) => He3(ge2({}, t2), { id: await this.getSubscriptionId(t2.topic) })))));
  }
  async batchFetchMessages(e3) {
    if (!e3.length)
      return;
    this.logger.trace(`Fetching batch messages for ${e3.length} subscriptions`);
    const t2 = await this.rpcBatchFetchMessages(e3);
    t2 && t2.messages && (await xo2((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t2.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async restartToComplete(e3) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e3), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e3) {
    return ci(e3 + await this.getClientId());
  }
};
var Qn3 = Object.defineProperty;
var Ci2 = Object.getOwnPropertySymbols;
var eo2 = Object.prototype.hasOwnProperty;
var to2 = Object.prototype.propertyIsEnumerable;
var Ye3 = (r4, e3, t2) => e3 in r4 ? Qn3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Pi3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    eo2.call(e3, t2) && Ye3(r4, t2, e3[t2]);
  if (Ci2)
    for (var t2 of Ci2(e3))
      to2.call(e3, t2) && Ye3(r4, t2, e3[t2]);
  return r4;
};
var y5 = (r4, e3, t2) => Ye3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Si = class extends d2 {
  constructor(e3) {
    super(e3), y5(this, "protocol", "wc"), y5(this, "version", 2), y5(this, "core"), y5(this, "logger"), y5(this, "events", new import_events7.EventEmitter()), y5(this, "provider"), y5(this, "messages"), y5(this, "subscriber"), y5(this, "publisher"), y5(this, "name", $t2), y5(this, "transportExplicitlyClosed", false), y5(this, "initialized", false), y5(this, "connectionAttemptInProgress", false), y5(this, "relayUrl"), y5(this, "projectId"), y5(this, "packageName"), y5(this, "bundleId"), y5(this, "hasExperiencedNetworkDisruption", false), y5(this, "pingTimeout"), y5(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), y5(this, "reconnectTimeout"), y5(this, "connectPromise"), y5(this, "reconnectInProgress", false), y5(this, "requestsInFlight", []), y5(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), y5(this, "request", async (t2) => {
      var s4, i6;
      this.logger.debug("Publishing Request Payload");
      const n6 = t2.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n6, method: t2.method, topic: (s4 = t2.params) == null ? void 0 : s4.topic }, "relayer.request - publishing...");
        const o7 = `${n6}:${((i6 = t2.params) == null ? void 0 : i6.tag) || ""}`;
        this.requestsInFlight.push(o7);
        const a4 = await this.provider.request(t2);
        return this.requestsInFlight = this.requestsInFlight.filter((c8) => c8 !== o7), a4;
      } catch (o7) {
        throw this.logger.debug(`Failed to Publish Request: ${n6}`), o7;
      }
    }), y5(this, "resetPingTimeout", () => {
      et() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t2, s4, i6, n6;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n6 = (i6 = (s4 = (t2 = this.provider) == null ? void 0 : t2.connection) == null ? void 0 : s4.socket) == null ? void 0 : i6.terminate) == null || n6.call(i6);
        } catch (o7) {
          this.logger.warn(o7, o7 == null ? void 0 : o7.message);
        }
      }, this.heartBeatTimeout));
    }), y5(this, "onPayloadHandler", (t2) => {
      this.onProviderPayload(t2), this.resetPingTimeout();
    }), y5(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C3.connect);
    }), y5(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y5(this, "onProviderErrorHandler", (t2) => {
      this.logger.fatal(`Fatal socket error: ${t2.message}`), this.events.emit(C3.error, t2), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y5(this, "registerProviderListeners", () => {
      this.provider.on(L2.payload, this.onPayloadHandler), this.provider.on(L2.connect, this.onConnectHandler), this.provider.on(L2.disconnect, this.onDisconnectHandler), this.provider.on(L2.error, this.onProviderErrorHandler);
    }), this.core = e3.core, this.logger = typeof e3.logger < "u" && typeof e3.logger != "string" ? E2(e3.logger, this.name) : (0, import_pino2.default)(k2({ level: e3.logger || Nt3 })), this.messages = new _i(this.logger, e3.core), this.subscriber = new Ti(this, this.logger), this.publisher = new Vn3(this, this.logger), this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ue3, this.projectId = e3.projectId, zr2() ? this.packageName = Yr2() : Jr2() && (this.bundleId = Yr2()), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.hasAnyTopics)
      try {
        await this.transportOpen();
      } catch (e3) {
        this.logger.warn(e3, e3 == null ? void 0 : e3.message);
      }
  }
  get context() {
    return y3(this.logger);
  }
  get connected() {
    var e3, t2, s4;
    return ((s4 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : s4.readyState) === 1 || false;
  }
  get connecting() {
    var e3, t2, s4;
    return ((s4 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : s4.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e3, t2, s4) {
    this.isInitialized(), await this.publisher.publish(e3, t2, s4), await this.recordMessageEvent({ topic: e3, message: t2, publishedAt: Date.now(), transportType: Q3.relay }, le3.outbound);
  }
  async subscribe(e3, t2) {
    var s4, i6, n6;
    this.isInitialized(), (!(t2 != null && t2.transportType) || (t2 == null ? void 0 : t2.transportType) === "relay") && await this.toEstablishConnection();
    const o7 = typeof ((s4 = t2 == null ? void 0 : t2.internal) == null ? void 0 : s4.throwOnFailedPublish) > "u" ? true : (i6 = t2 == null ? void 0 : t2.internal) == null ? void 0 : i6.throwOnFailedPublish;
    let a4 = ((n6 = this.subscriber.topicMap.get(e3)) == null ? void 0 : n6[0]) || "", c8;
    const h6 = (u5) => {
      u5.topic === e3 && (this.subscriber.off($.created, h6), c8());
    };
    return await Promise.all([new Promise((u5) => {
      c8 = u5, this.subscriber.on($.created, h6);
    }), new Promise(async (u5, d6) => {
      a4 = await this.subscriber.subscribe(e3, Pi3({ internal: { throwOnFailedPublish: o7 } }, t2)).catch((g5) => {
        o7 && d6(g5);
      }) || a4, u5();
    })]), a4;
  }
  async unsubscribe(e3, t2) {
    this.isInitialized(), await this.subscriber.unsubscribe(e3, t2);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await uo2(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e3) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t2, s4) => {
      await this.connect(e3).then(t2).catch(s4).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected)
      throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e3) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e3 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await Zi())
      throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e3) {
    if ((e3 == null ? void 0 : e3.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t2 = e3.sort((s4, i6) => s4.publishedAt - i6.publishedAt);
    this.logger.debug(`Batch of ${t2.length} message events sorted`);
    for (const s4 of t2)
      try {
        await this.onMessageEvent(s4);
      } catch (i6) {
        this.logger.warn(i6, "Error while processing batch message event: " + (i6 == null ? void 0 : i6.message));
      }
    this.logger.trace(`Batch of ${t2.length} message events processed`);
  }
  async onLinkMessageEvent(e3, t2) {
    const { topic: s4 } = e3;
    if (!t2.sessionExists) {
      const i6 = po2(import_time4.FIVE_MINUTES), n6 = { topic: s4, expiry: i6, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(s4, n6);
    }
    this.events.emit(C3.message, e3), await this.recordMessageEvent(e3, le3.inbound);
  }
  async connect(e3) {
    await this.confirmOnlineStateOrThrow(), e3 && e3 !== this.relayUrl && (this.relayUrl = e3, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t2 = 1;
    for (; t2 < 6; ) {
      try {
        if (this.transportExplicitlyClosed)
          break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t2}...`), await this.createProvider(), await new Promise(async (s4, i6) => {
          const n6 = () => {
            i6(new Error("Connection interrupted while trying to subscribe"));
          };
          this.provider.once(L2.disconnect, n6), await uo2(new Promise((o7, a4) => {
            this.provider.connect().then(o7).catch(a4);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o7) => {
            i6(o7);
          }).finally(() => {
            this.provider.off(L2.disconnect, n6), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o7, a4) => {
            const c8 = () => {
              a4(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L2.disconnect, c8), await this.subscriber.start().then(o7).catch(a4).finally(() => {
              this.provider.off(L2.disconnect, c8);
            });
          }), this.hasExperiencedNetworkDisruption = false, s4();
        });
      } catch (s4) {
        await this.subscriber.stop();
        const i6 = s4;
        this.logger.warn({}, i6.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t2}`);
        break;
      }
      await new Promise((s4) => setTimeout(s4, (0, import_time4.toMiliseconds)(t2 * 1))), t2++;
    }
  }
  startPingTimeout() {
    var e3, t2, s4, i6, n6;
    if (et())
      try {
        (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) != null && t2.socket && ((n6 = (i6 = (s4 = this.provider) == null ? void 0 : s4.connection) == null ? void 0 : i6.socket) == null || n6.on("ping", () => {
          this.resetPingTimeout();
        })), this.resetPingTimeout();
      } catch (o7) {
        this.logger.warn(o7, o7 == null ? void 0 : o7.message);
      }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e3 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o4(new f6(Qr2({ sdkVersion: _e3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e3, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e3, t2) {
    const { topic: s4, message: i6 } = e3;
    await this.messages.set(s4, i6, t2);
  }
  async shouldIgnoreMessageEvent(e3) {
    const { topic: t2, message: s4 } = e3;
    if (!s4 || s4.length === 0)
      return this.logger.warn(`Ignoring invalid/empty message: ${s4}`), true;
    if (!await this.subscriber.isKnownTopic(t2))
      return this.logger.warn(`Ignoring message for unknown topic ${t2}`), true;
    const i6 = this.messages.has(t2, s4);
    return i6 && this.logger.warn(`Ignoring duplicate message: ${s4}`), i6;
  }
  async onProviderPayload(e3) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e3 }), isJsonRpcRequest(e3)) {
      if (!e3.method.endsWith(zt3))
        return;
      const t2 = e3.params, { topic: s4, message: i6, publishedAt: n6, attestation: o7 } = t2.data, a4 = { topic: s4, message: i6, publishedAt: n6, transportType: Q3.relay, attestation: o7 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Pi3({ type: "event", event: t2.id }, a4)), this.events.emit(t2.id, a4), await this.acknowledgePayload(e3), await this.onMessageEvent(a4);
    } else
      isJsonRpcResponse(e3) && this.events.emit(C3.message_ack, e3);
  }
  async onMessageEvent(e3) {
    await this.shouldIgnoreMessageEvent(e3) || (await this.recordMessageEvent(e3, le3.inbound), this.events.emit(C3.message, e3));
  }
  async acknowledgePayload(e3) {
    const t2 = formatJsonRpcResult(e3.id, true);
    await this.provider.connection.send(t2);
  }
  unregisterProviderListeners() {
    this.provider.off(L2.payload, this.onPayloadHandler), this.provider.off(L2.connect, this.onConnectHandler), this.provider.off(L2.disconnect, this.onDisconnectHandler), this.provider.off(L2.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e3 = await Zi();
    Qi(async (t2) => {
      e3 !== t2 && (e3 = t2, t2 ? await this.transportOpen().catch((s4) => this.logger.error(s4, s4 == null ? void 0 : s4.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C3.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e3) => this.logger.error(e3, e3 == null ? void 0 : e3.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(Lt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async toEstablishConnection() {
    await this.confirmOnlineStateOrThrow(), !this.connected && await this.connect();
  }
};
function io2() {
}
function Ri2(r4) {
  if (!r4 || typeof r4 != "object")
    return false;
  const e3 = Object.getPrototypeOf(r4);
  return e3 === null || e3 === Object.prototype || Object.getPrototypeOf(e3) === null ? Object.prototype.toString.call(r4) === "[object Object]" : false;
}
function Oi(r4) {
  return Object.getOwnPropertySymbols(r4).filter((e3) => Object.prototype.propertyIsEnumerable.call(r4, e3));
}
function Ai(r4) {
  return r4 == null ? r4 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r4);
}
var so2 = "[object RegExp]";
var ro3 = "[object String]";
var no2 = "[object Number]";
var oo3 = "[object Boolean]";
var xi2 = "[object Arguments]";
var ao3 = "[object Symbol]";
var co2 = "[object Date]";
var ho3 = "[object Map]";
var lo3 = "[object Set]";
var uo3 = "[object Array]";
var go3 = "[object Function]";
var po3 = "[object ArrayBuffer]";
var Je2 = "[object Object]";
var yo3 = "[object Error]";
var bo3 = "[object DataView]";
var mo3 = "[object Uint8Array]";
var fo3 = "[object Uint8ClampedArray]";
var Do3 = "[object Uint16Array]";
var vo3 = "[object Uint32Array]";
var wo3 = "[object BigUint64Array]";
var _o3 = "[object Int8Array]";
var Eo3 = "[object Int16Array]";
var Io3 = "[object Int32Array]";
var To3 = "[object BigInt64Array]";
var Co3 = "[object Float32Array]";
var Po3 = "[object Float64Array]";
function So3(r4, e3) {
  return r4 === e3 || Number.isNaN(r4) && Number.isNaN(e3);
}
function Ro3(r4, e3, t2) {
  return pe2(r4, e3, void 0, void 0, void 0, void 0, t2);
}
function pe2(r4, e3, t2, s4, i6, n6, o7) {
  const a4 = o7(r4, e3, t2, s4, i6, n6);
  if (a4 !== void 0)
    return a4;
  if (typeof r4 == typeof e3)
    switch (typeof r4) {
      case "bigint":
      case "string":
      case "boolean":
      case "symbol":
      case "undefined":
        return r4 === e3;
      case "number":
        return r4 === e3 || Object.is(r4, e3);
      case "function":
        return r4 === e3;
      case "object":
        return ye2(r4, e3, n6, o7);
    }
  return ye2(r4, e3, n6, o7);
}
function ye2(r4, e3, t2, s4) {
  if (Object.is(r4, e3))
    return true;
  let i6 = Ai(r4), n6 = Ai(e3);
  if (i6 === xi2 && (i6 = Je2), n6 === xi2 && (n6 = Je2), i6 !== n6)
    return false;
  switch (i6) {
    case ro3:
      return r4.toString() === e3.toString();
    case no2: {
      const c8 = r4.valueOf(), h6 = e3.valueOf();
      return So3(c8, h6);
    }
    case oo3:
    case co2:
    case ao3:
      return Object.is(r4.valueOf(), e3.valueOf());
    case so2:
      return r4.source === e3.source && r4.flags === e3.flags;
    case go3:
      return r4 === e3;
  }
  t2 = t2 ?? /* @__PURE__ */ new Map();
  const o7 = t2.get(r4), a4 = t2.get(e3);
  if (o7 != null && a4 != null)
    return o7 === e3;
  t2.set(r4, e3), t2.set(e3, r4);
  try {
    switch (i6) {
      case ho3: {
        if (r4.size !== e3.size)
          return false;
        for (const [c8, h6] of r4.entries())
          if (!e3.has(c8) || !pe2(h6, e3.get(c8), c8, r4, e3, t2, s4))
            return false;
        return true;
      }
      case lo3: {
        if (r4.size !== e3.size)
          return false;
        const c8 = Array.from(r4.values()), h6 = Array.from(e3.values());
        for (let u5 = 0; u5 < c8.length; u5++) {
          const d6 = c8[u5], g5 = h6.findIndex((_4) => pe2(d6, _4, void 0, r4, e3, t2, s4));
          if (g5 === -1)
            return false;
          h6.splice(g5, 1);
        }
        return true;
      }
      case uo3:
      case mo3:
      case fo3:
      case Do3:
      case vo3:
      case wo3:
      case _o3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r4) !== Buffer.isBuffer(e3) || r4.length !== e3.length)
          return false;
        for (let c8 = 0; c8 < r4.length; c8++)
          if (!pe2(r4[c8], e3[c8], c8, r4, e3, t2, s4))
            return false;
        return true;
      }
      case po3:
        return r4.byteLength !== e3.byteLength ? false : ye2(new Uint8Array(r4), new Uint8Array(e3), t2, s4);
      case bo3:
        return r4.byteLength !== e3.byteLength || r4.byteOffset !== e3.byteOffset ? false : ye2(new Uint8Array(r4), new Uint8Array(e3), t2, s4);
      case yo3:
        return r4.name === e3.name && r4.message === e3.message;
      case Je2: {
        if (!(ye2(r4.constructor, e3.constructor, t2, s4) || Ri2(r4) && Ri2(e3)))
          return false;
        const h6 = [...Object.keys(r4), ...Oi(r4)], u5 = [...Object.keys(e3), ...Oi(e3)];
        if (h6.length !== u5.length)
          return false;
        for (let d6 = 0; d6 < h6.length; d6++) {
          const g5 = h6[d6], _4 = r4[g5];
          if (!Object.hasOwn(e3, g5))
            return false;
          const l8 = e3[g5];
          if (!pe2(_4, l8, g5, r4, e3, t2, s4))
            return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t2.delete(r4), t2.delete(e3);
  }
}
function Oo3(r4, e3) {
  return Ro3(r4, e3, io2);
}
var Ao3 = Object.defineProperty;
var Ni = Object.getOwnPropertySymbols;
var xo3 = Object.prototype.hasOwnProperty;
var No3 = Object.prototype.propertyIsEnumerable;
var Xe2 = (r4, e3, t2) => e3 in r4 ? Ao3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var $i = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    xo3.call(e3, t2) && Xe2(r4, t2, e3[t2]);
  if (Ni)
    for (var t2 of Ni(e3))
      No3.call(e3, t2) && Xe2(r4, t2, e3[t2]);
  return r4;
};
var z4 = (r4, e3, t2) => Xe2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var zi2 = class extends f4 {
  constructor(e3, t2, s4, i6 = B2, n6 = void 0) {
    super(e3, t2, s4, i6), this.core = e3, this.logger = t2, this.name = s4, z4(this, "map", /* @__PURE__ */ new Map()), z4(this, "version", kt3), z4(this, "cached", []), z4(this, "initialized", false), z4(this, "getKey"), z4(this, "storagePrefix", B2), z4(this, "recentlyDeleted", []), z4(this, "recentlyDeletedLimit", 200), z4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o7) => {
        this.getKey && o7 !== null && !ae(o7) ? this.map.set(this.getKey(o7), o7) : Li(o7) ? this.map.set(o7.id, o7) : ji(o7) && this.map.set(o7.topic, o7);
      }), this.cached = [], this.initialized = true);
    }), z4(this, "set", async (o7, a4) => {
      this.isInitialized(), this.map.has(o7) ? await this.update(o7, a4) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o7, value: a4 }), this.map.set(o7, a4), await this.persist());
    }), z4(this, "get", (o7) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o7 }), this.getData(o7))), z4(this, "getAll", (o7) => (this.isInitialized(), o7 ? this.values.filter((a4) => Object.keys(o7).every((c8) => Oo3(a4[c8], o7[c8]))) : this.values)), z4(this, "update", async (o7, a4) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o7, update: a4 });
      const c8 = $i($i({}, this.getData(o7)), a4);
      this.map.set(o7, c8), await this.persist();
    }), z4(this, "delete", async (o7, a4) => {
      this.isInitialized(), this.map.has(o7) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o7, reason: a4 }), this.map.delete(o7), this.addToRecentlyDeleted(o7), await this.persist());
    }), this.logger = E2(t2, this.name), this.storagePrefix = i6, this.getKey = n6;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e3) {
    this.recentlyDeleted.push(e3), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e3) {
    const t2 = this.map.get(e3);
    if (!t2) {
      if (this.recentlyDeleted.includes(e3)) {
        const { message: i6 } = te2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e3}`);
        throw this.logger.error(i6), new Error(i6);
      }
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.error(s4), new Error(s4);
    }
    return t2;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e3 = await this.getDataStore();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.map.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var $o3 = Object.defineProperty;
var zo3 = (r4, e3, t2) => e3 in r4 ? $o3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var p4 = (r4, e3, t2) => zo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Li2 = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, p4(this, "name", Ft3), p4(this, "version", Kt2), p4(this, "events", new import_events7.default()), p4(this, "pairings"), p4(this, "initialized", false), p4(this, "storagePrefix", B2), p4(this, "ignoredPayloadTypes", [Oe2]), p4(this, "registeredMethods", []), p4(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p4(this, "register", ({ methods: s4 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s4])];
    }), p4(this, "create", async (s4) => {
      this.isInitialized();
      const i6 = oi(), n6 = await this.core.crypto.setSymKey(i6), o7 = po2(import_time4.FIVE_MINUTES), a4 = { protocol: xt3 }, c8 = { topic: n6, expiry: o7, relay: a4, active: false, methods: s4 == null ? void 0 : s4.methods }, h6 = vi({ protocol: this.core.protocol, version: this.core.version, topic: n6, symKey: i6, relay: a4, expiryTimestamp: o7, methods: s4 == null ? void 0 : s4.methods });
      return this.events.emit(se2.create, c8), this.core.expirer.set(n6, o7), await this.pairings.set(n6, c8), await this.core.relayer.subscribe(n6, { transportType: s4 == null ? void 0 : s4.transportType }), { topic: n6, uri: h6 };
    }), p4(this, "pair", async (s4) => {
      this.isInitialized();
      const i6 = this.core.eventClient.createEvent({ properties: { topic: s4 == null ? void 0 : s4.uri, trace: [G2.pairing_started] } });
      this.isValidPair(s4, i6);
      const { topic: n6, symKey: o7, relay: a4, expiryTimestamp: c8, methods: h6 } = Ei(s4.uri);
      i6.props.properties.topic = n6, i6.addTrace(G2.pairing_uri_validation_success), i6.addTrace(G2.pairing_uri_not_expired);
      let u5;
      if (this.pairings.keys.includes(n6)) {
        if (u5 = this.pairings.get(n6), i6.addTrace(G2.existing_pairing), u5.active)
          throw i6.setError(Y2.active_pairing_already_exists), new Error(`Pairing already exists: ${n6}. Please try again with a new connection URI.`);
        i6.addTrace(G2.pairing_not_expired);
      }
      const d6 = c8 || po2(import_time4.FIVE_MINUTES), g5 = { topic: n6, relay: a4, expiry: d6, active: false, methods: h6 };
      this.core.expirer.set(n6, d6), await this.pairings.set(n6, g5), i6.addTrace(G2.store_new_pairing), s4.activatePairing && await this.activate({ topic: n6 }), this.events.emit(se2.create, g5), i6.addTrace(G2.emit_inactive_pairing), this.core.crypto.keychain.has(n6) || await this.core.crypto.setSymKey(o7, n6), i6.addTrace(G2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        i6.setError(Y2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n6, { relay: a4 });
      } catch (_4) {
        throw i6.setError(Y2.subscribe_pairing_topic_failure), _4;
      }
      return i6.addTrace(G2.subscribe_pairing_topic_success), g5;
    }), p4(this, "activate", async ({ topic: s4 }) => {
      this.isInitialized();
      const i6 = po2(import_time4.FIVE_MINUTES);
      this.core.expirer.set(s4, i6), await this.pairings.update(s4, { active: true, expiry: i6 });
    }), p4(this, "ping", async (s4) => {
      this.isInitialized(), await this.isValidPing(s4), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: i6 } = s4;
      if (this.pairings.keys.includes(i6)) {
        const n6 = await this.sendRequest(i6, "wc_pairingPing", {}), { done: o7, resolve: a4, reject: c8 } = ao2();
        this.events.once(yo2("pairing_ping", n6), ({ error: h6 }) => {
          h6 ? c8(h6) : a4();
        }), await o7();
      }
    }), p4(this, "updateExpiry", async ({ topic: s4, expiry: i6 }) => {
      this.isInitialized(), await this.pairings.update(s4, { expiry: i6 });
    }), p4(this, "updateMetadata", async ({ topic: s4, metadata: i6 }) => {
      this.isInitialized(), await this.pairings.update(s4, { peerMetadata: i6 });
    }), p4(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p4(this, "disconnect", async (s4) => {
      this.isInitialized(), await this.isValidDisconnect(s4);
      const { topic: i6 } = s4;
      this.pairings.keys.includes(i6) && (await this.sendRequest(i6, "wc_pairingDelete", de2("USER_DISCONNECTED")), await this.deletePairing(i6));
    }), p4(this, "formatUriFromPairing", (s4) => {
      this.isInitialized();
      const { topic: i6, relay: n6, expiry: o7, methods: a4 } = s4, c8 = this.core.crypto.keychain.get(i6);
      return vi({ protocol: this.core.protocol, version: this.core.version, topic: i6, symKey: c8, relay: n6, expiryTimestamp: o7, methods: a4 });
    }), p4(this, "sendRequest", async (s4, i6, n6) => {
      const o7 = formatJsonRpcRequest(i6, n6), a4 = await this.core.crypto.encode(s4, o7), c8 = ie2[i6].req;
      return this.core.history.set(s4, o7), this.core.relayer.publish(s4, a4, c8), o7.id;
    }), p4(this, "sendResult", async (s4, i6, n6) => {
      const o7 = formatJsonRpcResult(s4, n6), a4 = await this.core.crypto.encode(i6, o7), c8 = (await this.core.history.get(i6, s4)).request.method, h6 = ie2[c8].res;
      await this.core.relayer.publish(i6, a4, h6), await this.core.history.resolve(o7);
    }), p4(this, "sendError", async (s4, i6, n6) => {
      const o7 = formatJsonRpcError(s4, n6), a4 = await this.core.crypto.encode(i6, o7), c8 = (await this.core.history.get(i6, s4)).request.method, h6 = ie2[c8] ? ie2[c8].res : ie2.unregistered_method.res;
      await this.core.relayer.publish(i6, a4, h6), await this.core.history.resolve(o7);
    }), p4(this, "deletePairing", async (s4, i6) => {
      await this.core.relayer.unsubscribe(s4), await Promise.all([this.pairings.delete(s4, de2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s4), i6 ? Promise.resolve() : this.core.expirer.del(s4)]);
    }), p4(this, "cleanup", async () => {
      const s4 = this.pairings.getAll().filter((i6) => go2(i6.expiry));
      await Promise.all(s4.map((i6) => this.deletePairing(i6.topic)));
    }), p4(this, "onRelayEventRequest", async (s4) => {
      const { topic: i6, payload: n6 } = s4;
      switch (n6.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(i6, n6);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(i6, n6);
        default:
          return await this.onUnknownRpcMethodRequest(i6, n6);
      }
    }), p4(this, "onRelayEventResponse", async (s4) => {
      const { topic: i6, payload: n6 } = s4, o7 = (await this.core.history.get(i6, n6.id)).request.method;
      switch (o7) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(i6, n6);
        default:
          return this.onUnknownRpcMethodResponse(o7);
      }
    }), p4(this, "onPairingPingRequest", async (s4, i6) => {
      const { id: n6 } = i6;
      try {
        this.isValidPing({ topic: s4 }), await this.sendResult(n6, s4, true), this.events.emit(se2.ping, { id: n6, topic: s4 });
      } catch (o7) {
        await this.sendError(n6, s4, o7), this.logger.error(o7);
      }
    }), p4(this, "onPairingPingResponse", (s4, i6) => {
      const { id: n6 } = i6;
      setTimeout(() => {
        isJsonRpcResult(i6) ? this.events.emit(yo2("pairing_ping", n6), {}) : isJsonRpcError(i6) && this.events.emit(yo2("pairing_ping", n6), { error: i6.error });
      }, 500);
    }), p4(this, "onPairingDeleteRequest", async (s4, i6) => {
      const { id: n6 } = i6;
      try {
        this.isValidDisconnect({ topic: s4 }), await this.deletePairing(s4), this.events.emit(se2.delete, { id: n6, topic: s4 });
      } catch (o7) {
        await this.sendError(n6, s4, o7), this.logger.error(o7);
      }
    }), p4(this, "onUnknownRpcMethodRequest", async (s4, i6) => {
      const { id: n6, method: o7 } = i6;
      try {
        if (this.registeredMethods.includes(o7))
          return;
        const a4 = de2("WC_METHOD_UNSUPPORTED", o7);
        await this.sendError(n6, s4, a4), this.logger.error(a4);
      } catch (a4) {
        await this.sendError(n6, s4, a4), this.logger.error(a4);
      }
    }), p4(this, "onUnknownRpcMethodResponse", (s4) => {
      this.registeredMethods.includes(s4) || this.logger.error(de2("WC_METHOD_UNSUPPORTED", s4));
    }), p4(this, "isValidPair", (s4, i6) => {
      var n6;
      if (!Vi(s4)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `pair() params: ${s4}`);
        throw i6.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      if (!Bi(s4.uri)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `pair() uri: ${s4.uri}`);
        throw i6.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      const o7 = Ei(s4 == null ? void 0 : s4.uri);
      if (!((n6 = o7 == null ? void 0 : o7.relay) != null && n6.protocol)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw i6.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      if (!(o7 != null && o7.symKey)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw i6.setError(Y2.malformed_pairing_uri), new Error(a4);
      }
      if (o7 != null && o7.expiryTimestamp && (0, import_time4.toMiliseconds)(o7 == null ? void 0 : o7.expiryTimestamp) < Date.now()) {
        i6.setError(Y2.pairing_expired);
        const { message: a4 } = te2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a4);
      }
    }), p4(this, "isValidPing", async (s4) => {
      if (!Vi(s4)) {
        const { message: n6 } = te2("MISSING_OR_INVALID", `ping() params: ${s4}`);
        throw new Error(n6);
      }
      const { topic: i6 } = s4;
      await this.isValidPairingTopic(i6);
    }), p4(this, "isValidDisconnect", async (s4) => {
      if (!Vi(s4)) {
        const { message: n6 } = te2("MISSING_OR_INVALID", `disconnect() params: ${s4}`);
        throw new Error(n6);
      }
      const { topic: i6 } = s4;
      await this.isValidPairingTopic(i6);
    }), p4(this, "isValidPairingTopic", async (s4) => {
      if (!q(s4, false)) {
        const { message: i6 } = te2("MISSING_OR_INVALID", `pairing topic should be a string: ${s4}`);
        throw new Error(i6);
      }
      if (!this.pairings.keys.includes(s4)) {
        const { message: i6 } = te2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s4}`);
        throw new Error(i6);
      }
      if (go2(this.pairings.get(s4).expiry)) {
        await this.deletePairing(s4);
        const { message: i6 } = te2("EXPIRED", `pairing topic: ${s4}`);
        throw new Error(i6);
      }
    }), this.core = e3, this.logger = E2(t2, this.name), this.pairings = new zi2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y3(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C3.message, async (e3) => {
      const { topic: t2, message: s4, transportType: i6 } = e3;
      if (this.pairings.keys.includes(t2) && i6 !== Q3.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s4)))
        try {
          const n6 = await this.core.crypto.decode(t2, s4);
          isJsonRpcRequest(n6) ? (this.core.history.set(t2, n6), await this.onRelayEventRequest({ topic: t2, payload: n6 })) : isJsonRpcResponse(n6) && (await this.core.history.resolve(n6), await this.onRelayEventResponse({ topic: t2, payload: n6 }), this.core.history.delete(t2, n6.id)), await this.core.relayer.messages.ack(t2, s4);
        } catch (n6) {
          this.logger.error(n6);
        }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(F2.expired, async (e3) => {
      const { topic: t2 } = ho2(e3.target);
      t2 && this.pairings.keys.includes(t2) && (await this.deletePairing(t2, true), this.events.emit(se2.expire, { topic: t2 }));
    });
  }
};
var Lo3 = Object.defineProperty;
var ko3 = (r4, e3, t2) => e3 in r4 ? Lo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var R2 = (r4, e3, t2) => ko3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var ki2 = class extends I2 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, R2(this, "records", /* @__PURE__ */ new Map()), R2(this, "events", new import_events7.EventEmitter()), R2(this, "name", Bt3), R2(this, "version", Vt2), R2(this, "cached", []), R2(this, "initialized", false), R2(this, "storagePrefix", B2), R2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s4) => this.records.set(s4.id, s4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), R2(this, "set", (s4, i6, n6) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s4, request: i6, chainId: n6 }), this.records.has(i6.id))
        return;
      const o7 = { id: i6.id, topic: s4, request: { method: i6.method, params: i6.params || null }, chainId: n6, expiry: po2(import_time4.THIRTY_DAYS) };
      this.records.set(o7.id, o7), this.persist(), this.events.emit(M4.created, o7);
    }), R2(this, "resolve", async (s4) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s4 }), !this.records.has(s4.id))
        return;
      const i6 = await this.getRecord(s4.id);
      typeof i6.response > "u" && (i6.response = isJsonRpcError(s4) ? { error: s4.error } : { result: s4.result }, this.records.set(i6.id, i6), this.persist(), this.events.emit(M4.updated, i6));
    }), R2(this, "get", async (s4, i6) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s4, id: i6 }), await this.getRecord(i6))), R2(this, "delete", (s4, i6) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: i6 }), this.values.forEach((n6) => {
        if (n6.topic === s4) {
          if (typeof i6 < "u" && n6.id !== i6)
            return;
          this.records.delete(n6.id), this.events.emit(M4.deleted, n6);
        }
      }), this.persist();
    }), R2(this, "exists", async (s4, i6) => (this.isInitialized(), this.records.has(i6) ? (await this.getRecord(i6)).topic === s4 : false)), R2(this, "on", (s4, i6) => {
      this.events.on(s4, i6);
    }), R2(this, "once", (s4, i6) => {
      this.events.once(s4, i6);
    }), R2(this, "off", (s4, i6) => {
      this.events.off(s4, i6);
    }), R2(this, "removeListener", (s4, i6) => {
      this.events.removeListener(s4, i6);
    }), this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e3 = [];
    return this.values.forEach((t2) => {
      if (typeof t2.response < "u")
        return;
      const s4 = { topic: t2.topic, request: formatJsonRpcRequest(t2.request.method, t2.request.params, t2.id), chainId: t2.chainId };
      return e3.push(s4);
    }), e3;
  }
  async setJsonRpcRecords(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e3) {
    this.isInitialized();
    const t2 = this.records.get(e3);
    if (!t2) {
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(s4);
    }
    return t2;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(M4.sync);
  }
  async restore() {
    try {
      const e3 = await this.getJsonRpcRecords();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.records.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e3);
    }
  }
  registerEventListeners() {
    this.events.on(M4.created, (e3) => {
      const t2 = M4.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(M4.updated, (e3) => {
      const t2 = M4.updated;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(M4.deleted, (e3) => {
      const t2 = M4.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.core.heartbeat.on(r2.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e3 = false;
      this.records.forEach((t2) => {
        (0, import_time4.toMiliseconds)(t2.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t2.id}`), this.records.delete(t2.id), this.events.emit(M4.deleted, t2, false), e3 = true);
      }), e3 && this.persist();
    } catch (e3) {
      this.logger.warn(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var jo3 = Object.defineProperty;
var Uo3 = (r4, e3, t2) => e3 in r4 ? jo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var A2 = (r4, e3, t2) => Uo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var ji2 = class extends S2 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events7.EventEmitter()), A2(this, "name", qt2), A2(this, "version", Gt3), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B2), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s4) => this.expirations.set(s4.target, s4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (s4) => {
      try {
        const i6 = this.formatTarget(s4);
        return typeof this.getExpiration(i6) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (s4, i6) => {
      this.isInitialized();
      const n6 = this.formatTarget(s4), o7 = { target: n6, expiry: i6 };
      this.expirations.set(n6, o7), this.checkExpiry(n6, o7), this.events.emit(F2.created, { target: n6, expiration: o7 });
    }), A2(this, "get", (s4) => {
      this.isInitialized();
      const i6 = this.formatTarget(s4);
      return this.getExpiration(i6);
    }), A2(this, "del", (s4) => {
      if (this.isInitialized(), this.has(s4)) {
        const i6 = this.formatTarget(s4), n6 = this.getExpiration(i6);
        this.expirations.delete(i6), this.events.emit(F2.deleted, { target: i6, expiration: n6 });
      }
    }), A2(this, "on", (s4, i6) => {
      this.events.on(s4, i6);
    }), A2(this, "once", (s4, i6) => {
      this.events.once(s4, i6);
    }), A2(this, "off", (s4, i6) => {
      this.events.off(s4, i6);
    }), A2(this, "removeListener", (s4, i6) => {
      this.events.removeListener(s4, i6);
    }), this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e3) {
    if (typeof e3 == "string")
      return fo2(e3);
    if (typeof e3 == "number")
      return lo2(e3);
    const { message: t2 } = te2("UNKNOWN_TYPE", `Target type: ${typeof e3}`);
    throw new Error(t2);
  }
  async setExpirations(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e3 = await this.getExpirations();
      if (typeof e3 > "u" || !e3.length)
        return;
      if (this.expirations.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e3);
    }
  }
  getExpiration(e3) {
    const t2 = this.expirations.get(e3);
    if (!t2) {
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.warn(s4), new Error(s4);
    }
    return t2;
  }
  checkExpiry(e3, t2) {
    const { expiry: s4 } = t2;
    (0, import_time4.toMiliseconds)(s4) - Date.now() <= 0 && this.expire(e3, t2);
  }
  expire(e3, t2) {
    this.expirations.delete(e3), this.events.emit(F2.expired, { target: e3, expiration: t2 });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e3, t2) => this.checkExpiry(t2, e3));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r2.pulse, () => this.checkExpirations()), this.events.on(F2.created, (e3) => {
      const t2 = F2.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(F2.expired, (e3) => {
      const t2 = F2.expired;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(F2.deleted, (e3) => {
      const t2 = F2.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Mo3 = Object.defineProperty;
var Fo3 = (r4, e3, t2) => e3 in r4 ? Mo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var w4 = (r4, e3, t2) => Fo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ui = class extends M {
  constructor(e3, t2, s4) {
    super(e3, t2, s4), this.core = e3, this.logger = t2, this.store = s4, w4(this, "name", Wt3), w4(this, "abortController"), w4(this, "isDevEnv"), w4(this, "verifyUrlV3", Yt3), w4(this, "storagePrefix", B2), w4(this, "version", Le2), w4(this, "publicKey"), w4(this, "fetchPromise"), w4(this, "init", async () => {
      var i6;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((i6 = this.publicKey) == null ? void 0 : i6.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w4(this, "register", async (i6) => {
      if (!Ae2() || this.isDevEnv)
        return;
      const n6 = window.location.origin, { id: o7, decryptedId: a4 } = i6, c8 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n6}&id=${o7}&decryptedId=${a4}`;
      try {
        const h6 = (0, import_window_getters2.getDocument)(), u5 = this.startAbortTimer(import_time4.ONE_SECOND * 5), d6 = await new Promise((g5, _4) => {
          const l8 = () => {
            window.removeEventListener("message", x6), h6.body.removeChild(b6), _4("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", l8);
          const b6 = h6.createElement("iframe");
          b6.src = c8, b6.style.display = "none", b6.addEventListener("error", l8, { signal: this.abortController.signal });
          const x6 = (I4) => {
            if (I4.data && typeof I4.data == "string")
              try {
                const D3 = JSON.parse(I4.data);
                if (D3.type === "verify_attestation") {
                  if (sn(D3.attestation).payload.id !== o7)
                    return;
                  clearInterval(u5), h6.body.removeChild(b6), this.abortController.signal.removeEventListener("abort", l8), window.removeEventListener("message", x6), g5(D3.attestation === null ? "" : D3.attestation);
                }
              } catch (D3) {
                this.logger.warn(D3);
              }
          };
          h6.body.appendChild(b6), window.addEventListener("message", x6, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d6), d6;
      } catch (h6) {
        this.logger.warn(h6);
      }
      return "";
    }), w4(this, "resolve", async (i6) => {
      if (this.isDevEnv)
        return "";
      const { attestationId: n6, hash: o7, encryptedId: a4 } = i6;
      if (n6 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n6) {
        if (sn(n6).payload.id !== a4)
          return;
        const h6 = await this.isValidJwtAttestation(n6);
        if (h6) {
          if (!h6.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h6;
        }
      }
      if (!o7)
        return;
      const c8 = this.getVerifyUrl(i6 == null ? void 0 : i6.verifyUrl);
      return this.fetchAttestation(o7, c8);
    }), w4(this, "fetchAttestation", async (i6, n6) => {
      this.logger.debug(`resolving attestation: ${i6} from url: ${n6}`);
      const o7 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a4 = await fetch(`${n6}/attestation/${i6}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o7), a4.status === 200 ? await a4.json() : void 0;
    }), w4(this, "getVerifyUrl", (i6) => {
      let n6 = i6 || ue2;
      return Jt3.includes(n6) || (this.logger.info(`verify url: ${n6}, not included in trusted list, assigning default: ${ue2}`), n6 = ue2), n6;
    }), w4(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const i6 = this.startAbortTimer(import_time4.FIVE_SECONDS), n6 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(i6), await n6.json();
      } catch (i6) {
        this.logger.warn(i6);
      }
    }), w4(this, "persistPublicKey", async (i6) => {
      this.logger.debug("persisting public key to local storage", i6), await this.store.setItem(this.storeKey, i6), this.publicKey = i6;
    }), w4(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w4(this, "isValidJwtAttestation", async (i6) => {
      const n6 = await this.getPublicKey();
      try {
        if (n6)
          return this.validateAttestation(i6, n6);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
      const o7 = await this.fetchAndPersistPublicKey();
      try {
        if (o7)
          return this.validateAttestation(i6, o7);
      } catch (a4) {
        this.logger.error(a4), this.logger.warn("error validating attestation");
      }
    }), w4(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w4(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise)
        return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n6) => {
        const o7 = await this.fetchPublicKey();
        o7 && (await this.persistPublicKey(o7), n6(o7));
      });
      const i6 = await this.fetchPromise;
      return this.fetchPromise = void 0, i6;
    }), w4(this, "validateAttestation", (i6, n6) => {
      const o7 = mi(i6, n6.publicKey), a4 = { hasExpired: (0, import_time4.toMiliseconds)(o7.exp) < Date.now(), payload: o7 };
      if (a4.hasExpired)
        throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a4.payload.origin, isScam: a4.payload.isScam, isVerified: a4.payload.isVerified };
    }), this.logger = E2(t2, this.name), this.abortController = new AbortController(), this.isDevEnv = vo2(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y3(this.logger);
  }
  startAbortTimer(e3) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e3));
  }
};
var Ko3 = Object.defineProperty;
var Bo3 = (r4, e3, t2) => e3 in r4 ? Ko3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var Mi2 = (r4, e3, t2) => Bo3(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Fi2 = class extends O3 {
  constructor(e3, t2) {
    super(e3, t2), this.projectId = e3, this.logger = t2, Mi2(this, "context", Xt2), Mi2(this, "registerDeviceToken", async (s4) => {
      const { clientId: i6, token: n6, notificationType: o7, enableEncrypted: a4 = false } = s4, c8 = `${Zt2}/${this.projectId}/clients`;
      await fetch(c8, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: i6, type: o7, token: n6, always_raw: a4 }) });
    }), this.logger = E2(t2, this.context);
  }
};
var Vo3 = Object.defineProperty;
var Ki2 = Object.getOwnPropertySymbols;
var qo3 = Object.prototype.hasOwnProperty;
var Go3 = Object.prototype.propertyIsEnumerable;
var Ze2 = (r4, e3, t2) => e3 in r4 ? Vo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var be3 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    qo3.call(e3, t2) && Ze2(r4, t2, e3[t2]);
  if (Ki2)
    for (var t2 of Ki2(e3))
      Go3.call(e3, t2) && Ze2(r4, t2, e3[t2]);
  return r4;
};
var E3 = (r4, e3, t2) => Ze2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Bi2 = class extends R {
  constructor(e3, t2, s4 = true) {
    super(e3, t2, s4), this.core = e3, this.logger = t2, E3(this, "context", ei2), E3(this, "storagePrefix", B2), E3(this, "storageVersion", Qt2), E3(this, "events", /* @__PURE__ */ new Map()), E3(this, "shouldPersist", false), E3(this, "init", async () => {
      if (!vo2())
        try {
          const i6 = { eventId: Eo2(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Yt2(this.core.relayer.protocol, this.core.relayer.version, _e3) } } };
          await this.sendEvent([i6]);
        } catch (i6) {
          this.logger.warn(i6);
        }
    }), E3(this, "createEvent", (i6) => {
      const { event: n6 = "ERROR", type: o7 = "", properties: { topic: a4, trace: c8 } } = i6, h6 = Eo2(), u5 = this.core.projectId || "", d6 = Date.now(), g5 = be3({ eventId: h6, timestamp: d6, props: { event: n6, type: o7, properties: { topic: a4, trace: c8 } }, bundleId: u5, domain: this.getAppDomain() }, this.setMethods(h6));
      return this.telemetryEnabled && (this.events.set(h6, g5), this.shouldPersist = true), g5;
    }), E3(this, "getEvent", (i6) => {
      const { eventId: n6, topic: o7 } = i6;
      if (n6)
        return this.events.get(n6);
      const a4 = Array.from(this.events.values()).find((c8) => c8.props.properties.topic === o7);
      if (a4)
        return be3(be3({}, a4), this.setMethods(a4.eventId));
    }), E3(this, "deleteEvent", (i6) => {
      const { eventId: n6 } = i6;
      this.events.delete(n6), this.shouldPersist = true;
    }), E3(this, "setEventListeners", () => {
      this.core.heartbeat.on(r2.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((i6) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(i6.timestamp) > ti2 && (this.events.delete(i6.eventId), this.shouldPersist = true);
        });
      });
    }), E3(this, "setMethods", (i6) => ({ addTrace: (n6) => this.addTrace(i6, n6), setError: (n6) => this.setError(i6, n6) })), E3(this, "addTrace", (i6, n6) => {
      const o7 = this.events.get(i6);
      o7 && (o7.props.properties.trace.push(n6), this.events.set(i6, o7), this.shouldPersist = true);
    }), E3(this, "setError", (i6, n6) => {
      const o7 = this.events.get(i6);
      o7 && (o7.props.type = n6, o7.timestamp = Date.now(), this.events.set(i6, o7), this.shouldPersist = true);
    }), E3(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E3(this, "restore", async () => {
      try {
        const i6 = await this.core.storage.getItem(this.storageKey) || [];
        if (!i6.length)
          return;
        i6.forEach((n6) => {
          this.events.set(n6.eventId, be3(be3({}, n6), this.setMethods(n6.eventId)));
        });
      } catch (i6) {
        this.logger.warn(i6);
      }
    }), E3(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0)
        return;
      const i6 = [];
      for (const [n6, o7] of this.events)
        o7.props.type && i6.push(o7);
      if (i6.length !== 0)
        try {
          if ((await this.sendEvent(i6)).ok)
            for (const n6 of i6)
              this.events.delete(n6.eventId), this.shouldPersist = true;
        } catch (n6) {
          this.logger.warn(n6);
        }
    }), E3(this, "sendEvent", async (i6) => {
      const n6 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e3}${n6}`, { method: "POST", body: JSON.stringify(i6) });
    }), E3(this, "getAppDomain", () => Xr2().url), this.logger = E2(t2, this.context), this.telemetryEnabled = s4, s4 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Wo3 = Object.defineProperty;
var Vi2 = Object.getOwnPropertySymbols;
var Ho3 = Object.prototype.hasOwnProperty;
var Yo3 = Object.prototype.propertyIsEnumerable;
var Qe2 = (r4, e3, t2) => e3 in r4 ? Wo3(r4, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r4[e3] = t2;
var qi2 = (r4, e3) => {
  for (var t2 in e3 || (e3 = {}))
    Ho3.call(e3, t2) && Qe2(r4, t2, e3[t2]);
  if (Vi2)
    for (var t2 of Vi2(e3))
      Yo3.call(e3, t2) && Qe2(r4, t2, e3[t2]);
  return r4;
};
var v4 = (r4, e3, t2) => Qe2(r4, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Te3 = class _Te extends h4 {
  constructor(e3) {
    var t2;
    super(e3), v4(this, "protocol", ze3), v4(this, "version", Le2), v4(this, "name", he2), v4(this, "relayUrl"), v4(this, "projectId"), v4(this, "customStoragePrefix"), v4(this, "events", new import_events7.EventEmitter()), v4(this, "logger"), v4(this, "heartbeat"), v4(this, "relayer"), v4(this, "crypto"), v4(this, "storage"), v4(this, "history"), v4(this, "expirer"), v4(this, "pairing"), v4(this, "verify"), v4(this, "echoClient"), v4(this, "linkModeSupportedApps"), v4(this, "eventClient"), v4(this, "initialized", false), v4(this, "logChunkController"), v4(this, "on", (o7, a4) => this.events.on(o7, a4)), v4(this, "once", (o7, a4) => this.events.once(o7, a4)), v4(this, "off", (o7, a4) => this.events.off(o7, a4)), v4(this, "removeListener", (o7, a4) => this.events.removeListener(o7, a4)), v4(this, "dispatchEnvelope", ({ topic: o7, message: a4, sessionExists: c8 }) => {
      if (!o7 || !a4)
        return;
      const h6 = { topic: o7, message: a4, publishedAt: Date.now(), transportType: Q3.link_mode };
      this.relayer.onLinkMessageEvent(h6, { sessionExists: c8 });
    }), this.projectId = e3 == null ? void 0 : e3.projectId, this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ue3, this.customStoragePrefix = e3 != null && e3.customStoragePrefix ? `:${e3.customStoragePrefix}` : "";
    const s4 = k2({ level: typeof (e3 == null ? void 0 : e3.logger) == "string" && e3.logger ? e3.logger : Et3.logger, name: he2 }), { logger: i6, chunkLoggerController: n6 } = A({ opts: s4, maxSizeInBytes: e3 == null ? void 0 : e3.maxLogBlobSizeInBytes, loggerOverride: e3 == null ? void 0 : e3.logger });
    this.logChunkController = n6, (t2 = this.logChunkController) != null && t2.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var o7, a4;
      (o7 = this.logChunkController) != null && o7.downloadLogsBlobInBrowser && ((a4 = this.logChunkController) == null || a4.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E2(i6, this.name), this.heartbeat = new i3(), this.crypto = new vi2(this, this.logger, e3 == null ? void 0 : e3.keychain), this.history = new ki2(this, this.logger), this.expirer = new ji2(this, this.logger), this.storage = e3 != null && e3.storage ? e3.storage : new h2(qi2(qi2({}, It3), e3 == null ? void 0 : e3.storageOptions)), this.relayer = new Si({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Li2(this, this.logger), this.verify = new Ui(this, this.logger, this.storage), this.echoClient = new Fi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Bi2(this, this.logger, e3 == null ? void 0 : e3.telemetryEnabled);
  }
  static async init(e3) {
    const t2 = new _Te(e3);
    await t2.initialize();
    const s4 = await t2.crypto.getClientId();
    return await t2.storage.setItem(jt3, s4), t2;
  }
  get context() {
    return y3(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e3;
    return (e3 = this.logChunkController) == null ? void 0 : e3.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e3) {
    this.linkModeSupportedApps.includes(e3) || (this.linkModeSupportedApps.push(e3), await this.storage.setItem(Me3, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Me3) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e3) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e3), this.logger.error(e3.message), e3;
    }
  }
};
var Jo3 = Te3;

// ../../node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time5 = __toESM(require_cjs());
var import_events8 = __toESM(require_events());
var De3 = "wc";
var Le3 = 2;
var ke4 = "client";
var we3 = `${De3}@${Le3}:${ke4}:`;
var me3 = { name: ke4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Me4 = "WALLETCONNECT_DEEPLINK_CHOICE";
var pt2 = "proposal";
var $e3 = "Proposal expired";
var ht3 = "session";
var J4 = import_time5.SEVEN_DAYS;
var dt3 = "engine";
var N10 = { wc_sessionPropose: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time5.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time5.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time5.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time5.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time5.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e4 = { min: import_time5.FIVE_MINUTES, max: import_time5.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var Ue4 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" } };
var ut3 = "request";
var gt3 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var yt3 = "wc";
var wt3 = "auth";
var mt2 = "authKeys";
var _t3 = "pairingTopics";
var Et4 = "requests";
var ae2 = `${yt3}@${1.5}:${wt3}:`;
var ce2 = `${ae2}:PUB_KEY`;
var Rs2 = Object.defineProperty;
var vs2 = Object.defineProperties;
var Is2 = Object.getOwnPropertyDescriptors;
var ft3 = Object.getOwnPropertySymbols;
var Ts2 = Object.prototype.hasOwnProperty;
var qs2 = Object.prototype.propertyIsEnumerable;
var Ke4 = (S5, n6, e3) => n6 in S5 ? Rs2(S5, n6, { enumerable: true, configurable: true, writable: true, value: e3 }) : S5[n6] = e3;
var v5 = (S5, n6) => {
  for (var e3 in n6 || (n6 = {}))
    Ts2.call(n6, e3) && Ke4(S5, e3, n6[e3]);
  if (ft3)
    for (var e3 of ft3(n6))
      qs2.call(n6, e3) && Ke4(S5, e3, n6[e3]);
  return S5;
};
var b4 = (S5, n6) => vs2(S5, Is2(n6));
var c6 = (S5, n6, e3) => Ke4(S5, typeof n6 != "symbol" ? n6 + "" : n6, e3);
var Ps2 = class extends V {
  constructor(n6) {
    super(n6), c6(this, "name", dt3), c6(this, "events", new import_events8.default()), c6(this, "initialized", false), c6(this, "requestQueue", { state: $2.idle, queue: [] }), c6(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c6(this, "requestQueueDelay", import_time5.ONE_SECOND), c6(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedLimit", 200), c6(this, "relayMessageCache", []), c6(this, "pendingSessions", /* @__PURE__ */ new Map()), c6(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N10) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay)));
    }), c6(this, "connect", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t2 = b4(v5({}, e3), { requiredNamespaces: e3.requiredNamespaces || {}, optionalNamespaces: e3.optionalNamespaces || {} });
      await this.isValidConnect(t2);
      const { pairingTopic: s4, requiredNamespaces: i6, optionalNamespaces: r4, sessionProperties: o7, scopedProperties: a4, relays: l8 } = t2;
      let p7 = s4, h6, u5 = false;
      try {
        if (p7) {
          const T4 = this.client.core.pairing.pairings.get(p7);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u5 = T4.active;
        }
      } catch (T4) {
        throw this.client.logger.error(`connect() -> pairing.get(${p7}) failed`), T4;
      }
      if (!p7 || !u5) {
        const { topic: T4, uri: U3 } = await this.client.core.pairing.create();
        p7 = T4, h6 = U3;
      }
      if (!p7) {
        const { message: T4 } = te2("NO_MATCHING_KEY", `connect() pairing topic: ${p7}`);
        throw new Error(T4);
      }
      const d6 = await this.client.core.crypto.generateKeyPair(), w7 = N10.wc_sessionPropose.req.ttl || import_time5.FIVE_MINUTES, m4 = po2(w7), f9 = b4(v5(v5({ requiredNamespaces: i6, optionalNamespaces: r4, relays: l8 ?? [{ protocol: xt3 }], proposer: { publicKey: d6, metadata: this.client.metadata }, expiryTimestamp: m4, pairingTopic: p7 }, o7 && { sessionProperties: o7 }), a4 && { scopedProperties: a4 }), { id: payloadId() }), _4 = yo2("session_connect", f9.id), { reject: g5, resolve: A4, done: D3 } = ao2(w7, $e3), I4 = ({ id: T4 }) => {
        T4 === f9.id && (this.client.events.off("proposal_expire", I4), this.pendingSessions.delete(f9.id), this.events.emit(_4, { error: { message: $e3, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I4), this.events.once(_4, ({ error: T4, session: U3 }) => {
        this.client.events.off("proposal_expire", I4), T4 ? g5(T4) : U3 && A4(U3);
      }), await this.sendRequest({ topic: p7, method: "wc_sessionPropose", params: f9, throwOnFailedPublish: true, clientRpcId: f9.id }), await this.setProposal(f9.id, f9), { uri: h6, approval: D3 };
    }), c6(this, "pair", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e3);
      } catch (t2) {
        throw this.client.logger.error("pair() failed"), t2;
      }
    }), c6(this, "approve", async (e3) => {
      var t2, s4, i6;
      const r4 = this.client.core.eventClient.createEvent({ properties: { topic: (t2 = e3 == null ? void 0 : e3.id) == null ? void 0 : t2.toString(), trace: [Qs2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q2) {
        throw r4.setError(er3.no_internet_connection), q2;
      }
      try {
        await this.isValidProposalId(e3 == null ? void 0 : e3.id);
      } catch (q2) {
        throw this.client.logger.error(`approve() -> proposal.get(${e3 == null ? void 0 : e3.id}) failed`), r4.setError(er3.proposal_not_found), q2;
      }
      try {
        await this.isValidApprove(e3);
      } catch (q2) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r4.setError(er3.session_approve_namespace_validation_failure), q2;
      }
      const { id: o7, relayProtocol: a4, namespaces: l8, sessionProperties: p7, scopedProperties: h6, sessionConfig: u5 } = e3, d6 = this.client.proposal.get(o7);
      this.client.core.eventClient.deleteEvent({ eventId: r4.eventId });
      const { pairingTopic: w7, proposer: m4, requiredNamespaces: f9, optionalNamespaces: _4 } = d6;
      let g5 = (s4 = this.client.core.eventClient) == null ? void 0 : s4.getEvent({ topic: w7 });
      g5 || (g5 = (i6 = this.client.core.eventClient) == null ? void 0 : i6.createEvent({ type: Qs2.session_approve_started, properties: { topic: w7, trace: [Qs2.session_approve_started, Qs2.session_namespaces_validation_success] } }));
      const A4 = await this.client.core.crypto.generateKeyPair(), D3 = m4.publicKey, I4 = await this.client.core.crypto.generateSharedKey(A4, D3), T4 = v5(v5(v5({ relay: { protocol: a4 ?? "irn" }, namespaces: l8, controller: { publicKey: A4, metadata: this.client.metadata }, expiry: po2(J4) }, p7 && { sessionProperties: p7 }), h6 && { scopedProperties: h6 }), u5 && { sessionConfig: u5 }), U3 = Q3.relay;
      g5.addTrace(Qs2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I4, { transportType: U3 });
      } catch (q2) {
        throw g5.setError(er3.subscribe_session_topic_failure), q2;
      }
      g5.addTrace(Qs2.subscribe_session_topic_success);
      const fe5 = b4(v5({}, T4), { topic: I4, requiredNamespaces: f9, optionalNamespaces: _4, pairingTopic: w7, acknowledged: false, self: T4.controller, peer: { publicKey: m4.publicKey, metadata: m4.metadata }, controller: A4, transportType: Q3.relay });
      await this.client.session.set(I4, fe5), g5.addTrace(Qs2.store_session);
      try {
        g5.addTrace(Qs2.publishing_session_settle), await this.sendRequest({ topic: I4, method: "wc_sessionSettle", params: T4, throwOnFailedPublish: true }).catch((q2) => {
          throw g5 == null ? void 0 : g5.setError(er3.session_settle_publish_failure), q2;
        }), g5.addTrace(Qs2.session_settle_publish_success), g5.addTrace(Qs2.publishing_session_approve), await this.sendResult({ id: o7, topic: w7, result: { relay: { protocol: a4 ?? "irn" }, responderPublicKey: A4 }, throwOnFailedPublish: true }).catch((q2) => {
          throw g5 == null ? void 0 : g5.setError(er3.session_approve_publish_failure), q2;
        }), g5.addTrace(Qs2.session_approve_publish_success);
      } catch (q2) {
        throw this.client.logger.error(q2), this.client.session.delete(I4, de2("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I4), q2;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: g5.eventId }), await this.client.core.pairing.updateMetadata({ topic: w7, metadata: m4.metadata }), await this.client.proposal.delete(o7, de2("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: w7 }), await this.setExpiry(I4, po2(J4)), { topic: I4, acknowledged: () => Promise.resolve(this.client.session.get(I4)) };
    }), c6(this, "reject", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e3);
      } catch (r4) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r4;
      }
      const { id: t2, reason: s4 } = e3;
      let i6;
      try {
        i6 = this.client.proposal.get(t2).pairingTopic;
      } catch (r4) {
        throw this.client.logger.error(`reject() -> proposal.get(${t2}) failed`), r4;
      }
      i6 && (await this.sendError({ id: t2, topic: i6, error: s4, rpcOpts: N10.wc_sessionPropose.reject }), await this.client.proposal.delete(t2, de2("USER_DISCONNECTED")));
    }), c6(this, "update", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e3);
      } catch (h6) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h6;
      }
      const { topic: t2, namespaces: s4 } = e3, { done: i6, resolve: r4, reject: o7 } = ao2(), a4 = payloadId(), l8 = getBigIntRpcId().toString(), p7 = this.client.session.get(t2).namespaces;
      return this.events.once(yo2("session_update", a4), ({ error: h6 }) => {
        h6 ? o7(h6) : r4();
      }), await this.client.session.update(t2, { namespaces: s4 }), await this.sendRequest({ topic: t2, method: "wc_sessionUpdate", params: { namespaces: s4 }, throwOnFailedPublish: true, clientRpcId: a4, relayRpcId: l8 }).catch((h6) => {
        this.client.logger.error(h6), this.client.session.update(t2, { namespaces: p7 }), o7(h6);
      }), { acknowledged: i6 };
    }), c6(this, "extend", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e3);
      } catch (a4) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a4;
      }
      const { topic: t2 } = e3, s4 = payloadId(), { done: i6, resolve: r4, reject: o7 } = ao2();
      return this.events.once(yo2("session_extend", s4), ({ error: a4 }) => {
        a4 ? o7(a4) : r4();
      }), await this.setExpiry(t2, po2(J4)), this.sendRequest({ topic: t2, method: "wc_sessionExtend", params: {}, clientRpcId: s4, throwOnFailedPublish: true }).catch((a4) => {
        o7(a4);
      }), { acknowledged: i6 };
    }), c6(this, "request", async (e3) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e3);
      } catch (_4) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), _4;
      }
      const { chainId: t2, request: s4, topic: i6, expiry: r4 = N10.wc_sessionRequest.req.ttl } = e3, o7 = this.client.session.get(i6);
      (o7 == null ? void 0 : o7.transportType) === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a4 = payloadId(), l8 = getBigIntRpcId().toString(), { done: p7, resolve: h6, reject: u5 } = ao2(r4, "Request expired. Please try again.");
      this.events.once(yo2("session_request", a4), ({ error: _4, result: g5 }) => {
        _4 ? u5(_4) : h6(g5);
      });
      const d6 = "wc_sessionRequest", w7 = this.getAppLinkIfEnabled(o7.peer.metadata, o7.transportType);
      if (w7)
        return await this.sendRequest({ clientRpcId: a4, relayRpcId: l8, topic: i6, method: d6, params: { request: b4(v5({}, s4), { expiryTimestamp: po2(r4) }), chainId: t2 }, expiry: r4, throwOnFailedPublish: true, appLink: w7 }).catch((_4) => u5(_4)), this.client.events.emit("session_request_sent", { topic: i6, request: s4, chainId: t2, id: a4 }), await p7();
      const m4 = { request: b4(v5({}, s4), { expiryTimestamp: po2(r4) }), chainId: t2 }, f9 = this.shouldSetTVF(d6, m4);
      return await Promise.all([new Promise(async (_4) => {
        await this.sendRequest(v5({ clientRpcId: a4, relayRpcId: l8, topic: i6, method: d6, params: m4, expiry: r4, throwOnFailedPublish: true }, f9 && { tvf: this.getTVFParams(a4, m4) })).catch((g5) => u5(g5)), this.client.events.emit("session_request_sent", { topic: i6, request: s4, chainId: t2, id: a4 }), _4();
      }), new Promise(async (_4) => {
        var g5;
        if (!((g5 = o7.sessionConfig) != null && g5.disableDeepLink)) {
          const A4 = await bo2(this.client.core.storage, Me4);
          await mo2({ id: a4, topic: i6, wcDeepLink: A4 });
        }
        _4();
      }), p7()]).then((_4) => _4[2]);
    }), c6(this, "respond", async (e3) => {
      this.isInitialized(), await this.isValidRespond(e3);
      const { topic: t2, response: s4 } = e3, { id: i6 } = s4, r4 = this.client.session.get(t2);
      r4.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const o7 = this.getAppLinkIfEnabled(r4.peer.metadata, r4.transportType);
      isJsonRpcResult(s4) ? await this.sendResult({ id: i6, topic: t2, result: s4.result, throwOnFailedPublish: true, appLink: o7 }) : isJsonRpcError(s4) && await this.sendError({ id: i6, topic: t2, error: s4.error, appLink: o7 }), this.cleanupAfterResponse(e3);
    }), c6(this, "ping", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e3);
      } catch (s4) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s4;
      }
      const { topic: t2 } = e3;
      if (this.client.session.keys.includes(t2)) {
        const s4 = payloadId(), i6 = getBigIntRpcId().toString(), { done: r4, resolve: o7, reject: a4 } = ao2();
        this.events.once(yo2("session_ping", s4), ({ error: l8 }) => {
          l8 ? a4(l8) : o7();
        }), await Promise.all([this.sendRequest({ topic: t2, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s4, relayRpcId: i6 }), r4()]);
      } else
        this.client.core.pairing.pairings.keys.includes(t2) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: t2 }));
    }), c6(this, "emit", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e3);
      const { topic: t2, event: s4, chainId: i6 } = e3, r4 = getBigIntRpcId().toString(), o7 = payloadId();
      await this.sendRequest({ topic: t2, method: "wc_sessionEvent", params: { event: s4, chainId: i6 }, throwOnFailedPublish: true, relayRpcId: r4, clientRpcId: o7 });
    }), c6(this, "disconnect", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e3);
      const { topic: t2 } = e3;
      if (this.client.session.keys.includes(t2))
        await this.sendRequest({ topic: t2, method: "wc_sessionDelete", params: de2("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t2, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t2))
        await this.client.core.pairing.disconnect({ topic: t2 });
      else {
        const { message: s4 } = te2("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t2}`);
        throw new Error(s4);
      }
    }), c6(this, "find", (e3) => (this.isInitialized(), this.client.session.getAll().filter((t2) => Pi2(t2, e3)))), c6(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c6(this, "authenticate", async (e3, t2) => {
      var s4;
      this.isInitialized(), this.isValidAuthenticate(e3);
      const i6 = t2 && this.client.core.linkModeSupportedApps.includes(t2) && ((s4 = this.client.metadata.redirect) == null ? void 0 : s4.linkMode), r4 = i6 ? Q3.link_mode : Q3.relay;
      r4 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const { chains: o7, statement: a4 = "", uri: l8, domain: p7, nonce: h6, type: u5, exp: d6, nbf: w7, methods: m4 = [], expiry: f9 } = e3, _4 = [...e3.resources || []], { topic: g5, uri: A4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r4 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: g5, uri: A4 } });
      const D3 = await this.client.core.crypto.generateKeyPair(), I4 = ii(D3);
      if (await Promise.all([this.client.auth.authKeys.set(ce2, { responseTopic: I4, publicKey: D3 }), this.client.auth.pairingTopics.set(I4, { topic: I4, pairingTopic: g5 })]), await this.client.core.relayer.subscribe(I4, { transportType: r4 }), this.client.logger.info(`sending request to new pairing topic: ${g5}`), m4.length > 0) {
        const { namespace: x6 } = Ye2(o7[0]);
        let L5 = rs(x6, "request", m4);
        Me2(_4) && (L5 = os(L5, _4.pop())), _4.push(L5);
      }
      const T4 = f9 && f9 > N10.wc_sessionAuthenticate.req.ttl ? f9 : N10.wc_sessionAuthenticate.req.ttl, U3 = { authPayload: { type: u5 ?? "caip122", chains: o7, statement: a4, aud: l8, domain: p7, version: "1", nonce: h6, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d6, nbf: w7, resources: _4 }, requester: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: po2(T4) }, fe5 = { eip155: { chains: o7, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m4])], events: ["chainChanged", "accountsChanged"] } }, q2 = { requiredNamespaces: {}, optionalNamespaces: fe5, relays: [{ protocol: "irn" }], pairingTopic: g5, proposer: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: po2(N10.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Rt5, resolve: je5, reject: Se5 } = ao2(T4, "Request expired"), te5 = payloadId(), le5 = yo2("session_connect", q2.id), Re4 = yo2("session_request", te5), pe4 = async ({ error: x6, session: L5 }) => {
        this.events.off(Re4, ve4), x6 ? Se5(x6) : L5 && je5({ session: L5 });
      }, ve4 = async (x6) => {
        var L5, Fe4, Qe4;
        if (await this.deletePendingAuthRequest(te5, { message: "fulfilled", code: 0 }), x6.error) {
          const ie4 = de2("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return x6.error.code === ie4.code ? void 0 : (this.events.off(le5, pe4), Se5(x6.error.message));
        }
        await this.deleteProposal(q2.id), this.events.off(le5, pe4);
        const { cacaos: He5, responder: Q4 } = x6.result, Te5 = [], ze5 = [];
        for (const ie4 of He5) {
          await Zo2({ cacao: ie4, projectId: this.client.core.projectId }) || (this.client.logger.error(ie4, "Signature verification failed"), Se5(de2("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe5 } = ie4, Pe5 = Me2(qe5.resources), Ye5 = [In2(qe5.iss)], vt4 = ut2(qe5.iss);
          if (Pe5) {
            const Ne4 = ss(Pe5), It4 = is(Pe5);
            Te5.push(...Ne4), Ye5.push(...It4);
          }
          for (const Ne4 of Ye5)
            ze5.push(`${Ne4}:${vt4}`);
        }
        const se4 = await this.client.core.crypto.generateSharedKey(D3, Q4.publicKey);
        let he4;
        Te5.length > 0 && (he4 = { topic: se4, acknowledged: true, self: { publicKey: D3, metadata: this.client.metadata }, peer: Q4, controller: Q4.publicKey, expiry: po2(J4), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: g5, namespaces: Ri([...new Set(Te5)], [...new Set(ze5)]), transportType: r4 }, await this.client.core.relayer.subscribe(se4, { transportType: r4 }), await this.client.session.set(se4, he4), g5 && await this.client.core.pairing.updateMetadata({ topic: g5, metadata: Q4.metadata }), he4 = this.client.session.get(se4)), (L5 = this.client.metadata.redirect) != null && L5.linkMode && (Fe4 = Q4.metadata.redirect) != null && Fe4.linkMode && (Qe4 = Q4.metadata.redirect) != null && Qe4.universal && t2 && (this.client.core.addLinkModeSupportedApp(Q4.metadata.redirect.universal), this.client.session.update(se4, { transportType: Q3.link_mode })), je5({ auths: He5, session: he4 });
      };
      this.events.once(le5, pe4), this.events.once(Re4, ve4);
      let Ie5;
      try {
        if (i6) {
          const x6 = formatJsonRpcRequest("wc_sessionAuthenticate", U3, te5);
          this.client.core.history.set(g5, x6);
          const L5 = await this.client.core.crypto.encode("", x6, { type: _e2, encoding: ti });
          Ie5 = xi(t2, g5, L5);
        } else
          await Promise.all([this.sendRequest({ topic: g5, method: "wc_sessionAuthenticate", params: U3, expiry: e3.expiry, throwOnFailedPublish: true, clientRpcId: te5 }), this.sendRequest({ topic: g5, method: "wc_sessionPropose", params: q2, expiry: N10.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q2.id })]);
      } catch (x6) {
        throw this.events.off(le5, pe4), this.events.off(Re4, ve4), x6;
      }
      return await this.setProposal(q2.id, q2), await this.setAuthRequest(te5, { request: b4(v5({}, U3), { verifyContext: {} }), pairingTopic: g5, transportType: r4 }), { uri: Ie5 ?? A4, response: Rt5 };
    }), c6(this, "approveSessionAuthenticate", async (e3) => {
      const { id: t2, auths: s4 } = e3, i6 = this.client.core.eventClient.createEvent({ properties: { topic: t2.toString(), trace: [tr3.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (f9) {
        throw i6.setError(ir3.no_internet_connection), f9;
      }
      const r4 = this.getPendingAuthRequest(t2);
      if (!r4)
        throw i6.setError(ir3.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t2}`);
      const o7 = r4.transportType || Q3.relay;
      o7 === Q3.relay && await this.confirmOnlineStateOrThrow();
      const a4 = r4.requester.publicKey, l8 = await this.client.core.crypto.generateKeyPair(), p7 = ii(a4), h6 = { type: Oe2, receiverPublicKey: a4, senderPublicKey: l8 }, u5 = [], d6 = [];
      for (const f9 of s4) {
        if (!await Zo2({ cacao: f9, projectId: this.client.core.projectId })) {
          i6.setError(ir3.invalid_cacao);
          const I4 = de2("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t2, topic: p7, error: I4, encodeOpts: h6 }), new Error(I4.message);
        }
        i6.addTrace(tr3.cacaos_verified);
        const { p: _4 } = f9, g5 = Me2(_4.resources), A4 = [In2(_4.iss)], D3 = ut2(_4.iss);
        if (g5) {
          const I4 = ss(g5), T4 = is(g5);
          u5.push(...I4), A4.push(...T4);
        }
        for (const I4 of A4)
          d6.push(`${I4}:${D3}`);
      }
      const w7 = await this.client.core.crypto.generateSharedKey(l8, a4);
      i6.addTrace(tr3.create_authenticated_session_topic);
      let m4;
      if ((u5 == null ? void 0 : u5.length) > 0) {
        m4 = { topic: w7, acknowledged: true, self: { publicKey: l8, metadata: this.client.metadata }, peer: { publicKey: a4, metadata: r4.requester.metadata }, controller: a4, expiry: po2(J4), authentication: s4, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r4.pairingTopic, namespaces: Ri([...new Set(u5)], [...new Set(d6)]), transportType: o7 }, i6.addTrace(tr3.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w7, { transportType: o7 });
        } catch (f9) {
          throw i6.setError(ir3.subscribe_authenticated_session_topic_failure), f9;
        }
        i6.addTrace(tr3.subscribe_authenticated_session_topic_success), await this.client.session.set(w7, m4), i6.addTrace(tr3.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r4.pairingTopic, metadata: r4.requester.metadata });
      }
      i6.addTrace(tr3.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p7, id: t2, result: { cacaos: s4, responder: { publicKey: l8, metadata: this.client.metadata } }, encodeOpts: h6, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r4.requester.metadata, o7) });
      } catch (f9) {
        throw i6.setError(ir3.authenticated_session_approve_publish_failure), f9;
      }
      return await this.client.auth.requests.delete(t2, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r4.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i6.eventId }), { session: m4 };
    }), c6(this, "rejectSessionAuthenticate", async (e3) => {
      this.isInitialized();
      const { id: t2, reason: s4 } = e3, i6 = this.getPendingAuthRequest(t2);
      if (!i6)
        throw new Error(`Could not find pending auth request with id ${t2}`);
      i6.transportType === Q3.relay && await this.confirmOnlineStateOrThrow();
      const r4 = i6.requester.publicKey, o7 = await this.client.core.crypto.generateKeyPair(), a4 = ii(r4), l8 = { type: Oe2, receiverPublicKey: r4, senderPublicKey: o7 };
      await this.sendError({ id: t2, topic: a4, error: s4, encodeOpts: l8, rpcOpts: N10.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i6.requester.metadata, i6.transportType) }), await this.client.auth.requests.delete(t2, { message: "rejected", code: 0 }), await this.client.proposal.delete(t2, de2("USER_DISCONNECTED"));
    }), c6(this, "formatAuthMessage", (e3) => {
      this.isInitialized();
      const { request: t2, iss: s4 } = e3;
      return On2(t2, s4);
    }), c6(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0)
          for (; this.relayMessageCache.length > 0; )
            try {
              const e3 = this.relayMessageCache.shift();
              e3 && await this.onRelayMessage(e3);
            } catch (e3) {
              this.client.logger.error(e3);
            }
      }, 50);
    }), c6(this, "cleanupDuplicatePairings", async (e3) => {
      if (e3.pairingTopic)
        try {
          const t2 = this.client.core.pairing.pairings.get(e3.pairingTopic), s4 = this.client.core.pairing.pairings.getAll().filter((i6) => {
            var r4, o7;
            return ((r4 = i6.peerMetadata) == null ? void 0 : r4.url) && ((o7 = i6.peerMetadata) == null ? void 0 : o7.url) === e3.peer.metadata.url && i6.topic && i6.topic !== t2.topic;
          });
          if (s4.length === 0)
            return;
          this.client.logger.info(`Cleaning up ${s4.length} duplicate pairing(s)`), await Promise.all(s4.map((i6) => this.client.core.pairing.disconnect({ topic: i6.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
        } catch (t2) {
          this.client.logger.error(t2);
        }
    }), c6(this, "deleteSession", async (e3) => {
      var t2;
      const { topic: s4, expirerHasDeleted: i6 = false, emitEvent: r4 = true, id: o7 = 0 } = e3, { self: a4 } = this.client.session.get(s4);
      await this.client.core.relayer.unsubscribe(s4), await this.client.session.delete(s4, de2("USER_DISCONNECTED")), this.addToRecentlyDeleted(s4, "session"), this.client.core.crypto.keychain.has(a4.publicKey) && await this.client.core.crypto.deleteKeyPair(a4.publicKey), this.client.core.crypto.keychain.has(s4) && await this.client.core.crypto.deleteSymKey(s4), i6 || this.client.core.expirer.del(s4), this.client.core.storage.removeItem(Me4).catch((l8) => this.client.logger.warn(l8)), this.getPendingSessionRequests().forEach((l8) => {
        l8.topic === s4 && this.deletePendingSessionRequest(l8.id, de2("USER_DISCONNECTED"));
      }), s4 === ((t2 = this.sessionRequestQueue.queue[0]) == null ? void 0 : t2.topic) && (this.sessionRequestQueue.state = $2.idle), r4 && this.client.events.emit("session_delete", { id: o7, topic: s4 });
    }), c6(this, "deleteProposal", async (e3, t2) => {
      if (t2)
        try {
          const s4 = this.client.proposal.get(e3), i6 = this.client.core.eventClient.getEvent({ topic: s4.pairingTopic });
          i6 == null ? void 0 : i6.setError(er3.proposal_expired);
        } catch {
        }
      await Promise.all([this.client.proposal.delete(e3, de2("USER_DISCONNECTED")), t2 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "proposal");
    }), c6(this, "deletePendingSessionRequest", async (e3, t2, s4 = false) => {
      await Promise.all([this.client.pendingRequest.delete(e3, t2), s4 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i6) => i6.id !== e3), s4 && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: e3 }));
    }), c6(this, "deletePendingAuthRequest", async (e3, t2, s4 = false) => {
      await Promise.all([this.client.auth.requests.delete(e3, t2), s4 ? Promise.resolve() : this.client.core.expirer.del(e3)]);
    }), c6(this, "setExpiry", async (e3, t2) => {
      this.client.session.keys.includes(e3) && (this.client.core.expirer.set(e3, t2), await this.client.session.update(e3, { expiry: t2 }));
    }), c6(this, "setProposal", async (e3, t2) => {
      this.client.core.expirer.set(e3, po2(N10.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e3, t2);
    }), c6(this, "setAuthRequest", async (e3, t2) => {
      const { request: s4, pairingTopic: i6, transportType: r4 = Q3.relay } = t2;
      this.client.core.expirer.set(e3, s4.expiryTimestamp), await this.client.auth.requests.set(e3, { authPayload: s4.authPayload, requester: s4.requester, expiryTimestamp: s4.expiryTimestamp, id: e3, pairingTopic: i6, verifyContext: s4.verifyContext, transportType: r4 });
    }), c6(this, "setPendingSessionRequest", async (e3) => {
      const { id: t2, topic: s4, params: i6, verifyContext: r4 } = e3, o7 = i6.request.expiryTimestamp || po2(N10.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t2, o7), await this.client.pendingRequest.set(t2, { id: t2, topic: s4, params: i6, verifyContext: r4 });
    }), c6(this, "sendRequest", async (e3) => {
      const { topic: t2, method: s4, params: i6, expiry: r4, relayRpcId: o7, clientRpcId: a4, throwOnFailedPublish: l8, appLink: p7, tvf: h6 } = e3, u5 = formatJsonRpcRequest(s4, i6, a4);
      let d6;
      const w7 = !!p7;
      try {
        const _4 = w7 ? ti : At;
        d6 = await this.client.core.crypto.encode(t2, u5, { encoding: _4 });
      } catch (_4) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t2} failed`), _4;
      }
      let m4;
      if (gt3.includes(s4)) {
        const _4 = ci(JSON.stringify(u5)), g5 = ci(d6);
        m4 = await this.client.core.verify.register({ id: g5, decryptedId: _4 });
      }
      const f9 = N10[s4].req;
      if (f9.attestation = m4, r4 && (f9.ttl = r4), o7 && (f9.id = o7), this.client.core.history.set(t2, u5), w7) {
        const _4 = xi(p7, t2, d6);
        await globalThis.Linking.openURL(_4, this.client.name);
      } else {
        const _4 = N10[s4].req;
        r4 && (_4.ttl = r4), o7 && (_4.id = o7), _4.tvf = b4(v5({}, h6), { correlationId: u5.id }), l8 ? (_4.internal = b4(v5({}, _4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t2, d6, _4)) : this.client.core.relayer.publish(t2, d6, _4).catch((g5) => this.client.logger.error(g5));
      }
      return u5.id;
    }), c6(this, "sendResult", async (e3) => {
      const { id: t2, topic: s4, result: i6, throwOnFailedPublish: r4, encodeOpts: o7, appLink: a4 } = e3, l8 = formatJsonRpcResult(t2, i6);
      let p7;
      const h6 = a4 && typeof (globalThis == null ? void 0 : globalThis.Linking) < "u";
      try {
        const w7 = h6 ? ti : At;
        p7 = await this.client.core.crypto.encode(s4, l8, b4(v5({}, o7 || {}), { encoding: w7 }));
      } catch (w7) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s4} failed`), w7;
      }
      let u5, d6;
      try {
        u5 = await this.client.core.history.get(s4, t2);
        const w7 = u5.request;
        try {
          this.shouldSetTVF(w7.method, w7.params) && (d6 = this.getTVFParams(t2, w7.params, i6));
        } catch (m4) {
          this.client.logger.warn("sendResult() -> getTVFParams() failed", m4);
        }
      } catch (w7) {
        throw this.client.logger.error(`sendResult() -> history.get(${s4}, ${t2}) failed`), w7;
      }
      if (h6) {
        const w7 = xi(a4, s4, p7);
        await globalThis.Linking.openURL(w7, this.client.name);
      } else {
        const w7 = u5.request.method, m4 = N10[w7].res;
        m4.tvf = b4(v5({}, d6), { correlationId: t2 }), r4 ? (m4.internal = b4(v5({}, m4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s4, p7, m4)) : this.client.core.relayer.publish(s4, p7, m4).catch((f9) => this.client.logger.error(f9));
      }
      await this.client.core.history.resolve(l8);
    }), c6(this, "sendError", async (e3) => {
      const { id: t2, topic: s4, error: i6, encodeOpts: r4, rpcOpts: o7, appLink: a4 } = e3, l8 = formatJsonRpcError(t2, i6);
      let p7;
      const h6 = a4 && typeof (globalThis == null ? void 0 : globalThis.Linking) < "u";
      try {
        const d6 = h6 ? ti : At;
        p7 = await this.client.core.crypto.encode(s4, l8, b4(v5({}, r4 || {}), { encoding: d6 }));
      } catch (d6) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s4} failed`), d6;
      }
      let u5;
      try {
        u5 = await this.client.core.history.get(s4, t2);
      } catch (d6) {
        throw this.client.logger.error(`sendError() -> history.get(${s4}, ${t2}) failed`), d6;
      }
      if (h6) {
        const d6 = xi(a4, s4, p7);
        await globalThis.Linking.openURL(d6, this.client.name);
      } else {
        const d6 = u5.request.method, w7 = o7 || N10[d6].res;
        this.client.core.relayer.publish(s4, p7, w7);
      }
      await this.client.core.history.resolve(l8);
    }), c6(this, "cleanup", async () => {
      const e3 = [], t2 = [];
      this.client.session.getAll().forEach((s4) => {
        let i6 = false;
        go2(s4.expiry) && (i6 = true), this.client.core.crypto.keychain.has(s4.topic) || (i6 = true), i6 && e3.push(s4.topic);
      }), this.client.proposal.getAll().forEach((s4) => {
        go2(s4.expiryTimestamp) && t2.push(s4.id);
      }), await Promise.all([...e3.map((s4) => this.deleteSession({ topic: s4 })), ...t2.map((s4) => this.deleteProposal(s4))]);
    }), c6(this, "onProviderMessageEvent", async (e3) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(e3) : await this.onRelayMessage(e3);
    }), c6(this, "onRelayEventRequest", async (e3) => {
      this.requestQueue.queue.push(e3), await this.processRequestsQueue();
    }), c6(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const e3 = this.requestQueue.queue.shift();
        if (e3)
          try {
            await this.processRequest(e3);
          } catch (t2) {
            this.client.logger.warn(t2);
          }
      }
      this.requestQueue.state = $2.idle;
    }), c6(this, "processRequest", async (e3) => {
      const { topic: t2, payload: s4, attestation: i6, transportType: r4, encryptedId: o7 } = e3, a4 = s4.method;
      if (!this.shouldIgnorePairingRequest({ topic: t2, requestMethod: a4 }))
        switch (a4) {
          case "wc_sessionPropose":
            return await this.onSessionProposeRequest({ topic: t2, payload: s4, attestation: i6, encryptedId: o7 });
          case "wc_sessionSettle":
            return await this.onSessionSettleRequest(t2, s4);
          case "wc_sessionUpdate":
            return await this.onSessionUpdateRequest(t2, s4);
          case "wc_sessionExtend":
            return await this.onSessionExtendRequest(t2, s4);
          case "wc_sessionPing":
            return await this.onSessionPingRequest(t2, s4);
          case "wc_sessionDelete":
            return await this.onSessionDeleteRequest(t2, s4);
          case "wc_sessionRequest":
            return await this.onSessionRequest({ topic: t2, payload: s4, attestation: i6, encryptedId: o7, transportType: r4 });
          case "wc_sessionEvent":
            return await this.onSessionEventRequest(t2, s4);
          case "wc_sessionAuthenticate":
            return await this.onSessionAuthenticateRequest({ topic: t2, payload: s4, attestation: i6, encryptedId: o7, transportType: r4 });
          default:
            return this.client.logger.info(`Unsupported request method ${a4}`);
        }
    }), c6(this, "onRelayEventResponse", async (e3) => {
      const { topic: t2, payload: s4, transportType: i6 } = e3, r4 = (await this.client.core.history.get(t2, s4.id)).request.method;
      switch (r4) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t2, s4, i6);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t2, s4);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t2, s4);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t2, s4);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t2, s4);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t2, s4);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t2, s4);
        default:
          return this.client.logger.info(`Unsupported response method ${r4}`);
      }
    }), c6(this, "onRelayEventUnknownPayload", (e3) => {
      const { topic: t2 } = e3, { message: s4 } = te2("MISSING_OR_INVALID", `Decoded payload on topic ${t2} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s4);
    }), c6(this, "shouldIgnorePairingRequest", (e3) => {
      const { topic: t2, requestMethod: s4 } = e3, i6 = this.expectedPairingMethodMap.get(t2);
      return !i6 || i6.includes(s4) ? false : !!(i6.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c6(this, "onSessionProposeRequest", async (e3) => {
      const { topic: t2, payload: s4, attestation: i6, encryptedId: r4 } = e3, { params: o7, id: a4 } = s4;
      try {
        const l8 = this.client.core.eventClient.getEvent({ topic: t2 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l8 == null ? void 0 : l8.setError(Y2.proposal_listener_not_found)), this.isValidConnect(v5({}, s4.params));
        const p7 = o7.expiryTimestamp || po2(N10.wc_sessionPropose.req.ttl), h6 = v5({ id: a4, pairingTopic: t2, expiryTimestamp: p7 }, o7);
        await this.setProposal(a4, h6);
        const u5 = await this.getVerifyContext({ attestationId: i6, hash: ci(JSON.stringify(s4)), encryptedId: r4, metadata: h6.proposer.metadata });
        l8 == null ? void 0 : l8.addTrace(G2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a4, params: h6, verifyContext: u5 });
      } catch (l8) {
        await this.sendError({ id: a4, topic: t2, error: l8, rpcOpts: N10.wc_sessionPropose.autoReject }), this.client.logger.error(l8);
      }
    }), c6(this, "onSessionProposeResponse", async (e3, t2, s4) => {
      const { id: i6 } = t2;
      if (isJsonRpcResult(t2)) {
        const { result: r4 } = t2;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r4 });
        const o7 = this.client.proposal.get(i6);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o7 });
        const a4 = o7.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a4 });
        const l8 = r4.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l8 });
        const p7 = await this.client.core.crypto.generateSharedKey(a4, l8);
        this.pendingSessions.set(i6, { sessionTopic: p7, pairingTopic: e3, proposalId: i6, publicKey: a4 });
        const h6 = await this.client.core.relayer.subscribe(p7, { transportType: s4 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h6 }), await this.client.core.pairing.activate({ topic: e3 });
      } else if (isJsonRpcError(t2)) {
        await this.client.proposal.delete(i6, de2("USER_DISCONNECTED"));
        const r4 = yo2("session_connect", i6);
        if (this.events.listenerCount(r4) === 0)
          throw new Error(`emitting ${r4} without any listeners, 954`);
        this.events.emit(r4, { error: t2.error });
      }
    }), c6(this, "onSessionSettleRequest", async (e3, t2) => {
      const { id: s4, params: i6 } = t2;
      try {
        this.isValidSessionSettleRequest(i6);
        const { relay: r4, controller: o7, expiry: a4, namespaces: l8, sessionProperties: p7, scopedProperties: h6, sessionConfig: u5 } = t2.params, d6 = [...this.pendingSessions.values()].find((f9) => f9.sessionTopic === e3);
        if (!d6)
          return this.client.logger.error(`Pending session not found for topic ${e3}`);
        const w7 = this.client.proposal.get(d6.proposalId), m4 = b4(v5(v5(v5({ topic: e3, relay: r4, expiry: a4, namespaces: l8, acknowledged: true, pairingTopic: d6.pairingTopic, requiredNamespaces: w7.requiredNamespaces, optionalNamespaces: w7.optionalNamespaces, controller: o7.publicKey, self: { publicKey: d6.publicKey, metadata: this.client.metadata }, peer: { publicKey: o7.publicKey, metadata: o7.metadata } }, p7 && { sessionProperties: p7 }), h6 && { scopedProperties: h6 }), u5 && { sessionConfig: u5 }), { transportType: Q3.relay });
        await this.client.session.set(m4.topic, m4), await this.setExpiry(m4.topic, m4.expiry), await this.client.core.pairing.updateMetadata({ topic: d6.pairingTopic, metadata: m4.peer.metadata }), this.client.events.emit("session_connect", { session: m4 }), this.events.emit(yo2("session_connect", d6.proposalId), { session: m4 }), this.pendingSessions.delete(d6.proposalId), this.deleteProposal(d6.proposalId, false), this.cleanupDuplicatePairings(m4), await this.sendResult({ id: t2.id, topic: e3, result: true, throwOnFailedPublish: true });
      } catch (r4) {
        await this.sendError({ id: s4, topic: e3, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "onSessionSettleResponse", async (e3, t2) => {
      const { id: s4 } = t2;
      isJsonRpcResult(t2) ? (await this.client.session.update(e3, { acknowledged: true }), this.events.emit(yo2("session_approve", s4), {})) : isJsonRpcError(t2) && (await this.client.session.delete(e3, de2("USER_DISCONNECTED")), this.events.emit(yo2("session_approve", s4), { error: t2.error }));
    }), c6(this, "onSessionUpdateRequest", async (e3, t2) => {
      const { params: s4, id: i6 } = t2;
      try {
        const r4 = `${e3}_session_update`, o7 = ec.get(r4);
        if (o7 && this.isRequestOutOfSync(o7, i6)) {
          this.client.logger.warn(`Discarding out of sync request - ${i6}`), this.sendError({ id: i6, topic: e3, error: de2("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(v5({ topic: e3 }, s4));
        try {
          ec.set(r4, i6), await this.client.session.update(e3, { namespaces: s4.namespaces }), await this.sendResult({ id: i6, topic: e3, result: true, throwOnFailedPublish: true });
        } catch (a4) {
          throw ec.delete(r4), a4;
        }
        this.client.events.emit("session_update", { id: i6, topic: e3, params: s4 });
      } catch (r4) {
        await this.sendError({ id: i6, topic: e3, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "isRequestOutOfSync", (e3, t2) => t2.toString().slice(0, -3) < e3.toString().slice(0, -3)), c6(this, "onSessionUpdateResponse", (e3, t2) => {
      const { id: s4 } = t2, i6 = yo2("session_update", s4);
      if (this.events.listenerCount(i6) === 0)
        throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(yo2("session_update", s4), {}) : isJsonRpcError(t2) && this.events.emit(yo2("session_update", s4), { error: t2.error });
    }), c6(this, "onSessionExtendRequest", async (e3, t2) => {
      const { id: s4 } = t2;
      try {
        this.isValidExtend({ topic: e3 }), await this.setExpiry(e3, po2(J4)), await this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s4, topic: e3 });
      } catch (i6) {
        await this.sendError({ id: s4, topic: e3, error: i6 }), this.client.logger.error(i6);
      }
    }), c6(this, "onSessionExtendResponse", (e3, t2) => {
      const { id: s4 } = t2, i6 = yo2("session_extend", s4);
      if (this.events.listenerCount(i6) === 0)
        throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(yo2("session_extend", s4), {}) : isJsonRpcError(t2) && this.events.emit(yo2("session_extend", s4), { error: t2.error });
    }), c6(this, "onSessionPingRequest", async (e3, t2) => {
      const { id: s4 } = t2;
      try {
        this.isValidPing({ topic: e3 }), await this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s4, topic: e3 });
      } catch (i6) {
        await this.sendError({ id: s4, topic: e3, error: i6 }), this.client.logger.error(i6);
      }
    }), c6(this, "onSessionPingResponse", (e3, t2) => {
      const { id: s4 } = t2, i6 = yo2("session_ping", s4);
      setTimeout(() => {
        if (this.events.listenerCount(i6) === 0)
          throw new Error(`emitting ${i6} without any listeners 2176`);
        isJsonRpcResult(t2) ? this.events.emit(yo2("session_ping", s4), {}) : isJsonRpcError(t2) && this.events.emit(yo2("session_ping", s4), { error: t2.error });
      }, 500);
    }), c6(this, "onSessionDeleteRequest", async (e3, t2) => {
      const { id: s4 } = t2;
      try {
        this.isValidDisconnect({ topic: e3, reason: t2.params }), Promise.all([new Promise((i6) => {
          this.client.core.relayer.once(C3.publish, async () => {
            i6(await this.deleteSession({ topic: e3, id: s4 }));
          });
        }), this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e3, error: de2("USER_DISCONNECTED") })]).catch((i6) => this.client.logger.error(i6));
      } catch (i6) {
        this.client.logger.error(i6);
      }
    }), c6(this, "onSessionRequest", async (e3) => {
      var t2, s4, i6;
      const { topic: r4, payload: o7, attestation: a4, encryptedId: l8, transportType: p7 } = e3, { id: h6, params: u5 } = o7;
      try {
        await this.isValidRequest(v5({ topic: r4 }, u5));
        const d6 = this.client.session.get(r4), w7 = await this.getVerifyContext({ attestationId: a4, hash: ci(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u5, h6))), encryptedId: l8, metadata: d6.peer.metadata, transportType: p7 }), m4 = { id: h6, topic: r4, params: u5, verifyContext: w7 };
        await this.setPendingSessionRequest(m4), p7 === Q3.link_mode && (t2 = d6.peer.metadata.redirect) != null && t2.universal && this.client.core.addLinkModeSupportedApp((s4 = d6.peer.metadata.redirect) == null ? void 0 : s4.universal), (i6 = this.client.signConfig) != null && i6.disableRequestQueue ? this.emitSessionRequest(m4) : (this.addSessionRequestToSessionRequestQueue(m4), this.processSessionRequestQueue());
      } catch (d6) {
        await this.sendError({ id: h6, topic: r4, error: d6 }), this.client.logger.error(d6);
      }
    }), c6(this, "onSessionRequestResponse", (e3, t2) => {
      const { id: s4 } = t2, i6 = yo2("session_request", s4);
      if (this.events.listenerCount(i6) === 0)
        throw new Error(`emitting ${i6} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(yo2("session_request", s4), { result: t2.result }) : isJsonRpcError(t2) && this.events.emit(yo2("session_request", s4), { error: t2.error });
    }), c6(this, "onSessionEventRequest", async (e3, t2) => {
      const { id: s4, params: i6 } = t2;
      try {
        const r4 = `${e3}_session_event_${i6.event.name}`, o7 = ec.get(r4);
        if (o7 && this.isRequestOutOfSync(o7, s4)) {
          this.client.logger.info(`Discarding out of sync request - ${s4}`);
          return;
        }
        this.isValidEmit(v5({ topic: e3 }, i6)), this.client.events.emit("session_event", { id: s4, topic: e3, params: i6 }), ec.set(r4, s4);
      } catch (r4) {
        await this.sendError({ id: s4, topic: e3, error: r4 }), this.client.logger.error(r4);
      }
    }), c6(this, "onSessionAuthenticateResponse", (e3, t2) => {
      const { id: s4 } = t2;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e3, payload: t2 }), isJsonRpcResult(t2) ? this.events.emit(yo2("session_request", s4), { result: t2.result }) : isJsonRpcError(t2) && this.events.emit(yo2("session_request", s4), { error: t2.error });
    }), c6(this, "onSessionAuthenticateRequest", async (e3) => {
      var t2;
      const { topic: s4, payload: i6, attestation: r4, encryptedId: o7, transportType: a4 } = e3;
      try {
        const { requester: l8, authPayload: p7, expiryTimestamp: h6 } = i6.params, u5 = await this.getVerifyContext({ attestationId: r4, hash: ci(JSON.stringify(i6)), encryptedId: o7, metadata: l8.metadata, transportType: a4 }), d6 = { requester: l8, pairingTopic: s4, id: i6.id, authPayload: p7, verifyContext: u5, expiryTimestamp: h6 };
        await this.setAuthRequest(i6.id, { request: d6, pairingTopic: s4, transportType: a4 }), a4 === Q3.link_mode && (t2 = l8.metadata.redirect) != null && t2.universal && this.client.core.addLinkModeSupportedApp(l8.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s4, params: i6.params, id: i6.id, verifyContext: u5 });
      } catch (l8) {
        this.client.logger.error(l8);
        const p7 = i6.params.requester.publicKey, h6 = await this.client.core.crypto.generateKeyPair(), u5 = this.getAppLinkIfEnabled(i6.params.requester.metadata, a4), d6 = { type: Oe2, receiverPublicKey: p7, senderPublicKey: h6 };
        await this.sendError({ id: i6.id, topic: s4, error: l8, encodeOpts: d6, rpcOpts: N10.wc_sessionAuthenticate.autoReject, appLink: u5 });
      }
    }), c6(this, "addSessionRequestToSessionRequestQueue", (e3) => {
      this.sessionRequestQueue.queue.push(e3);
    }), c6(this, "cleanupAfterResponse", (e3) => {
      this.deletePendingSessionRequest(e3.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time5.toMiliseconds)(this.requestQueueDelay));
    }), c6(this, "cleanupPendingSentRequestsForTopic", ({ topic: e3, error: t2 }) => {
      const s4 = this.client.core.history.pending;
      s4.length > 0 && s4.filter((i6) => i6.topic === e3 && i6.request.method === "wc_sessionRequest").forEach((i6) => {
        const r4 = i6.request.id, o7 = yo2("session_request", r4);
        if (this.events.listenerCount(o7) === 0)
          throw new Error(`emitting ${o7} without any listeners`);
        this.events.emit(yo2("session_request", i6.request.id), { error: t2 });
      });
    }), c6(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e3 = this.sessionRequestQueue.queue[0];
      if (!e3) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = $2.active, this.emitSessionRequest(e3);
      } catch (t2) {
        this.client.logger.error(t2);
      }
    }), c6(this, "emitSessionRequest", (e3) => {
      this.client.events.emit("session_request", e3);
    }), c6(this, "onPairingCreated", (e3) => {
      if (e3.methods && this.expectedPairingMethodMap.set(e3.topic, e3.methods), e3.active)
        return;
      const t2 = this.client.proposal.getAll().find((s4) => s4.pairingTopic === e3.topic);
      t2 && this.onSessionProposeRequest({ topic: e3.topic, payload: formatJsonRpcRequest("wc_sessionPropose", b4(v5({}, t2), { requiredNamespaces: t2.requiredNamespaces, optionalNamespaces: t2.optionalNamespaces, relays: t2.relays, proposer: t2.proposer, sessionProperties: t2.sessionProperties, scopedProperties: t2.scopedProperties }), t2.id) });
    }), c6(this, "isValidConnect", async (e3) => {
      if (!Vi(e3)) {
        const { message: l8 } = te2("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e3)}`);
        throw new Error(l8);
      }
      const { pairingTopic: t2, requiredNamespaces: s4, optionalNamespaces: i6, sessionProperties: r4, scopedProperties: o7, relays: a4 } = e3;
      if (ae(t2) || await this.isValidPairingTopic(t2), !Di(a4, true)) {
        const { message: l8 } = te2("MISSING_OR_INVALID", `connect() relays: ${a4}`);
        throw new Error(l8);
      }
      if (!ae(s4) && qe2(s4) !== 0 && this.validateNamespaces(s4, "requiredNamespaces"), !ae(i6) && qe2(i6) !== 0 && this.validateNamespaces(i6, "optionalNamespaces"), ae(r4) || this.validateSessionProps(r4, "sessionProperties"), !ae(o7)) {
        this.validateSessionProps(o7, "scopedProperties");
        const l8 = Object.keys(s4 || {}).concat(Object.keys(i6 || {}));
        if (!Object.keys(o7).every((p7) => l8.includes(p7)))
          throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(o7)}, required/optional namespaces: ${JSON.stringify(l8)}`);
      }
    }), c6(this, "validateNamespaces", (e3, t2) => {
      const s4 = ki(e3, "connect()", t2);
      if (s4)
        throw new Error(s4.message);
    }), c6(this, "isValidApprove", async (e3) => {
      if (!Vi(e3))
        throw new Error(te2("MISSING_OR_INVALID", `approve() params: ${e3}`).message);
      const { id: t2, namespaces: s4, relayProtocol: i6, sessionProperties: r4, scopedProperties: o7 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidProposalId(t2);
      const a4 = this.client.proposal.get(t2), l8 = Or2(s4, "approve()");
      if (l8)
        throw new Error(l8.message);
      const p7 = Nr2(a4.requiredNamespaces, s4, "approve()");
      if (p7)
        throw new Error(p7.message);
      if (!q(i6, true)) {
        const { message: h6 } = te2("MISSING_OR_INVALID", `approve() relayProtocol: ${i6}`);
        throw new Error(h6);
      }
      if (ae(r4) || this.validateSessionProps(r4, "sessionProperties"), !ae(o7)) {
        this.validateSessionProps(o7, "scopedProperties");
        const h6 = new Set(Object.keys(s4));
        if (!Object.keys(o7).every((u5) => h6.has(u5)))
          throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(o7)}, approved namespaces: ${Array.from(h6).join(", ")}`);
      }
    }), c6(this, "isValidReject", async (e3) => {
      if (!Vi(e3)) {
        const { message: i6 } = te2("MISSING_OR_INVALID", `reject() params: ${e3}`);
        throw new Error(i6);
      }
      const { id: t2, reason: s4 } = e3;
      if (this.checkRecentlyDeleted(t2), await this.isValidProposalId(t2), !Hi(s4)) {
        const { message: i6 } = te2("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s4)}`);
        throw new Error(i6);
      }
    }), c6(this, "isValidSessionSettleRequest", (e3) => {
      if (!Vi(e3)) {
        const { message: l8 } = te2("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e3}`);
        throw new Error(l8);
      }
      const { relay: t2, controller: s4, namespaces: i6, expiry: r4 } = e3;
      if (!Ar2(t2)) {
        const { message: l8 } = te2("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l8);
      }
      const o7 = Ci(s4, "onSessionSettleRequest()");
      if (o7)
        throw new Error(o7.message);
      const a4 = Or2(i6, "onSessionSettleRequest()");
      if (a4)
        throw new Error(a4.message);
      if (go2(r4)) {
        const { message: l8 } = te2("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l8);
      }
    }), c6(this, "isValidUpdate", async (e3) => {
      if (!Vi(e3)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `update() params: ${e3}`);
        throw new Error(a4);
      }
      const { topic: t2, namespaces: s4 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
      const i6 = this.client.session.get(t2), r4 = Or2(s4, "update()");
      if (r4)
        throw new Error(r4.message);
      const o7 = Nr2(i6.requiredNamespaces, s4, "update()");
      if (o7)
        throw new Error(o7.message);
    }), c6(this, "isValidExtend", async (e3) => {
      if (!Vi(e3)) {
        const { message: s4 } = te2("MISSING_OR_INVALID", `extend() params: ${e3}`);
        throw new Error(s4);
      }
      const { topic: t2 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
    }), c6(this, "isValidRequest", async (e3) => {
      if (!Vi(e3)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `request() params: ${e3}`);
        throw new Error(a4);
      }
      const { topic: t2, request: s4, chainId: i6, expiry: r4 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
      const { namespaces: o7 } = this.client.session.get(t2);
      if (!Gi(o7, i6)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `request() chainId: ${i6}`);
        throw new Error(a4);
      }
      if (!Ki(s4)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `request() ${JSON.stringify(s4)}`);
        throw new Error(a4);
      }
      if (!Wi(o7, i6, s4.method)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `request() method: ${s4.method}`);
        throw new Error(a4);
      }
      if (r4 && !Xi(r4, _e4)) {
        const { message: a4 } = te2("MISSING_OR_INVALID", `request() expiry: ${r4}. Expiry must be a number (in seconds) between ${_e4.min} and ${_e4.max}`);
        throw new Error(a4);
      }
    }), c6(this, "isValidRespond", async (e3) => {
      var t2;
      if (!Vi(e3)) {
        const { message: r4 } = te2("MISSING_OR_INVALID", `respond() params: ${e3}`);
        throw new Error(r4);
      }
      const { topic: s4, response: i6 } = e3;
      try {
        await this.isValidSessionTopic(s4);
      } catch (r4) {
        throw (t2 = e3 == null ? void 0 : e3.response) != null && t2.id && this.cleanupAfterResponse(e3), r4;
      }
      if (!Fi(i6)) {
        const { message: r4 } = te2("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i6)}`);
        throw new Error(r4);
      }
    }), c6(this, "isValidPing", async (e3) => {
      if (!Vi(e3)) {
        const { message: s4 } = te2("MISSING_OR_INVALID", `ping() params: ${e3}`);
        throw new Error(s4);
      }
      const { topic: t2 } = e3;
      await this.isValidSessionOrPairingTopic(t2);
    }), c6(this, "isValidEmit", async (e3) => {
      if (!Vi(e3)) {
        const { message: o7 } = te2("MISSING_OR_INVALID", `emit() params: ${e3}`);
        throw new Error(o7);
      }
      const { topic: t2, event: s4, chainId: i6 } = e3;
      await this.isValidSessionTopic(t2);
      const { namespaces: r4 } = this.client.session.get(t2);
      if (!Gi(r4, i6)) {
        const { message: o7 } = te2("MISSING_OR_INVALID", `emit() chainId: ${i6}`);
        throw new Error(o7);
      }
      if (!qi(s4)) {
        const { message: o7 } = te2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(o7);
      }
      if (!zi(r4, i6, s4.name)) {
        const { message: o7 } = te2("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(o7);
      }
    }), c6(this, "isValidDisconnect", async (e3) => {
      if (!Vi(e3)) {
        const { message: s4 } = te2("MISSING_OR_INVALID", `disconnect() params: ${e3}`);
        throw new Error(s4);
      }
      const { topic: t2 } = e3;
      await this.isValidSessionOrPairingTopic(t2);
    }), c6(this, "isValidAuthenticate", (e3) => {
      const { chains: t2, uri: s4, domain: i6, nonce: r4 } = e3;
      if (!Array.isArray(t2) || t2.length === 0)
        throw new Error("chains is required and must be a non-empty array");
      if (!q(s4, false))
        throw new Error("uri is required parameter");
      if (!q(i6, false))
        throw new Error("domain is required parameter");
      if (!q(r4, false))
        throw new Error("nonce is required parameter");
      if ([...new Set(t2.map((a4) => Ye2(a4).namespace))].length > 1)
        throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: o7 } = Ye2(t2[0]);
      if (o7 !== "eip155")
        throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c6(this, "getVerifyContext", async (e3) => {
      const { attestationId: t2, hash: s4, encryptedId: i6, metadata: r4, transportType: o7 } = e3, a4 = { verified: { verifyUrl: r4.verifyUrl || ue2, validation: "UNKNOWN", origin: r4.url || "" } };
      try {
        if (o7 === Q3.link_mode) {
          const p7 = this.getAppLinkIfEnabled(r4, o7);
          return a4.verified.validation = p7 && new URL(p7).origin === new URL(r4.url).origin ? "VALID" : "INVALID", a4;
        }
        const l8 = await this.client.core.verify.resolve({ attestationId: t2, hash: s4, encryptedId: i6, verifyUrl: r4.verifyUrl });
        l8 && (a4.verified.origin = l8.origin, a4.verified.isScam = l8.isScam, a4.verified.validation = l8.origin === new URL(r4.url).origin ? "VALID" : "INVALID");
      } catch (l8) {
        this.client.logger.warn(l8);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a4)}`), a4;
    }), c6(this, "validateSessionProps", (e3, t2) => {
      Object.values(e3).forEach((s4, i6) => {
        if (s4 == null) {
          const { message: r4 } = te2("MISSING_OR_INVALID", `${t2} must contain an existing value for each key. Received: ${s4} for key ${Object.keys(e3)[i6]}`);
          throw new Error(r4);
        }
      });
    }), c6(this, "getPendingAuthRequest", (e3) => {
      const t2 = this.client.auth.requests.get(e3);
      return typeof t2 == "object" ? t2 : void 0;
    }), c6(this, "addToRecentlyDeleted", (e3, t2) => {
      if (this.recentlyDeletedMap.set(e3, t2), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s4 = 0;
        const i6 = this.recentlyDeletedLimit / 2;
        for (const r4 of this.recentlyDeletedMap.keys()) {
          if (s4++ >= i6)
            break;
          this.recentlyDeletedMap.delete(r4);
        }
      }
    }), c6(this, "checkRecentlyDeleted", (e3) => {
      const t2 = this.recentlyDeletedMap.get(e3);
      if (t2) {
        const { message: s4 } = te2("MISSING_OR_INVALID", `Record was recently deleted - ${t2}: ${e3}`);
        throw new Error(s4);
      }
    }), c6(this, "isLinkModeEnabled", (e3, t2) => {
      var s4, i6, r4, o7, a4, l8, p7, h6, u5;
      return !e3 || t2 !== Q3.link_mode ? false : ((i6 = (s4 = this.client.metadata) == null ? void 0 : s4.redirect) == null ? void 0 : i6.linkMode) === true && ((o7 = (r4 = this.client.metadata) == null ? void 0 : r4.redirect) == null ? void 0 : o7.universal) !== void 0 && ((l8 = (a4 = this.client.metadata) == null ? void 0 : a4.redirect) == null ? void 0 : l8.universal) !== "" && ((p7 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : p7.universal) !== void 0 && ((h6 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : h6.universal) !== "" && ((u5 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : u5.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e3.redirect.universal) && typeof (globalThis == null ? void 0 : globalThis.Linking) < "u";
    }), c6(this, "getAppLinkIfEnabled", (e3, t2) => {
      var s4;
      return this.isLinkModeEnabled(e3, t2) ? (s4 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : s4.universal : void 0;
    }), c6(this, "handleLinkModeMessage", ({ url: e3 }) => {
      if (!e3 || !e3.includes("wc_ev") || !e3.includes("topic"))
        return;
      const t2 = wo2(e3, "topic") || "", s4 = decodeURIComponent(wo2(e3, "wc_ev") || ""), i6 = this.client.session.keys.includes(t2);
      i6 && this.client.session.update(t2, { transportType: Q3.link_mode }), this.client.core.dispatchEnvelope({ topic: t2, message: s4, sessionExists: i6 });
    }), c6(this, "registerLinkModeListeners", async () => {
      var e3;
      if (vo2() || ne() && (e3 = this.client.metadata.redirect) != null && e3.linkMode) {
        const t2 = globalThis == null ? void 0 : globalThis.Linking;
        if (typeof t2 < "u") {
          t2.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s4 = await t2.getInitialURL();
          s4 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s4 });
          }, 50);
        }
      }
    }), c6(this, "shouldSetTVF", (e3, t2) => {
      if (!t2 || e3 !== "wc_sessionRequest")
        return false;
      const { request: s4 } = t2;
      return Object.keys(Ue4).includes(s4.method);
    }), c6(this, "getTVFParams", (e3, t2, s4) => {
      var i6, r4;
      try {
        const o7 = t2.request.method, a4 = this.extractTxHashesFromResult(o7, s4);
        return b4(v5({ correlationId: e3, rpcMethods: [o7], chainId: t2.chainId }, this.isValidContractData(t2.request.params) && { contractAddresses: [(r4 = (i6 = t2.request.params) == null ? void 0 : i6[0]) == null ? void 0 : r4.to] }), { txHashes: a4 });
      } catch (o7) {
        this.client.logger.warn("Error getting TVF params", o7);
      }
      return {};
    }), c6(this, "isValidContractData", (e3) => {
      var t2;
      if (!e3)
        return false;
      try {
        const s4 = (e3 == null ? void 0 : e3.data) || ((t2 = e3 == null ? void 0 : e3[0]) == null ? void 0 : t2.data);
        if (!s4.startsWith("0x"))
          return false;
        const i6 = s4.slice(2);
        return /^[0-9a-fA-F]*$/.test(i6) ? i6.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c6(this, "extractTxHashesFromResult", (e3, t2) => {
      try {
        const s4 = Ue4[e3];
        if (typeof t2 == "string")
          return [t2];
        const i6 = t2[s4.key];
        if ($e2(i6))
          return e3 === "solana_signAllTransactions" ? i6.map((r4) => qo2(r4)) : i6;
        if (typeof i6 == "string")
          return [i6];
      } catch (s4) {
        this.client.logger.warn("Error extracting tx hashes from result", s4);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const n6 = this.client.session.keys, e3 = this.client.core.relayer.messages.getWithoutAck(n6);
      for (const [t2, s4] of Object.entries(e3))
        for (const i6 of s4)
          try {
            await this.onProviderMessageEvent({ topic: t2, message: i6, publishedAt: Date.now() });
          } catch {
            this.client.logger.warn(`Error processing pending message event for topic: ${t2}, message: ${i6}`);
          }
    } catch (n6) {
      this.client.logger.warn("processPendingMessageEvents failed", n6);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: n6 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(n6);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C3.message, (n6) => {
      this.onProviderMessageEvent(n6);
    });
  }
  async onRelayMessage(n6) {
    const { topic: e3, message: t2, attestation: s4, transportType: i6 } = n6, { publicKey: r4 } = this.client.auth.authKeys.keys.includes(ce2) ? this.client.auth.authKeys.get(ce2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const o7 = await this.client.core.crypto.decode(e3, t2, { receiverPublicKey: r4, encoding: i6 === Q3.link_mode ? ti : At });
      isJsonRpcRequest(o7) ? (this.client.core.history.set(e3, o7), await this.onRelayEventRequest({ topic: e3, payload: o7, attestation: s4, transportType: i6, encryptedId: ci(t2) })) : isJsonRpcResponse(o7) ? (await this.client.core.history.resolve(o7), await this.onRelayEventResponse({ topic: e3, payload: o7, transportType: i6 }), this.client.core.history.delete(e3, o7.id)) : await this.onRelayEventUnknownPayload({ topic: e3, payload: o7, transportType: i6 }), await this.client.core.relayer.messages.ack(e3, t2);
    } catch (o7) {
      this.client.logger.error(o7);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(F2.expired, async (n6) => {
      const { topic: e3, id: t2 } = ho2(n6.target);
      if (t2 && this.client.pendingRequest.keys.includes(t2))
        return await this.deletePendingSessionRequest(t2, te2("EXPIRED"), true);
      if (t2 && this.client.auth.requests.keys.includes(t2))
        return await this.deletePendingAuthRequest(t2, te2("EXPIRED"), true);
      e3 ? this.client.session.keys.includes(e3) && (await this.deleteSession({ topic: e3, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e3 })) : t2 && (await this.deleteProposal(t2, true), this.client.events.emit("proposal_expire", { id: t2 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(se2.create, (n6) => this.onPairingCreated(n6)), this.client.core.pairing.events.on(se2.delete, (n6) => {
      this.addToRecentlyDeleted(n6.topic, "pairing");
    });
  }
  isValidPairingTopic(n6) {
    if (!q(n6, false)) {
      const { message: e3 } = te2("MISSING_OR_INVALID", `pairing topic should be a string: ${n6}`);
      throw new Error(e3);
    }
    if (!this.client.core.pairing.pairings.keys.includes(n6)) {
      const { message: e3 } = te2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${n6}`);
      throw new Error(e3);
    }
    if (go2(this.client.core.pairing.pairings.get(n6).expiry)) {
      const { message: e3 } = te2("EXPIRED", `pairing topic: ${n6}`);
      throw new Error(e3);
    }
  }
  async isValidSessionTopic(n6) {
    if (!q(n6, false)) {
      const { message: e3 } = te2("MISSING_OR_INVALID", `session topic should be a string: ${n6}`);
      throw new Error(e3);
    }
    if (this.checkRecentlyDeleted(n6), !this.client.session.keys.includes(n6)) {
      const { message: e3 } = te2("NO_MATCHING_KEY", `session topic doesn't exist: ${n6}`);
      throw new Error(e3);
    }
    if (go2(this.client.session.get(n6).expiry)) {
      await this.deleteSession({ topic: n6 });
      const { message: e3 } = te2("EXPIRED", `session topic: ${n6}`);
      throw new Error(e3);
    }
    if (!this.client.core.crypto.keychain.has(n6)) {
      const { message: e3 } = te2("MISSING_OR_INVALID", `session topic does not exist in keychain: ${n6}`);
      throw await this.deleteSession({ topic: n6 }), new Error(e3);
    }
  }
  async isValidSessionOrPairingTopic(n6) {
    if (this.checkRecentlyDeleted(n6), this.client.session.keys.includes(n6))
      await this.isValidSessionTopic(n6);
    else if (this.client.core.pairing.pairings.keys.includes(n6))
      this.isValidPairingTopic(n6);
    else if (q(n6, false)) {
      const { message: e3 } = te2("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${n6}`);
      throw new Error(e3);
    } else {
      const { message: e3 } = te2("MISSING_OR_INVALID", `session or pairing topic should be a string: ${n6}`);
      throw new Error(e3);
    }
  }
  async isValidProposalId(n6) {
    if (!Mi(n6)) {
      const { message: e3 } = te2("MISSING_OR_INVALID", `proposal id should be a number: ${n6}`);
      throw new Error(e3);
    }
    if (!this.client.proposal.keys.includes(n6)) {
      const { message: e3 } = te2("NO_MATCHING_KEY", `proposal id doesn't exist: ${n6}`);
      throw new Error(e3);
    }
    if (go2(this.client.proposal.get(n6).expiryTimestamp)) {
      await this.deleteProposal(n6);
      const { message: e3 } = te2("EXPIRED", `proposal id: ${n6}`);
      throw new Error(e3);
    }
  }
};
var Ns2 = class extends zi2 {
  constructor(n6, e3) {
    super(n6, e3, pt2, we3), this.core = n6, this.logger = e3;
  }
};
var St4 = class extends zi2 {
  constructor(n6, e3) {
    super(n6, e3, ht3, we3), this.core = n6, this.logger = e3;
  }
};
var Os2 = class extends zi2 {
  constructor(n6, e3) {
    super(n6, e3, ut3, we3, (t2) => t2.id), this.core = n6, this.logger = e3;
  }
};
var bs2 = class extends zi2 {
  constructor(n6, e3) {
    super(n6, e3, mt2, ae2, () => ce2), this.core = n6, this.logger = e3;
  }
};
var As2 = class extends zi2 {
  constructor(n6, e3) {
    super(n6, e3, _t3, ae2), this.core = n6, this.logger = e3;
  }
};
var xs2 = class extends zi2 {
  constructor(n6, e3) {
    super(n6, e3, Et4, ae2, (t2) => t2.id), this.core = n6, this.logger = e3;
  }
};
var Cs2 = Object.defineProperty;
var Vs3 = (S5, n6, e3) => n6 in S5 ? Cs2(S5, n6, { enumerable: true, configurable: true, writable: true, value: e3 }) : S5[n6] = e3;
var Ge4 = (S5, n6, e3) => Vs3(S5, typeof n6 != "symbol" ? n6 + "" : n6, e3);
var Ds2 = class {
  constructor(n6, e3) {
    this.core = n6, this.logger = e3, Ge4(this, "authKeys"), Ge4(this, "pairingTopics"), Ge4(this, "requests"), this.authKeys = new bs2(this.core, this.logger), this.pairingTopics = new As2(this.core, this.logger), this.requests = new xs2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var Ls2 = Object.defineProperty;
var ks2 = (S5, n6, e3) => n6 in S5 ? Ls2(S5, n6, { enumerable: true, configurable: true, writable: true, value: e3 }) : S5[n6] = e3;
var E4 = (S5, n6, e3) => ks2(S5, typeof n6 != "symbol" ? n6 + "" : n6, e3);
var Ee4 = class _Ee extends J {
  constructor(n6) {
    super(n6), E4(this, "protocol", De3), E4(this, "version", Le3), E4(this, "name", me3.name), E4(this, "metadata"), E4(this, "core"), E4(this, "logger"), E4(this, "events", new import_events8.EventEmitter()), E4(this, "engine"), E4(this, "session"), E4(this, "proposal"), E4(this, "pendingRequest"), E4(this, "auth"), E4(this, "signConfig"), E4(this, "on", (t2, s4) => this.events.on(t2, s4)), E4(this, "once", (t2, s4) => this.events.once(t2, s4)), E4(this, "off", (t2, s4) => this.events.off(t2, s4)), E4(this, "removeListener", (t2, s4) => this.events.removeListener(t2, s4)), E4(this, "removeAllListeners", (t2) => this.events.removeAllListeners(t2)), E4(this, "connect", async (t2) => {
      try {
        return await this.engine.connect(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "pair", async (t2) => {
      try {
        return await this.engine.pair(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "approve", async (t2) => {
      try {
        return await this.engine.approve(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "reject", async (t2) => {
      try {
        return await this.engine.reject(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "update", async (t2) => {
      try {
        return await this.engine.update(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "extend", async (t2) => {
      try {
        return await this.engine.extend(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "request", async (t2) => {
      try {
        return await this.engine.request(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "respond", async (t2) => {
      try {
        return await this.engine.respond(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "ping", async (t2) => {
      try {
        return await this.engine.ping(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "emit", async (t2) => {
      try {
        return await this.engine.emit(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "disconnect", async (t2) => {
      try {
        return await this.engine.disconnect(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "find", (t2) => {
      try {
        return this.engine.find(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t2) {
        throw this.logger.error(t2.message), t2;
      }
    }), E4(this, "authenticate", async (t2, s4) => {
      try {
        return await this.engine.authenticate(t2, s4);
      } catch (i6) {
        throw this.logger.error(i6.message), i6;
      }
    }), E4(this, "formatAuthMessage", (t2) => {
      try {
        return this.engine.formatAuthMessage(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "approveSessionAuthenticate", async (t2) => {
      try {
        return await this.engine.approveSessionAuthenticate(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "rejectSessionAuthenticate", async (t2) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), this.name = (n6 == null ? void 0 : n6.name) || me3.name, this.metadata = (n6 == null ? void 0 : n6.metadata) || Xr2(), this.signConfig = n6 == null ? void 0 : n6.signConfig;
    const e3 = typeof (n6 == null ? void 0 : n6.logger) < "u" && typeof (n6 == null ? void 0 : n6.logger) != "string" ? n6.logger : (0, import_pino2.default)(k2({ level: (n6 == null ? void 0 : n6.logger) || me3.logger }));
    this.core = (n6 == null ? void 0 : n6.core) || new Jo3(n6), this.logger = E2(e3, this.name), this.session = new St4(this.core, this.logger), this.proposal = new Ns2(this.core, this.logger), this.pendingRequest = new Os2(this.core, this.logger), this.engine = new Ps2(this), this.auth = new Ds2(this.core, this.logger);
  }
  static async init(n6) {
    const e3 = new _Ee(n6);
    return await e3.initialize(), e3;
  }
  get context() {
    return y3(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time5.toMiliseconds)(import_time5.ONE_SECOND));
    } catch (n6) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(n6.message), n6;
    }
  }
};

// ../../node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events9 = __toESM(require_events());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var P5 = Object.defineProperty;
var w5 = Object.defineProperties;
var E5 = Object.getOwnPropertyDescriptors;
var c7 = Object.getOwnPropertySymbols;
var L3 = Object.prototype.hasOwnProperty;
var O5 = Object.prototype.propertyIsEnumerable;
var l7 = (r4, t2, e3) => t2 in r4 ? P5(r4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : r4[t2] = e3;
var p5 = (r4, t2) => {
  for (var e3 in t2 || (t2 = {}))
    L3.call(t2, e3) && l7(r4, e3, t2[e3]);
  if (c7)
    for (var e3 of c7(t2))
      O5.call(t2, e3) && l7(r4, e3, t2[e3]);
  return r4;
};
var v6 = (r4, t2) => w5(r4, E5(t2));
var j3 = { Accept: "application/json", "Content-Type": "application/json" };
var T3 = "POST";
var d4 = { headers: j3, method: T3 };
var g3 = 10;
var f8 = class {
  constructor(t2, e3 = false) {
    if (this.url = t2, this.disableProviderPing = e3, this.events = new import_events9.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t2))
      throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    this.url = t2, this.disableProviderPing = e3;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async open(t2 = this.url) {
    await this.register(t2);
  }
  async close() {
    if (!this.isAvailable)
      throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t2) {
    this.isAvailable || await this.register();
    try {
      const e3 = safeJsonStringify(t2), s4 = await (await (0, import_cross_fetch.default)(this.url, v6(p5({}, d4), { body: e3 }))).json();
      this.onPayload({ data: s4 });
    } catch (e3) {
      this.onError(t2.id, e3);
    }
  }
  async register(t2 = this.url) {
    if (!isHttpUrl(t2))
      throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    if (this.registering) {
      const e3 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e3 || this.events.listenerCount("open") >= e3) && this.events.setMaxListeners(e3 + 1), new Promise((s4, i6) => {
        this.events.once("register_error", (n6) => {
          this.resetMaxListeners(), i6(n6);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u")
            return i6(new Error("HTTP connection is missing or invalid"));
          s4();
        });
      });
    }
    this.url = t2, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e3 = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch.default)(t2, v6(p5({}, d4), { body: e3 }));
      }
      this.onOpen();
    } catch (e3) {
      const s4 = this.parseError(e3);
      throw this.events.emit("register_error", s4), this.onClose(), s4;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t2) {
    if (typeof t2.data > "u")
      return;
    const e3 = typeof t2.data == "string" ? safeJsonParse(t2.data) : t2.data;
    this.events.emit("payload", e3);
  }
  onError(t2, e3) {
    const s4 = this.parseError(e3), i6 = s4.message || s4.toString(), n6 = formatJsonRpcError(t2, i6);
    this.events.emit("payload", n6);
  }
  parseError(t2, e3 = this.url) {
    return parseConnectionError(t2, e3, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g3 && this.events.setMaxListeners(g3);
  }
};

// ../../node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events10 = __toESM(require_events());
var tt3 = "error";
var Nt4 = "wss://relay.walletconnect.org";
var St5 = "wc";
var Dt2 = "universal_provider";
var _3 = `${St5}@2:${Dt2}:`;
var et2 = "https://rpc.walletconnect.org/v1/";
var w6 = "generic";
var qt3 = `${et2}bundler`;
var d5 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function jt4() {
}
function B3(s4) {
  return s4 == null || typeof s4 != "object" && typeof s4 != "function";
}
function G3(s4) {
  return ArrayBuffer.isView(s4) && !(s4 instanceof DataView);
}
function Rt4(s4) {
  if (B3(s4))
    return s4;
  if (Array.isArray(s4) || G3(s4) || s4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s4 instanceof SharedArrayBuffer)
    return s4.slice(0);
  const t2 = Object.getPrototypeOf(s4), e3 = t2.constructor;
  if (s4 instanceof Date || s4 instanceof Map || s4 instanceof Set)
    return new e3(s4);
  if (s4 instanceof RegExp) {
    const i6 = new e3(s4);
    return i6.lastIndex = s4.lastIndex, i6;
  }
  if (s4 instanceof DataView)
    return new e3(s4.buffer.slice(0));
  if (s4 instanceof Error) {
    const i6 = new e3(s4.message);
    return i6.stack = s4.stack, i6.name = s4.name, i6.cause = s4.cause, i6;
  }
  if (typeof File < "u" && s4 instanceof File)
    return new e3([s4], s4.name, { type: s4.type, lastModified: s4.lastModified });
  if (typeof s4 == "object") {
    const i6 = Object.create(t2);
    return Object.assign(i6, s4);
  }
  return s4;
}
function st2(s4) {
  return typeof s4 == "object" && s4 !== null;
}
function it4(s4) {
  return Object.getOwnPropertySymbols(s4).filter((t2) => Object.prototype.propertyIsEnumerable.call(s4, t2));
}
function rt3(s4) {
  return s4 == null ? s4 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(s4);
}
var _t4 = "[object RegExp]";
var nt2 = "[object String]";
var at2 = "[object Number]";
var ct3 = "[object Boolean]";
var ot2 = "[object Arguments]";
var Ut4 = "[object Symbol]";
var Ft4 = "[object Date]";
var Lt4 = "[object Map]";
var xt4 = "[object Set]";
var Mt3 = "[object Array]";
var Bt4 = "[object ArrayBuffer]";
var Gt4 = "[object Object]";
var Jt4 = "[object DataView]";
var zt4 = "[object Uint8Array]";
var kt5 = "[object Uint8ClampedArray]";
var Wt4 = "[object Uint16Array]";
var Kt3 = "[object Uint32Array]";
var Vt3 = "[object Int8Array]";
var Xt3 = "[object Int16Array]";
var Yt4 = "[object Int32Array]";
var Qt3 = "[object Float32Array]";
var Zt3 = "[object Float64Array]";
function Tt4(s4, t2) {
  return y6(s4, void 0, s4, /* @__PURE__ */ new Map(), t2);
}
function y6(s4, t2, e3, i6 = /* @__PURE__ */ new Map(), r4 = void 0) {
  const a4 = r4 == null ? void 0 : r4(s4, t2, e3, i6);
  if (a4 != null)
    return a4;
  if (B3(s4))
    return s4;
  if (i6.has(s4))
    return i6.get(s4);
  if (Array.isArray(s4)) {
    const n6 = new Array(s4.length);
    i6.set(s4, n6);
    for (let c8 = 0; c8 < s4.length; c8++)
      n6[c8] = y6(s4[c8], c8, e3, i6, r4);
    return Object.hasOwn(s4, "index") && (n6.index = s4.index), Object.hasOwn(s4, "input") && (n6.input = s4.input), n6;
  }
  if (s4 instanceof Date)
    return new Date(s4.getTime());
  if (s4 instanceof RegExp) {
    const n6 = new RegExp(s4.source, s4.flags);
    return n6.lastIndex = s4.lastIndex, n6;
  }
  if (s4 instanceof Map) {
    const n6 = /* @__PURE__ */ new Map();
    i6.set(s4, n6);
    for (const [c8, h6] of s4)
      n6.set(c8, y6(h6, c8, e3, i6, r4));
    return n6;
  }
  if (s4 instanceof Set) {
    const n6 = /* @__PURE__ */ new Set();
    i6.set(s4, n6);
    for (const c8 of s4)
      n6.add(y6(c8, void 0, e3, i6, r4));
    return n6;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(s4))
    return s4.subarray();
  if (G3(s4)) {
    const n6 = new (Object.getPrototypeOf(s4)).constructor(s4.length);
    i6.set(s4, n6);
    for (let c8 = 0; c8 < s4.length; c8++)
      n6[c8] = y6(s4[c8], c8, e3, i6, r4);
    return n6;
  }
  if (s4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s4 instanceof SharedArrayBuffer)
    return s4.slice(0);
  if (s4 instanceof DataView) {
    const n6 = new DataView(s4.buffer.slice(0), s4.byteOffset, s4.byteLength);
    return i6.set(s4, n6), g4(n6, s4, e3, i6, r4), n6;
  }
  if (typeof File < "u" && s4 instanceof File) {
    const n6 = new File([s4], s4.name, { type: s4.type });
    return i6.set(s4, n6), g4(n6, s4, e3, i6, r4), n6;
  }
  if (s4 instanceof Blob) {
    const n6 = new Blob([s4], { type: s4.type });
    return i6.set(s4, n6), g4(n6, s4, e3, i6, r4), n6;
  }
  if (s4 instanceof Error) {
    const n6 = new s4.constructor();
    return i6.set(s4, n6), n6.message = s4.message, n6.name = s4.name, n6.stack = s4.stack, n6.cause = s4.cause, g4(n6, s4, e3, i6, r4), n6;
  }
  if (typeof s4 == "object" && te4(s4)) {
    const n6 = Object.create(Object.getPrototypeOf(s4));
    return i6.set(s4, n6), g4(n6, s4, e3, i6, r4), n6;
  }
  return s4;
}
function g4(s4, t2, e3 = s4, i6, r4) {
  const a4 = [...Object.keys(t2), ...it4(t2)];
  for (let n6 = 0; n6 < a4.length; n6++) {
    const c8 = a4[n6], h6 = Object.getOwnPropertyDescriptor(s4, c8);
    (h6 == null || h6.writable) && (s4[c8] = y6(t2[c8], c8, e3, i6, r4));
  }
}
function te4(s4) {
  switch (rt3(s4)) {
    case ot2:
    case Mt3:
    case Bt4:
    case Jt4:
    case ct3:
    case Ft4:
    case Qt3:
    case Zt3:
    case Vt3:
    case Xt3:
    case Yt4:
    case Lt4:
    case at2:
    case Gt4:
    case _t4:
    case xt4:
    case nt2:
    case Ut4:
    case zt4:
    case kt5:
    case Wt4:
    case Kt3:
      return true;
    default:
      return false;
  }
}
function ee3(s4, t2) {
  return Tt4(s4, (e3, i6, r4, a4) => {
    const n6 = t2 == null ? void 0 : t2(e3, i6, r4, a4);
    if (n6 != null)
      return n6;
    if (typeof s4 == "object")
      switch (Object.prototype.toString.call(s4)) {
        case at2:
        case nt2:
        case ct3: {
          const c8 = new s4.constructor(s4 == null ? void 0 : s4.valueOf());
          return g4(c8, s4), c8;
        }
        case ot2: {
          const c8 = {};
          return g4(c8, s4), c8.length = s4.length, c8[Symbol.iterator] = s4[Symbol.iterator], c8;
        }
        default:
          return;
      }
  });
}
function ht4(s4) {
  return ee3(s4);
}
function pt3(s4) {
  return s4 !== null && typeof s4 == "object" && rt3(s4) === "[object Arguments]";
}
function se3(s4) {
  return G3(s4);
}
function ie3(s4) {
  var _a;
  if (typeof s4 != "object" || s4 == null)
    return false;
  if (Object.getPrototypeOf(s4) === null)
    return true;
  if (Object.prototype.toString.call(s4) !== "[object Object]") {
    const e3 = s4[Symbol.toStringTag];
    return e3 == null || !((_a = Object.getOwnPropertyDescriptor(s4, Symbol.toStringTag)) == null ? void 0 : _a.writable) ? false : s4.toString() === `[object ${e3}]`;
  }
  let t2 = s4;
  for (; Object.getPrototypeOf(t2) !== null; )
    t2 = Object.getPrototypeOf(t2);
  return Object.getPrototypeOf(s4) === t2;
}
function re3(s4, ...t2) {
  const e3 = t2.slice(0, -1), i6 = t2[t2.length - 1];
  let r4 = s4;
  for (let a4 = 0; a4 < e3.length; a4++) {
    const n6 = e3[a4];
    r4 = U2(r4, n6, i6, /* @__PURE__ */ new Map());
  }
  return r4;
}
function U2(s4, t2, e3, i6) {
  if (B3(s4) && (s4 = Object(s4)), t2 == null || typeof t2 != "object")
    return s4;
  if (i6.has(t2))
    return Rt4(i6.get(t2));
  if (i6.set(t2, s4), Array.isArray(t2)) {
    t2 = t2.slice();
    for (let a4 = 0; a4 < t2.length; a4++)
      t2[a4] = t2[a4] ?? void 0;
  }
  const r4 = [...Object.keys(t2), ...it4(t2)];
  for (let a4 = 0; a4 < r4.length; a4++) {
    const n6 = r4[a4];
    let c8 = t2[n6], h6 = s4[n6];
    if (pt3(c8) && (c8 = { ...c8 }), pt3(h6) && (h6 = { ...h6 }), typeof Buffer < "u" && Buffer.isBuffer(c8) && (c8 = ht4(c8)), Array.isArray(c8))
      if (typeof h6 == "object" && h6 != null) {
        const j4 = [], R3 = Reflect.ownKeys(h6);
        for (let f9 = 0; f9 < R3.length; f9++) {
          const X = R3[f9];
          j4[X] = h6[X];
        }
        h6 = j4;
      } else
        h6 = [];
    const v7 = e3(h6, c8, n6, s4, t2, i6);
    v7 != null ? s4[n6] = v7 : Array.isArray(c8) || st2(h6) && st2(c8) ? s4[n6] = U2(h6, c8, e3, i6) : h6 == null && ie3(c8) ? s4[n6] = U2({}, c8, e3, i6) : h6 == null && se3(c8) ? s4[n6] = ht4(c8) : (h6 === void 0 || c8 !== void 0) && (s4[n6] = c8);
  }
  return s4;
}
function ne2(s4, ...t2) {
  return re3(s4, ...t2, jt4);
}
var ae3 = Object.defineProperty;
var ce3 = Object.defineProperties;
var oe2 = Object.getOwnPropertyDescriptors;
var dt4 = Object.getOwnPropertySymbols;
var he3 = Object.prototype.hasOwnProperty;
var pe3 = Object.prototype.propertyIsEnumerable;
var ut4 = (s4, t2, e3) => t2 in s4 ? ae3(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var F3 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {}))
    he3.call(t2, e3) && ut4(s4, e3, t2[e3]);
  if (dt4)
    for (var e3 of dt4(t2))
      pe3.call(t2, e3) && ut4(s4, e3, t2[e3]);
  return s4;
};
var de4 = (s4, t2) => ce3(s4, oe2(t2));
function p6(s4, t2, e3) {
  var i6;
  const r4 = Ye2(s4);
  return ((i6 = t2.rpcMap) == null ? void 0 : i6[r4.reference]) || `${et2}?chainId=${r4.namespace}:${r4.reference}&projectId=${e3}`;
}
function P6(s4) {
  return s4.includes(":") ? s4.split(":")[1] : s4;
}
function lt3(s4) {
  return s4.map((t2) => `${t2.split(":")[0]}:${t2.split(":")[1]}`);
}
function ue3(s4, t2) {
  const e3 = Object.keys(t2.namespaces).filter((r4) => r4.includes(s4));
  if (!e3.length)
    return [];
  const i6 = [];
  return e3.forEach((r4) => {
    const a4 = t2.namespaces[r4].accounts;
    i6.push(...a4);
  }), i6;
}
function J5(s4 = {}, t2 = {}) {
  const e3 = ft4(s4), i6 = ft4(t2);
  return ne2(e3, i6);
}
function ft4(s4) {
  var t2, e3, i6, r4;
  const a4 = {};
  if (!qe2(s4))
    return a4;
  for (const [n6, c8] of Object.entries(s4)) {
    const h6 = Tt2(n6) ? [n6] : c8.chains, v7 = c8.methods || [], j4 = c8.events || [], R3 = c8.rpcMap || {}, f9 = pr2(n6);
    a4[f9] = de4(F3(F3({}, a4[f9]), c8), { chains: Q2(h6, (t2 = a4[f9]) == null ? void 0 : t2.chains), methods: Q2(v7, (e3 = a4[f9]) == null ? void 0 : e3.methods), events: Q2(j4, (i6 = a4[f9]) == null ? void 0 : i6.events), rpcMap: F3(F3({}, R3), (r4 = a4[f9]) == null ? void 0 : r4.rpcMap) });
  }
  return a4;
}
function le4(s4) {
  return s4.includes(":") ? s4.split(":")[2] : s4;
}
function mt3(s4) {
  const t2 = {};
  for (const [e3, i6] of Object.entries(s4)) {
    const r4 = i6.methods || [], a4 = i6.events || [], n6 = i6.accounts || [], c8 = Tt2(e3) ? [e3] : i6.chains ? i6.chains : lt3(i6.accounts);
    t2[e3] = { chains: c8, methods: r4, events: a4, accounts: n6 };
  }
  return t2;
}
function z5(s4) {
  return typeof s4 == "number" ? s4 : s4.includes("0x") ? parseInt(s4, 16) : (s4 = s4.includes(":") ? s4.split(":")[1] : s4, isNaN(Number(s4)) ? s4 : Number(s4));
}
var vt3 = {};
var o6 = (s4) => vt3[s4];
var k6 = (s4, t2) => {
  vt3[s4] = t2;
};
var fe4 = Object.defineProperty;
var me4 = (s4, t2, e3) => t2 in s4 ? fe4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var b5 = (s4, t2, e3) => me4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var ve3 = class {
  constructor(t2) {
    b5(this, "name", "polkadot"), b5(this, "client"), b5(this, "httpProviders"), b5(this, "events"), b5(this, "namespace"), b5(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const r4 = P6(e3);
      t2[r4] = this.createHttpProvider(r4, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var ge3 = Object.defineProperty;
var Pe4 = Object.defineProperties;
var we4 = Object.getOwnPropertyDescriptors;
var gt4 = Object.getOwnPropertySymbols;
var ye3 = Object.prototype.hasOwnProperty;
var be4 = Object.prototype.propertyIsEnumerable;
var W3 = (s4, t2, e3) => t2 in s4 ? ge3(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var Pt4 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {}))
    ye3.call(t2, e3) && W3(s4, e3, t2[e3]);
  if (gt4)
    for (var e3 of gt4(t2))
      be4.call(t2, e3) && W3(s4, e3, t2[e3]);
  return s4;
};
var wt4 = (s4, t2) => Pe4(s4, we4(t2));
var I3 = (s4, t2, e3) => W3(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ie4 = class {
  constructor(t2) {
    I3(this, "name", "eip155"), I3(this, "client"), I3(this, "chainId"), I3(this, "namespace"), I3(this, "httpProviders"), I3(this, "events"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t2) {
    switch (t2.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t2);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t2);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t2);
    }
    return this.namespace.methods.includes(t2.request.method) ? await this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(parseInt(t2), e3), this.chainId = parseInt(t2), this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId.toString();
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const r4 = parseInt(P6(e3));
      t2[r4] = this.createHttpProvider(r4, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t2 = this.chainId, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  async handleSwitchChain(t2) {
    var e3, i6;
    let r4 = t2.request.params ? (e3 = t2.request.params[0]) == null ? void 0 : e3.chainId : "0x0";
    r4 = r4.startsWith("0x") ? r4 : `0x${r4}`;
    const a4 = parseInt(r4, 16);
    if (this.isChainApproved(a4))
      this.setDefaultChain(`${a4}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain"))
      await this.client.request({ topic: t2.topic, request: { method: t2.request.method, params: [{ chainId: r4 }] }, chainId: (i6 = this.namespace.chains) == null ? void 0 : i6[0] }), this.setDefaultChain(`${a4}`);
    else
      throw new Error(`Failed to switch to chain 'eip155:${a4}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t2) {
    return this.namespace.chains.includes(`${this.name}:${t2}`);
  }
  async getCapabilities(t2) {
    var e3, i6, r4;
    const a4 = (i6 = (e3 = t2.request) == null ? void 0 : e3.params) == null ? void 0 : i6[0];
    if (!a4)
      throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const n6 = this.client.session.get(t2.topic), c8 = ((r4 = n6 == null ? void 0 : n6.sessionProperties) == null ? void 0 : r4.capabilities) || {};
    if (c8 != null && c8[a4])
      return c8 == null ? void 0 : c8[a4];
    const h6 = await this.client.request(t2);
    try {
      await this.client.session.update(t2.topic, { sessionProperties: wt4(Pt4({}, n6.sessionProperties || {}), { capabilities: wt4(Pt4({}, c8 || {}), { [a4]: h6 }) }) });
    } catch (v7) {
      console.warn("Failed to update session with capabilities", v7);
    }
    return h6;
  }
  async getCallStatus(t2) {
    var e3, i6;
    const r4 = this.client.session.get(t2.topic), a4 = (e3 = r4.sessionProperties) == null ? void 0 : e3.bundler_name;
    if (a4) {
      const c8 = this.getBundlerUrl(t2.chainId, a4);
      try {
        return await this.getUserOperationReceipt(c8, t2);
      } catch (h6) {
        console.warn("Failed to fetch call status from bundler", h6, c8);
      }
    }
    const n6 = (i6 = r4.sessionProperties) == null ? void 0 : i6.bundler_url;
    if (n6)
      try {
        return await this.getUserOperationReceipt(n6, t2);
      } catch (c8) {
        console.warn("Failed to fetch call status from custom bundler", c8, n6);
      }
    if (this.namespace.methods.includes(t2.request.method))
      return await this.client.request(t2);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t2, e3) {
    var i6;
    const r4 = new URL(t2), a4 = await fetch(r4, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i6 = e3.request.params) == null ? void 0 : i6[0]])) });
    if (!a4.ok)
      throw new Error(`Failed to fetch user operation receipt - ${a4.status}`);
    return await a4.json();
  }
  getBundlerUrl(t2, e3) {
    return `${qt3}?projectId=${this.client.core.projectId}&chainId=${t2}&bundler=${e3}`;
  }
};
var $e4 = Object.defineProperty;
var Oe4 = (s4, t2, e3) => t2 in s4 ? $e4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var $3 = (s4, t2, e3) => Oe4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ae3 = class {
  constructor(t2) {
    $3(this, "name", "solana"), $3(this, "client"), $3(this, "httpProviders"), $3(this, "events"), $3(this, "namespace"), $3(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const r4 = P6(e3);
      t2[r4] = this.createHttpProvider(r4, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var He4 = Object.defineProperty;
var Ee5 = (s4, t2, e3) => t2 in s4 ? He4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var O6 = (s4, t2, e3) => Ee5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ce4 = class {
  constructor(t2) {
    O6(this, "name", "cosmos"), O6(this, "client"), O6(this, "httpProviders"), O6(this, "events"), O6(this, "namespace"), O6(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const r4 = P6(e3);
      t2[r4] = this.createHttpProvider(r4, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var Ne3 = Object.defineProperty;
var Se4 = (s4, t2, e3) => t2 in s4 ? Ne3(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var A3 = (s4, t2, e3) => Se4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var De4 = class {
  constructor(t2) {
    A3(this, "name", "algorand"), A3(this, "client"), A3(this, "httpProviders"), A3(this, "events"), A3(this, "namespace"), A3(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (!this.httpProviders[t2]) {
      const i6 = e3 || p6(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
      if (!i6)
        throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i6);
    }
    this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      t2[e3] = this.createHttpProvider(e3, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace, this.client.core.projectId);
    return typeof i6 > "u" ? void 0 : new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var qe4 = Object.defineProperty;
var je4 = (s4, t2, e3) => t2 in s4 ? qe4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var H3 = (s4, t2, e3) => je4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Re3 = class {
  constructor(t2) {
    H3(this, "name", "cip34"), H3(this, "client"), H3(this, "httpProviders"), H3(this, "events"), H3(this, "namespace"), H3(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      const i6 = this.getCardanoRPCUrl(e3), r4 = P6(e3);
      t2[r4] = this.createHttpProvider(r4, i6);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  getCardanoRPCUrl(t2) {
    const e3 = this.namespace.rpcMap;
    if (e3)
      return e3[t2];
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || this.getCardanoRPCUrl(t2);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var _e5 = Object.defineProperty;
var Ue5 = (s4, t2, e3) => t2 in s4 ? _e5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var E6 = (s4, t2, e3) => Ue5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Fe3 = class {
  constructor(t2) {
    E6(this, "name", "elrond"), E6(this, "client"), E6(this, "httpProviders"), E6(this, "events"), E6(this, "namespace"), E6(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const r4 = P6(e3);
      t2[r4] = this.createHttpProvider(r4, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var Le4 = Object.defineProperty;
var xe3 = (s4, t2, e3) => t2 in s4 ? Le4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var C5 = (s4, t2, e3) => xe3(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Me5 = class {
  constructor(t2) {
    C5(this, "name", "multiversx"), C5(this, "client"), C5(this, "httpProviders"), C5(this, "events"), C5(this, "namespace"), C5(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      const r4 = P6(e3);
      t2[r4] = this.createHttpProvider(r4, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var Be5 = Object.defineProperty;
var Ge5 = (s4, t2, e3) => t2 in s4 ? Be5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var N11 = (s4, t2, e3) => Ge5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Je3 = class {
  constructor(t2) {
    N11(this, "name", "near"), N11(this, "client"), N11(this, "httpProviders"), N11(this, "events"), N11(this, "namespace"), N11(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i6 = e3 || p6(`${this.name}:${t2}`, this.namespace);
      if (!i6)
        throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i6);
    }
    this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i6;
      t2[e3] = this.createHttpProvider(e3, (i6 = this.namespace.rpcMap) == null ? void 0 : i6[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace);
    return typeof i6 > "u" ? void 0 : new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var ze4 = Object.defineProperty;
var ke5 = (s4, t2, e3) => t2 in s4 ? ze4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var S4 = (s4, t2, e3) => ke5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var We5 = class {
  constructor(t2) {
    S4(this, "name", "tezos"), S4(this, "client"), S4(this, "httpProviders"), S4(this, "events"), S4(this, "namespace"), S4(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i6 = e3 || p6(`${this.name}:${t2}`, this.namespace);
      if (!i6)
        throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i6);
    }
    this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      t2[e3] = this.createHttpProvider(e3);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace);
    return typeof i6 > "u" ? void 0 : new o4(new f8(i6));
  }
};
var Ke5 = Object.defineProperty;
var Ve4 = (s4, t2, e3) => t2 in s4 ? Ke5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var D2 = (s4, t2, e3) => Ve4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Xe3 = class {
  constructor(t2) {
    D2(this, "name", w6), D2(this, "client"), D2(this, "httpProviders"), D2(this, "events"), D2(this, "namespace"), D2(this, "chainId"), this.namespace = t2.namespace, this.events = o6("events"), this.client = o6("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t2.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t2.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t2.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t2.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider(t2.chainId).request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId)
      return this.chainId;
    if (this.namespace.defaultChain)
      return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2)
      throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t2, e3;
    const i6 = {};
    return (e3 = (t2 = this.namespace) == null ? void 0 : t2.accounts) == null || e3.forEach((r4) => {
      const a4 = Ye2(r4);
      i6[`${a4.namespace}:${a4.reference}`] = this.createHttpProvider(r4);
    }), i6;
  }
  getHttpProvider(t2) {
    const e3 = this.httpProviders[t2];
    if (typeof e3 > "u")
      throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i6 = this.createHttpProvider(t2, e3);
    i6 && (this.httpProviders[t2] = i6);
  }
  createHttpProvider(t2, e3) {
    const i6 = e3 || p6(t2, this.namespace, this.client.core.projectId);
    if (!i6)
      throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o4(new f8(i6, o6("disableProviderPing")));
  }
};
var Ye4 = Object.defineProperty;
var Qe3 = Object.defineProperties;
var Ze4 = Object.getOwnPropertyDescriptors;
var yt4 = Object.getOwnPropertySymbols;
var Te4 = Object.prototype.hasOwnProperty;
var ts = Object.prototype.propertyIsEnumerable;
var K4 = (s4, t2, e3) => t2 in s4 ? Ye4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var L4 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {}))
    Te4.call(t2, e3) && K4(s4, e3, t2[e3]);
  if (yt4)
    for (var e3 of yt4(t2))
      ts.call(t2, e3) && K4(s4, e3, t2[e3]);
  return s4;
};
var V4 = (s4, t2) => Qe3(s4, Ze4(t2));
var u4 = (s4, t2, e3) => K4(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var x5 = class _x {
  constructor(t2) {
    u4(this, "client"), u4(this, "namespaces"), u4(this, "optionalNamespaces"), u4(this, "sessionProperties"), u4(this, "scopedProperties"), u4(this, "events", new import_events10.default()), u4(this, "rpcProviders", {}), u4(this, "session"), u4(this, "providerOpts"), u4(this, "logger"), u4(this, "uri"), u4(this, "disableProviderPing", false), this.providerOpts = t2, this.logger = typeof (t2 == null ? void 0 : t2.logger) < "u" && typeof (t2 == null ? void 0 : t2.logger) != "string" ? t2.logger : (0, import_pino2.default)(k2({ level: (t2 == null ? void 0 : t2.logger) || tt3 })), this.disableProviderPing = (t2 == null ? void 0 : t2.disableProviderPing) || false;
  }
  static async init(t2) {
    const e3 = new _x(t2);
    return await e3.initialize(), e3;
  }
  async request(t2, e3, i6) {
    const [r4, a4] = this.validateChain(e3);
    if (!this.session)
      throw new Error("Please call connect() before request()");
    return await this.getProvider(r4).request({ request: L4({}, t2), chainId: `${r4}:${a4}`, topic: this.session.topic, expiry: i6 });
  }
  sendAsync(t2, e3, i6, r4) {
    const a4 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t2, i6, r4).then((n6) => e3(null, formatJsonRpcResult(a4, n6))).catch((n6) => e3(n6, void 0));
  }
  async enable() {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t2;
    if (!this.session)
      throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t2 = this.session) == null ? void 0 : t2.topic, reason: de2("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t2) {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t2), await this.cleanupPendingPairings(), !t2.skipPairing)
      return await this.pair(t2.pairingTopic);
  }
  async authenticate(t2, e3) {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    this.setNamespaces(t2), await this.cleanupPendingPairings();
    const { uri: i6, response: r4 } = await this.client.authenticate(t2, e3);
    i6 && (this.uri = i6, this.events.emit("display_uri", i6));
    const a4 = await r4();
    if (this.session = a4.session, this.session) {
      const n6 = mt3(this.session.namespaces);
      this.namespaces = J5(this.namespaces, n6), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a4;
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t2) {
    const { uri: e3, approval: i6 } = await this.client.connect({ pairingTopic: t2, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e3 && (this.uri = e3, this.events.emit("display_uri", e3));
    const r4 = await i6();
    this.session = r4;
    const a4 = mt3(r4.namespaces);
    return this.namespaces = J5(this.namespaces, a4), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t2, e3) {
    try {
      if (!this.session)
        return;
      const [i6, r4] = this.validateChain(t2), a4 = this.getProvider(i6);
      a4.name === w6 ? a4.setDefaultChain(`${i6}:${r4}`, e3) : a4.setDefaultChain(r4, e3);
    } catch (i6) {
      if (!/Please call connect/.test(i6.message))
        throw i6;
    }
  }
  async cleanupPendingPairings(t2 = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e3 = this.client.pairing.getAll();
    if ($e2(e3)) {
      for (const i6 of e3)
        t2.deletePairings ? this.client.core.expirer.set(i6.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i6.topic);
      this.logger.info(`Inactive pairings cleared: ${e3.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t2, e3;
    if (this.client = this.providerOpts.client || await Ee4.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || tt3, relayUrl: this.providerOpts.relayUrl || Nt4, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session)
      try {
        this.session = this.client.session.get(this.providerOpts.session.topic);
      } catch (i6) {
        throw this.logger.error("Failed to get session", i6), new Error(`The provided session: ${(e3 = (t2 = this.providerOpts) == null ? void 0 : t2.session) == null ? void 0 : e3.topic} doesn't exist in the Sign client`);
      }
    else {
      const i6 = this.client.session.getAll();
      this.session = i6[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client)
      throw new Error("Sign Client not initialized");
    if (!this.session)
      throw new Error("Session not initialized. Please call connect() before enable()");
    const t2 = [...new Set(Object.keys(this.session.namespaces).map((e3) => pr2(e3)))];
    k6("client", this.client), k6("events", this.events), k6("disableProviderPing", this.disableProviderPing), t2.forEach((e3) => {
      if (!this.session)
        return;
      const i6 = ue3(e3, this.session), r4 = lt3(i6), a4 = J5(this.namespaces, this.optionalNamespaces), n6 = V4(L4({}, a4[e3]), { accounts: i6, chains: r4 });
      switch (e3) {
        case "eip155":
          this.rpcProviders[e3] = new Ie4({ namespace: n6 });
          break;
        case "algorand":
          this.rpcProviders[e3] = new De4({ namespace: n6 });
          break;
        case "solana":
          this.rpcProviders[e3] = new Ae3({ namespace: n6 });
          break;
        case "cosmos":
          this.rpcProviders[e3] = new Ce4({ namespace: n6 });
          break;
        case "polkadot":
          this.rpcProviders[e3] = new ve3({ namespace: n6 });
          break;
        case "cip34":
          this.rpcProviders[e3] = new Re3({ namespace: n6 });
          break;
        case "elrond":
          this.rpcProviders[e3] = new Fe3({ namespace: n6 });
          break;
        case "multiversx":
          this.rpcProviders[e3] = new Me5({ namespace: n6 });
          break;
        case "near":
          this.rpcProviders[e3] = new Je3({ namespace: n6 });
          break;
        case "tezos":
          this.rpcProviders[e3] = new We5({ namespace: n6 });
          break;
        default:
          this.rpcProviders[w6] ? this.rpcProviders[w6].updateNamespace(n6) : this.rpcProviders[w6] = new Xe3({ namespace: n6 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u")
      throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t2) => {
      var e3;
      const { topic: i6 } = t2;
      i6 === ((e3 = this.session) == null ? void 0 : e3.topic) && this.events.emit("session_ping", t2);
    }), this.client.on("session_event", (t2) => {
      var e3;
      const { params: i6, topic: r4 } = t2;
      if (r4 !== ((e3 = this.session) == null ? void 0 : e3.topic))
        return;
      const { event: a4 } = i6;
      if (a4.name === "accountsChanged") {
        const n6 = a4.data;
        n6 && $e2(n6) && this.events.emit("accountsChanged", n6.map(le4));
      } else if (a4.name === "chainChanged") {
        const n6 = i6.chainId, c8 = i6.event.data, h6 = pr2(n6), v7 = z5(n6) !== z5(c8) ? `${h6}:${z5(c8)}` : n6;
        this.onChainChanged(v7);
      } else
        this.events.emit(a4.name, a4.data);
      this.events.emit("session_event", t2);
    }), this.client.on("session_update", ({ topic: t2, params: e3 }) => {
      var i6, r4;
      if (t2 !== ((i6 = this.session) == null ? void 0 : i6.topic))
        return;
      const { namespaces: a4 } = e3, n6 = (r4 = this.client) == null ? void 0 : r4.session.get(t2);
      this.session = V4(L4({}, n6), { namespaces: a4 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t2, params: e3 });
    }), this.client.on("session_delete", async (t2) => {
      var e3;
      t2.topic === ((e3 = this.session) == null ? void 0 : e3.topic) && (await this.cleanup(), this.events.emit("session_delete", t2), this.events.emit("disconnect", V4(L4({}, de2("USER_DISCONNECTED")), { data: t2.topic })));
    }), this.on(d5.DEFAULT_CHAIN_CHANGED, (t2) => {
      this.onChainChanged(t2, true);
    });
  }
  getProvider(t2) {
    return this.rpcProviders[t2] || this.rpcProviders[w6];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t2) => {
      var e3;
      this.getProvider(t2).updateNamespace((e3 = this.session) == null ? void 0 : e3.namespaces[t2]);
    });
  }
  setNamespaces(t2) {
    const { namespaces: e3, optionalNamespaces: i6, sessionProperties: r4, scopedProperties: a4 } = t2;
    e3 && Object.keys(e3).length && (this.namespaces = e3), i6 && Object.keys(i6).length && (this.optionalNamespaces = i6), this.sessionProperties = r4, this.scopedProperties = a4;
  }
  validateChain(t2) {
    const [e3, i6] = (t2 == null ? void 0 : t2.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length)
      return [e3, i6];
    if (e3 && !Object.keys(this.namespaces || {}).map((n6) => pr2(n6)).includes(e3))
      throw new Error(`Namespace '${e3}' is not configured. Please call connect() first with namespace config.`);
    if (e3 && i6)
      return [e3, i6];
    const r4 = pr2(Object.keys(this.namespaces)[0]), a4 = this.rpcProviders[r4].getDefaultChain();
    return [r4, a4];
  }
  async requestAccounts() {
    const [t2] = this.validateChain();
    return await this.getProvider(t2).requestAccounts();
  }
  async onChainChanged(t2, e3 = false) {
    if (!this.namespaces)
      return;
    const [i6, r4] = this.validateChain(t2);
    r4 && (e3 || this.getProvider(i6).setDefaultChain(r4), this.namespaces[i6] ? this.namespaces[i6].defaultChain = r4 : this.namespaces[`${i6}:${r4}`] ? this.namespaces[`${i6}:${r4}`].defaultChain = r4 : this.namespaces[`${i6}:${r4}`] = { defaultChain: r4 }, this.events.emit("chainChanged", r4), await this.persist("namespaces", this.namespaces));
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t2, e3) {
    var i6;
    const r4 = ((i6 = this.session) == null ? void 0 : i6.topic) || "";
    await this.client.core.storage.setItem(`${_3}/${t2}${r4}`, e3);
  }
  async getFromStore(t2) {
    var e3;
    const i6 = ((e3 = this.session) == null ? void 0 : e3.topic) || "";
    return await this.client.core.storage.getItem(`${_3}/${t2}${i6}`);
  }
  async deleteFromStore(t2) {
    var e3;
    const i6 = ((e3 = this.session) == null ? void 0 : e3.topic) || "";
    await this.client.core.storage.removeItem(`${_3}/${t2}${i6}`);
  }
  async cleanupStorage() {
    var t2;
    try {
      if (((t2 = this.client) == null ? void 0 : t2.session.length) > 0)
        return;
      const e3 = await this.client.core.storage.getKeys();
      for (const i6 of e3)
        i6.startsWith(_3) && await this.client.core.storage.removeItem(i6);
    } catch (e3) {
      this.logger.warn("Failed to cleanup storage", e3);
    }
  }
};

// ../../node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js
var DEFAULT_SDK_URL = "https://secure.walletconnect.org/sdk";
var SECURE_SITE_SDK = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_URL"] : void 0) || DEFAULT_SDK_URL;
var DEFAULT_LOG_LEVEL = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_DEFAULT_LOG_LEVEL"] : void 0) || "error";
var SECURE_SITE_SDK_VERSION = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_VERSION"] : void 0) || "4";
var W3mFrameConstants = {
  APP_EVENT_KEY: "@w3m-app/",
  FRAME_EVENT_KEY: "@w3m-frame/",
  RPC_METHOD_KEY: "RPC_",
  STORAGE_KEY: "@appkit-wallet/",
  SESSION_TOKEN_KEY: "SESSION_TOKEN_KEY",
  EMAIL_LOGIN_USED_KEY: "EMAIL_LOGIN_USED_KEY",
  LAST_USED_CHAIN_KEY: "LAST_USED_CHAIN_KEY",
  LAST_EMAIL_LOGIN_TIME: "LAST_EMAIL_LOGIN_TIME",
  EMAIL: "EMAIL",
  PREFERRED_ACCOUNT_TYPE: "PREFERRED_ACCOUNT_TYPE",
  SMART_ACCOUNT_ENABLED: "SMART_ACCOUNT_ENABLED",
  SMART_ACCOUNT_ENABLED_NETWORKS: "SMART_ACCOUNT_ENABLED_NETWORKS",
  SOCIAL_USERNAME: "SOCIAL_USERNAME",
  APP_SWITCH_NETWORK: "@w3m-app/SWITCH_NETWORK",
  APP_CONNECT_EMAIL: "@w3m-app/CONNECT_EMAIL",
  APP_CONNECT_DEVICE: "@w3m-app/CONNECT_DEVICE",
  APP_CONNECT_OTP: "@w3m-app/CONNECT_OTP",
  APP_CONNECT_SOCIAL: "@w3m-app/CONNECT_SOCIAL",
  APP_GET_SOCIAL_REDIRECT_URI: "@w3m-app/GET_SOCIAL_REDIRECT_URI",
  APP_GET_USER: "@w3m-app/GET_USER",
  APP_SIGN_OUT: "@w3m-app/SIGN_OUT",
  APP_IS_CONNECTED: "@w3m-app/IS_CONNECTED",
  APP_GET_CHAIN_ID: "@w3m-app/GET_CHAIN_ID",
  APP_RPC_REQUEST: "@w3m-app/RPC_REQUEST",
  APP_UPDATE_EMAIL: "@w3m-app/UPDATE_EMAIL",
  APP_UPDATE_EMAIL_PRIMARY_OTP: "@w3m-app/UPDATE_EMAIL_PRIMARY_OTP",
  APP_UPDATE_EMAIL_SECONDARY_OTP: "@w3m-app/UPDATE_EMAIL_SECONDARY_OTP",
  APP_AWAIT_UPDATE_EMAIL: "@w3m-app/AWAIT_UPDATE_EMAIL",
  APP_SYNC_THEME: "@w3m-app/SYNC_THEME",
  APP_SYNC_DAPP_DATA: "@w3m-app/SYNC_DAPP_DATA",
  APP_GET_SMART_ACCOUNT_ENABLED_NETWORKS: "@w3m-app/GET_SMART_ACCOUNT_ENABLED_NETWORKS",
  APP_INIT_SMART_ACCOUNT: "@w3m-app/INIT_SMART_ACCOUNT",
  APP_SET_PREFERRED_ACCOUNT: "@w3m-app/SET_PREFERRED_ACCOUNT",
  APP_CONNECT_FARCASTER: "@w3m-app/CONNECT_FARCASTER",
  APP_GET_FARCASTER_URI: "@w3m-app/GET_FARCASTER_URI",
  APP_RELOAD: "@w3m-app/RELOAD",
  FRAME_SWITCH_NETWORK_ERROR: "@w3m-frame/SWITCH_NETWORK_ERROR",
  FRAME_SWITCH_NETWORK_SUCCESS: "@w3m-frame/SWITCH_NETWORK_SUCCESS",
  FRAME_CONNECT_EMAIL_ERROR: "@w3m-frame/CONNECT_EMAIL_ERROR",
  FRAME_CONNECT_EMAIL_SUCCESS: "@w3m-frame/CONNECT_EMAIL_SUCCESS",
  FRAME_CONNECT_DEVICE_ERROR: "@w3m-frame/CONNECT_DEVICE_ERROR",
  FRAME_CONNECT_DEVICE_SUCCESS: "@w3m-frame/CONNECT_DEVICE_SUCCESS",
  FRAME_CONNECT_OTP_SUCCESS: "@w3m-frame/CONNECT_OTP_SUCCESS",
  FRAME_CONNECT_OTP_ERROR: "@w3m-frame/CONNECT_OTP_ERROR",
  FRAME_CONNECT_SOCIAL_SUCCESS: "@w3m-frame/CONNECT_SOCIAL_SUCCESS",
  FRAME_CONNECT_SOCIAL_ERROR: "@w3m-frame/CONNECT_SOCIAL_ERROR",
  FRAME_CONNECT_FARCASTER_SUCCESS: "@w3m-frame/CONNECT_FARCASTER_SUCCESS",
  FRAME_CONNECT_FARCASTER_ERROR: "@w3m-frame/CONNECT_FARCASTER_ERROR",
  FRAME_GET_FARCASTER_URI_SUCCESS: "@w3m-frame/GET_FARCASTER_URI_SUCCESS",
  FRAME_GET_FARCASTER_URI_ERROR: "@w3m-frame/GET_FARCASTER_URI_ERROR",
  FRAME_GET_SOCIAL_REDIRECT_URI_SUCCESS: "@w3m-frame/GET_SOCIAL_REDIRECT_URI_SUCCESS",
  FRAME_GET_SOCIAL_REDIRECT_URI_ERROR: "@w3m-frame/GET_SOCIAL_REDIRECT_URI_ERROR",
  FRAME_GET_USER_SUCCESS: "@w3m-frame/GET_USER_SUCCESS",
  FRAME_GET_USER_ERROR: "@w3m-frame/GET_USER_ERROR",
  FRAME_SIGN_OUT_SUCCESS: "@w3m-frame/SIGN_OUT_SUCCESS",
  FRAME_SIGN_OUT_ERROR: "@w3m-frame/SIGN_OUT_ERROR",
  FRAME_IS_CONNECTED_SUCCESS: "@w3m-frame/IS_CONNECTED_SUCCESS",
  FRAME_IS_CONNECTED_ERROR: "@w3m-frame/IS_CONNECTED_ERROR",
  FRAME_GET_CHAIN_ID_SUCCESS: "@w3m-frame/GET_CHAIN_ID_SUCCESS",
  FRAME_GET_CHAIN_ID_ERROR: "@w3m-frame/GET_CHAIN_ID_ERROR",
  FRAME_RPC_REQUEST_SUCCESS: "@w3m-frame/RPC_REQUEST_SUCCESS",
  FRAME_RPC_REQUEST_ERROR: "@w3m-frame/RPC_REQUEST_ERROR",
  FRAME_SESSION_UPDATE: "@w3m-frame/SESSION_UPDATE",
  FRAME_UPDATE_EMAIL_SUCCESS: "@w3m-frame/UPDATE_EMAIL_SUCCESS",
  FRAME_UPDATE_EMAIL_ERROR: "@w3m-frame/UPDATE_EMAIL_ERROR",
  FRAME_UPDATE_EMAIL_PRIMARY_OTP_SUCCESS: "@w3m-frame/UPDATE_EMAIL_PRIMARY_OTP_SUCCESS",
  FRAME_UPDATE_EMAIL_PRIMARY_OTP_ERROR: "@w3m-frame/UPDATE_EMAIL_PRIMARY_OTP_ERROR",
  FRAME_UPDATE_EMAIL_SECONDARY_OTP_SUCCESS: "@w3m-frame/UPDATE_EMAIL_SECONDARY_OTP_SUCCESS",
  FRAME_UPDATE_EMAIL_SECONDARY_OTP_ERROR: "@w3m-frame/UPDATE_EMAIL_SECONDARY_OTP_ERROR",
  FRAME_SYNC_THEME_SUCCESS: "@w3m-frame/SYNC_THEME_SUCCESS",
  FRAME_SYNC_THEME_ERROR: "@w3m-frame/SYNC_THEME_ERROR",
  FRAME_SYNC_DAPP_DATA_SUCCESS: "@w3m-frame/SYNC_DAPP_DATA_SUCCESS",
  FRAME_SYNC_DAPP_DATA_ERROR: "@w3m-frame/SYNC_DAPP_DATA_ERROR",
  FRAME_GET_SMART_ACCOUNT_ENABLED_NETWORKS_SUCCESS: "@w3m-frame/GET_SMART_ACCOUNT_ENABLED_NETWORKS_SUCCESS",
  FRAME_GET_SMART_ACCOUNT_ENABLED_NETWORKS_ERROR: "@w3m-frame/GET_SMART_ACCOUNT_ENABLED_NETWORKS_ERROR",
  FRAME_INIT_SMART_ACCOUNT_SUCCESS: "@w3m-frame/INIT_SMART_ACCOUNT_SUCCESS",
  FRAME_INIT_SMART_ACCOUNT_ERROR: "@w3m-frame/INIT_SMART_ACCOUNT_ERROR",
  FRAME_SET_PREFERRED_ACCOUNT_SUCCESS: "@w3m-frame/SET_PREFERRED_ACCOUNT_SUCCESS",
  FRAME_SET_PREFERRED_ACCOUNT_ERROR: "@w3m-frame/SET_PREFERRED_ACCOUNT_ERROR",
  FRAME_READY: "@w3m-frame/READY",
  FRAME_RELOAD_SUCCESS: "@w3m-frame/RELOAD_SUCCESS",
  FRAME_RELOAD_ERROR: "@w3m-frame/RELOAD_ERROR",
  RPC_RESPONSE_TYPE_ERROR: "RPC_RESPONSE_ERROR",
  RPC_RESPONSE_TYPE_TX: "RPC_RESPONSE_TRANSACTION_HASH",
  RPC_RESPONSE_TYPE_OBJECT: "RPC_RESPONSE_OBJECT"
};
var W3mFrameRpcConstants = {
  SAFE_RPC_METHODS: [
    "eth_accounts",
    "eth_blockNumber",
    "eth_call",
    "eth_chainId",
    "eth_estimateGas",
    "eth_feeHistory",
    "eth_gasPrice",
    "eth_getAccount",
    "eth_getBalance",
    "eth_getBlockByHash",
    "eth_getBlockByNumber",
    "eth_getBlockReceipts",
    "eth_getBlockTransactionCountByHash",
    "eth_getBlockTransactionCountByNumber",
    "eth_getCode",
    "eth_getFilterChanges",
    "eth_getFilterLogs",
    "eth_getLogs",
    "eth_getProof",
    "eth_getStorageAt",
    "eth_getTransactionByBlockHashAndIndex",
    "eth_getTransactionByBlockNumberAndIndex",
    "eth_getTransactionByHash",
    "eth_getTransactionCount",
    "eth_getTransactionReceipt",
    "eth_getUncleCountByBlockHash",
    "eth_getUncleCountByBlockNumber",
    "eth_maxPriorityFeePerGas",
    "eth_newBlockFilter",
    "eth_newFilter",
    "eth_newPendingTransactionFilter",
    "eth_sendRawTransaction",
    "eth_syncing",
    "eth_uninstallFilter",
    "wallet_getCapabilities",
    "wallet_getCallsStatus",
    "eth_getUserOperationReceipt",
    "eth_estimateUserOperationGas",
    "eth_getUserOperationByHash",
    "eth_supportedEntryPoints",
    "wallet_getAssets"
  ],
  NOT_SAFE_RPC_METHODS: [
    "personal_sign",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "solana_signMessage",
    "solana_signTransaction",
    "solana_signAllTransactions",
    "solana_signAndSendTransaction",
    "wallet_sendCalls",
    "wallet_grantPermissions",
    "wallet_revokePermissions",
    "eth_sendUserOperation"
  ],
  GET_CHAIN_ID: "eth_chainId",
  RPC_METHOD_NOT_ALLOWED_MESSAGE: "Requested RPC call is not allowed",
  RPC_METHOD_NOT_ALLOWED_UI_MESSAGE: "Action not allowed",
  ACCOUNT_TYPES: {
    EOA: "eoa",
    SMART_ACCOUNT: "smartAccount"
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js
var DEFAULT_STATE = Object.freeze({
  message: "",
  variant: "success",
  svg: void 0,
  open: false,
  autoClose: true
});
var state7 = proxy({
  ...DEFAULT_STATE
});
var SnackController = {
  state: state7,
  subscribeKey(key, callback) {
    return subscribeKey(state7, key, callback);
  },
  showLoading(message, options = {}) {
    this._showMessage({ message, variant: "loading", ...options });
  },
  showSuccess(message) {
    this._showMessage({ message, variant: "success" });
  },
  showSvg(message, svg) {
    this._showMessage({ message, svg });
  },
  showError(message) {
    const errorMessage = CoreHelperUtil.parseError(message);
    this._showMessage({ message: errorMessage, variant: "error" });
  },
  hide() {
    state7.message = DEFAULT_STATE.message;
    state7.variant = DEFAULT_STATE.variant;
    state7.svg = DEFAULT_STATE.svg;
    state7.open = DEFAULT_STATE.open;
    state7.autoClose = DEFAULT_STATE.autoClose;
  },
  _showMessage({ message, svg, variant = "success", autoClose = DEFAULT_STATE.autoClose }) {
    if (state7.open) {
      state7.open = false;
      setTimeout(() => {
        state7.message = message;
        state7.variant = variant;
        state7.svg = svg;
        state7.open = true;
        state7.autoClose = autoClose;
      }, 150);
    } else {
      state7.message = message;
      state7.variant = variant;
      state7.svg = svg;
      state7.open = true;
      state7.autoClose = autoClose;
    }
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js
var SIWXUtil = {
  getSIWX() {
    return OptionsController.state.siwx;
  },
  async initializeIfEnabled() {
    var _a;
    const siwx = OptionsController.state.siwx;
    const caipAddress = ChainController.getActiveCaipAddress();
    if (!(siwx && caipAddress)) {
      return;
    }
    const [namespace, chainId, address] = caipAddress.split(":");
    if (!ChainController.checkIfSupportedNetwork(namespace)) {
      return;
    }
    try {
      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);
      if (sessions.length) {
        return;
      }
      await ModalController.open({
        view: "SIWXSignMessage"
      });
    } catch (error) {
      console.error("SIWXUtil:initializeIfEnabled", error);
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties()
      });
      await ((_a = ConnectionController._getClient()) == null ? void 0 : _a.disconnect().catch(console.error));
      RouterController.reset("Connect");
      SnackController.showError("A problem occurred while trying initialize authentication");
    }
  },
  async requestSignMessage() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    const client = ConnectionController._getClient();
    if (!siwx) {
      throw new Error("SIWX is not enabled");
    }
    if (!address) {
      throw new Error("No ActiveCaipAddress found");
    }
    if (!network) {
      throw new Error("No ActiveCaipNetwork or client found");
    }
    if (!client) {
      throw new Error("No ConnectionController client found");
    }
    try {
      const siwxMessage = await siwx.createMessage({
        chainId: network.caipNetworkId,
        accountAddress: address
      });
      const message = siwxMessage.toString();
      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);
      if (connectorId === ConstantsUtil.CONNECTOR_ID.AUTH) {
        RouterController.pushTransactionStack({
          view: null,
          goBack: false,
          replace: true
        });
      }
      const signature = await client.signMessage(message);
      await siwx.addSession({
        data: siwxMessage,
        message,
        signature
      });
      ModalController.close();
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_SUCCESS",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      const properties = this.getSIWXEventProperties();
      if (!ModalController.state.open || RouterController.state.view === "ApproveTransaction") {
        await ModalController.open({
          view: "SIWXSignMessage"
        });
      }
      if (properties.isSmartAccount) {
        SnackController.showError("This application might not support Smart Accounts");
      } else {
        SnackController.showError("Signature declined");
      }
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties
      });
      console.error("SWIXUtil:requestSignMessage", error);
    }
  },
  async cancelSignMessage() {
    var _a;
    try {
      const siwx = this.getSIWX();
      const isRequired = (_a = siwx == null ? void 0 : siwx.getRequired) == null ? void 0 : _a.call(siwx);
      if (isRequired) {
        await ConnectionController.disconnect();
      } else {
        ModalController.close();
      }
      RouterController.reset("Connect");
      EventsController.sendEvent({
        event: "CLICK_CANCEL_SIWX",
        type: "track",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      console.error("SIWXUtil:cancelSignMessage", error);
    }
  },
  async getSessions() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    if (!(siwx && address && network)) {
      return [];
    }
    return siwx.getSessions(network.caipNetworkId, address);
  },
  async isSIWXCloseDisabled() {
    var _a;
    const siwx = this.getSIWX();
    if (siwx) {
      const isApproveSignScreen = RouterController.state.view === "ApproveTransaction";
      const isSiwxSignMessage = RouterController.state.view === "SIWXSignMessage";
      if (isApproveSignScreen || isSiwxSignMessage) {
        return ((_a = siwx.getRequired) == null ? void 0 : _a.call(siwx)) && (await this.getSessions()).length === 0;
      }
    }
    return false;
  },
  async universalProviderAuthenticate({ universalProvider, chains, methods }) {
    var _a, _b, _c;
    const siwx = SIWXUtil.getSIWX();
    const namespaces = new Set(chains.map((chain) => chain.split(":")[0]));
    if (!siwx || namespaces.size !== 1 || !namespaces.has("eip155")) {
      return false;
    }
    const siwxMessage = await siwx.createMessage({
      chainId: ((_a = ChainController.getActiveCaipNetwork()) == null ? void 0 : _a.caipNetworkId) || "",
      accountAddress: ""
    });
    const result = await universalProvider.authenticate({
      nonce: siwxMessage.nonce,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      exp: siwxMessage.expirationTime,
      iat: siwxMessage.issuedAt,
      nbf: siwxMessage.notBefore,
      requestId: siwxMessage.requestId,
      version: siwxMessage.version,
      resources: siwxMessage.resources,
      statement: siwxMessage.statement,
      chainId: siwxMessage.chainId,
      methods,
      // The first chainId is what is used for universal provider to build the message
      chains: [siwxMessage.chainId, ...chains.filter((chain) => chain !== siwxMessage.chainId)]
    });
    SnackController.showLoading("Authenticating...", { autoClose: false });
    AccountController.setConnectedWalletInfo({
      ...result.session.peer.metadata,
      name: result.session.peer.metadata.name,
      icon: (_b = result.session.peer.metadata.icons) == null ? void 0 : _b[0],
      type: "WALLET_CONNECT"
    }, Array.from(namespaces)[0]);
    if ((_c = result == null ? void 0 : result.auths) == null ? void 0 : _c.length) {
      const sessions = result.auths.map((cacao) => {
        const message = universalProvider.client.formatAuthMessage({
          request: cacao.p,
          iss: cacao.p.iss
        });
        return {
          data: {
            ...cacao.p,
            accountAddress: cacao.p.iss.split(":").slice(-1).join(""),
            chainId: cacao.p.iss.split(":").slice(2, 4).join(":"),
            uri: cacao.p.aud,
            version: cacao.p.version || siwxMessage.version,
            expirationTime: cacao.p.exp,
            issuedAt: cacao.p.iat,
            notBefore: cacao.p.nbf
          },
          message,
          signature: cacao.s.s,
          cacao
        };
      });
      try {
        await siwx.setSessions(sessions);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_SUCCESS",
          properties: SIWXUtil.getSIWXEventProperties()
        });
      } catch (error) {
        console.error("SIWX:universalProviderAuth - failed to set sessions", error);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_ERROR",
          properties: SIWXUtil.getSIWXEventProperties()
        });
        await universalProvider.disconnect().catch(console.error);
        throw error;
      } finally {
        SnackController.hide();
      }
    }
    return true;
  },
  getSIWXEventProperties() {
    var _a;
    return {
      network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || "",
      isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
    };
  },
  async clearSessions() {
    const siwx = this.getSIWX();
    if (siwx) {
      await siwx.setSessions([]);
    }
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TransactionsController.js
var state8 = proxy({
  transactions: [],
  coinbaseTransactions: {},
  transactionsByYear: {},
  lastNetworkInView: void 0,
  loading: false,
  empty: false,
  next: void 0
});
var TransactionsController = {
  state: state8,
  subscribe(callback) {
    return subscribe(state8, () => callback(state8));
  },
  setLastNetworkInView(lastNetworkInView) {
    state8.lastNetworkInView = lastNetworkInView;
  },
  async fetchTransactions(accountAddress, onramp) {
    var _a;
    if (!accountAddress) {
      throw new Error("Transactions can't be fetched without an accountAddress");
    }
    state8.loading = true;
    try {
      const response = await BlockchainApiController.fetchTransactions({
        account: accountAddress,
        cursor: state8.next,
        onramp,
        // Coinbase transaction history state updates require the latest data
        cache: onramp === "coinbase" ? "no-cache" : void 0,
        chainId: (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId
      });
      const nonSpamTransactions = this.filterSpamTransactions(response.data);
      const sameChainTransactions = this.filterByConnectedChain(nonSpamTransactions);
      const filteredTransactions = [...state8.transactions, ...sameChainTransactions];
      state8.loading = false;
      if (onramp === "coinbase") {
        state8.coinbaseTransactions = this.groupTransactionsByYearAndMonth(state8.coinbaseTransactions, response.data);
      } else {
        state8.transactions = filteredTransactions;
        state8.transactionsByYear = this.groupTransactionsByYearAndMonth(state8.transactionsByYear, sameChainTransactions);
      }
      state8.empty = filteredTransactions.length === 0;
      state8.next = response.next ? response.next : void 0;
    } catch (error) {
      EventsController.sendEvent({
        type: "track",
        event: "ERROR_FETCH_TRANSACTIONS",
        properties: {
          address: accountAddress,
          projectId: OptionsController.state.projectId,
          cursor: state8.next,
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      SnackController.showError("Failed to fetch transactions");
      state8.loading = false;
      state8.empty = true;
      state8.next = void 0;
    }
  },
  groupTransactionsByYearAndMonth(transactionsMap = {}, transactions = []) {
    const grouped = transactionsMap;
    transactions.forEach((transaction) => {
      const year = new Date(transaction.metadata.minedAt).getFullYear();
      const month = new Date(transaction.metadata.minedAt).getMonth();
      const yearTransactions = grouped[year] ?? {};
      const monthTransactions = yearTransactions[month] ?? [];
      const newMonthTransactions = monthTransactions.filter((tx) => tx.id !== transaction.id);
      grouped[year] = {
        ...yearTransactions,
        [month]: [...newMonthTransactions, transaction].sort((a4, b6) => new Date(b6.metadata.minedAt).getTime() - new Date(a4.metadata.minedAt).getTime())
      };
    });
    return grouped;
  },
  filterSpamTransactions(transactions) {
    return transactions.filter((transaction) => {
      const isAllSpam = transaction.transfers.every((transfer) => {
        var _a;
        return ((_a = transfer.nft_info) == null ? void 0 : _a.flags.is_spam) === true;
      });
      return !isAllSpam;
    });
  },
  filterByConnectedChain(transactions) {
    var _a;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const filteredTransactions = transactions.filter((transaction) => transaction.metadata.chain === chainId);
    return filteredTransactions;
  },
  clearCursor() {
    state8.next = void 0;
  },
  resetTransactions() {
    state8.transactions = [];
    state8.transactionsByYear = {};
    state8.lastNetworkInView = void 0;
    state8.loading = false;
    state8.empty = false;
    state8.next = void 0;
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js
var state9 = proxy({
  wcError: false,
  buffering: false,
  status: "disconnected"
});
var wcConnectionPromise;
var ConnectionController = {
  state: state9,
  subscribeKey(key, callback) {
    return subscribeKey(state9, key, callback);
  },
  _getClient() {
    return state9._client;
  },
  setClient(client) {
    state9._client = ref(client);
  },
  async connectWalletConnect() {
    var _a, _b, _c, _d;
    if (CoreHelperUtil.isTelegram() || CoreHelperUtil.isSafari() && CoreHelperUtil.isIos()) {
      if (wcConnectionPromise) {
        await wcConnectionPromise;
        wcConnectionPromise = void 0;
        return;
      }
      if (!CoreHelperUtil.isPairingExpired(state9 == null ? void 0 : state9.wcPairingExpiry)) {
        const link = state9.wcUri;
        state9.wcUri = link;
        return;
      }
      wcConnectionPromise = (_b = (_a = this._getClient()) == null ? void 0 : _a.connectWalletConnect) == null ? void 0 : _b.call(_a).catch(() => void 0);
      this.state.status = "connecting";
      await wcConnectionPromise;
      wcConnectionPromise = void 0;
      state9.wcPairingExpiry = void 0;
      this.state.status = "connected";
    } else {
      await ((_d = (_c = this._getClient()) == null ? void 0 : _c.connectWalletConnect) == null ? void 0 : _d.call(_c));
    }
  },
  async connectExternal(options, chain, setChain = true) {
    var _a, _b;
    await ((_b = (_a = this._getClient()) == null ? void 0 : _a.connectExternal) == null ? void 0 : _b.call(_a, options));
    if (setChain) {
      ChainController.setActiveNamespace(chain);
    }
  },
  async reconnectExternal(options) {
    var _a, _b;
    await ((_b = (_a = this._getClient()) == null ? void 0 : _a.reconnectExternal) == null ? void 0 : _b.call(_a, options));
    const namespace = options.chain || ChainController.state.activeChain;
    if (namespace) {
      ConnectorController.setConnectorId(options.id, namespace);
    }
  },
  async setPreferredAccountType(accountType) {
    var _a;
    ModalController.setLoading(true, ChainController.state.activeChain);
    const authConnector = ConnectorController.getAuthConnector();
    if (!authConnector) {
      return;
    }
    await (authConnector == null ? void 0 : authConnector.provider.setPreferredAccount(accountType));
    await this.reconnectExternal(authConnector);
    ModalController.setLoading(false, ChainController.state.activeChain);
    EventsController.sendEvent({
      type: "track",
      event: "SET_PREFERRED_ACCOUNT_TYPE",
      properties: {
        accountType,
        network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || ""
      }
    });
  },
  async signMessage(message) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.signMessage(message);
  },
  parseUnits(value, decimals) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.parseUnits(value, decimals);
  },
  formatUnits(value, decimals) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.formatUnits(value, decimals);
  },
  async sendTransaction(args) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.sendTransaction(args);
  },
  async getCapabilities(params) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.getCapabilities(params);
  },
  async grantPermissions(params) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.grantPermissions(params);
  },
  async walletGetAssets(params) {
    var _a;
    return ((_a = this._getClient()) == null ? void 0 : _a.walletGetAssets(params)) ?? {};
  },
  async estimateGas(args) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.estimateGas(args);
  },
  async writeContract(args) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.writeContract(args);
  },
  async getEnsAddress(value) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.getEnsAddress(value);
  },
  async getEnsAvatar(value) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.getEnsAvatar(value);
  },
  checkInstalled(ids) {
    var _a, _b;
    return ((_b = (_a = this._getClient()) == null ? void 0 : _a.checkInstalled) == null ? void 0 : _b.call(_a, ids)) || false;
  },
  resetWcConnection() {
    state9.wcUri = void 0;
    state9.wcPairingExpiry = void 0;
    state9.wcLinking = void 0;
    state9.recentWallet = void 0;
    state9.status = "disconnected";
    TransactionsController.resetTransactions();
    StorageUtil.deleteWalletConnectDeepLink();
  },
  resetUri() {
    state9.wcUri = void 0;
    state9.wcPairingExpiry = void 0;
  },
  finalizeWcConnection() {
    var _a, _b;
    const { wcLinking, recentWallet } = ConnectionController.state;
    if (wcLinking) {
      StorageUtil.setWalletConnectDeepLink(wcLinking);
    }
    if (recentWallet) {
      StorageUtil.setAppKitRecent(recentWallet);
    }
    EventsController.sendEvent({
      type: "track",
      event: "CONNECT_SUCCESS",
      properties: {
        method: wcLinking ? "mobile" : "qrcode",
        name: ((_b = (_a = RouterController.state.data) == null ? void 0 : _a.wallet) == null ? void 0 : _b.name) || "Unknown"
      }
    });
  },
  setWcBasic(wcBasic) {
    state9.wcBasic = wcBasic;
  },
  setUri(uri) {
    state9.wcUri = uri;
    state9.wcPairingExpiry = CoreHelperUtil.getPairingExpiry();
  },
  setWcLinking(wcLinking) {
    state9.wcLinking = wcLinking;
  },
  setWcError(wcError) {
    state9.wcError = wcError;
    state9.buffering = false;
  },
  setRecentWallet(wallet) {
    state9.recentWallet = wallet;
  },
  setBuffering(buffering) {
    state9.buffering = buffering;
  },
  setStatus(status) {
    state9.status = status;
  },
  async disconnect(namespace) {
    try {
      ModalController.setLoading(true, namespace);
      await SIWXUtil.clearSessions();
      await ChainController.disconnect(namespace);
      ModalController.setLoading(false, namespace);
      ConnectorController.setFilterByNamespace(void 0);
    } catch (error) {
      throw new Error("Failed to disconnect");
    }
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js
var state10 = proxy({
  loading: false,
  open: false,
  selectedNetworkId: void 0,
  activeChain: void 0,
  initialized: false
});
var PublicStateController = {
  state: state10,
  subscribe(callback) {
    return subscribe(state10, () => callback(state10));
  },
  set(newState) {
    Object.assign(state10, { ...state10, ...newState });
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js
var state11 = proxy({
  loading: false,
  loadingNamespaceMap: /* @__PURE__ */ new Map(),
  open: false,
  shake: false,
  namespace: void 0
});
var ModalController = {
  state: state11,
  subscribe(callback) {
    return subscribe(state11, () => callback(state11));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state11, key, callback);
  },
  async open(options) {
    var _a;
    const isConnected = AccountController.state.status === "connected";
    if (ConnectionController.state.wcBasic) {
      ApiController.prefetch({ fetchNetworkImages: false, fetchConnectorImages: false });
    } else {
      await ApiController.prefetch({
        fetchConnectorImages: !isConnected,
        fetchFeaturedWallets: !isConnected,
        fetchRecommendedWallets: !isConnected
      });
    }
    if (options == null ? void 0 : options.namespace) {
      await ChainController.switchActiveNamespace(options.namespace);
      ModalController.setLoading(true, options.namespace);
    } else {
      ModalController.setLoading(true);
    }
    ConnectorController.setFilterByNamespace(options == null ? void 0 : options.namespace);
    const caipAddress = (_a = ChainController.getAccountData(options == null ? void 0 : options.namespace)) == null ? void 0 : _a.caipAddress;
    const hasNoAdapters = ChainController.state.noAdapters;
    if (hasNoAdapters && !caipAddress) {
      if (CoreHelperUtil.isMobile()) {
        RouterController.reset("AllWallets");
      } else {
        RouterController.reset("ConnectingWalletConnectBasic");
      }
    } else if (options == null ? void 0 : options.view) {
      RouterController.reset(options.view);
    } else if (caipAddress) {
      RouterController.reset("Account");
    } else {
      RouterController.reset("Connect");
    }
    state11.open = true;
    PublicStateController.set({ open: true });
    EventsController.sendEvent({
      type: "track",
      event: "MODAL_OPEN",
      properties: { connected: Boolean(caipAddress) }
    });
  },
  close() {
    const isEmbeddedEnabled = OptionsController.state.enableEmbedded;
    const isConnected = Boolean(ChainController.state.activeCaipAddress);
    if (state11.open) {
      EventsController.sendEvent({
        type: "track",
        event: "MODAL_CLOSE",
        properties: { connected: isConnected }
      });
    }
    state11.open = false;
    ModalController.clearLoading();
    if (isEmbeddedEnabled) {
      if (isConnected) {
        RouterController.replace("Account");
      } else {
        RouterController.push("Connect");
      }
    } else {
      PublicStateController.set({ open: false });
    }
    ConnectionController.resetUri();
  },
  setLoading(loading, namespace) {
    if (namespace) {
      state11.loadingNamespaceMap.set(namespace, loading);
    }
    state11.loading = loading;
    PublicStateController.set({ loading });
  },
  clearLoading() {
    state11.loadingNamespaceMap.clear();
    state11.loading = false;
  },
  shake() {
    if (state11.shake) {
      return;
    }
    state11.shake = true;
    setTimeout(() => {
      state11.shake = false;
    }, 500);
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js
var state12 = proxy({
  view: "Connect",
  history: ["Connect"],
  transactionStack: []
});
var RouterController = {
  state: state12,
  subscribeKey(key, callback) {
    return subscribeKey(state12, key, callback);
  },
  pushTransactionStack(action) {
    state12.transactionStack.push(action);
  },
  popTransactionStack(cancel) {
    var _a, _b;
    const action = state12.transactionStack.pop();
    if (!action) {
      return;
    }
    if (cancel) {
      this.goBack();
      (_a = action == null ? void 0 : action.onCancel) == null ? void 0 : _a.call(action);
    } else {
      if (action.goBack) {
        this.goBack();
      } else if (action.replace) {
        const history = state12.history;
        const connectingSiweIndex = history.indexOf("ConnectingSiwe");
        if (connectingSiweIndex > 0) {
          this.goBackToIndex(connectingSiweIndex - 1);
        } else {
          ModalController.close();
          state12.history = [];
        }
      } else if (action.view) {
        this.reset(action.view);
      }
      (_b = action == null ? void 0 : action.onSuccess) == null ? void 0 : _b.call(action);
    }
  },
  push(view, data) {
    if (view !== state12.view) {
      state12.view = view;
      state12.history.push(view);
      state12.data = data;
    }
  },
  reset(view, data) {
    state12.view = view;
    state12.history = [view];
    state12.data = data;
  },
  replace(view, data) {
    const lastView = state12.history.at(-1);
    const isSameView = lastView === view;
    if (!isSameView) {
      state12.view = view;
      state12.history[state12.history.length - 1] = view;
      state12.data = data;
    }
  },
  goBack() {
    var _a;
    const shouldReload = !ChainController.state.activeCaipAddress && this.state.view === "ConnectingFarcaster";
    if (state12.history.length > 1 && !state12.history.includes("UnsupportedChain")) {
      state12.history.pop();
      const [last] = state12.history.slice(-1);
      if (last) {
        state12.view = last;
      }
    } else {
      ModalController.close();
    }
    if ((_a = state12.data) == null ? void 0 : _a.wallet) {
      state12.data.wallet = void 0;
    }
    setTimeout(() => {
      var _a2, _b, _c;
      if (shouldReload) {
        AccountController.setFarcasterUrl(void 0, ChainController.state.activeChain);
        const authConnector = ConnectorController.getAuthConnector();
        (_a2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a2.reload();
        const optionsState = snapshot(OptionsController.state);
        (_c = (_b = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _b.syncDappData) == null ? void 0 : _c.call(_b, {
          metadata: optionsState.metadata,
          sdkVersion: optionsState.sdkVersion,
          projectId: optionsState.projectId,
          sdkType: optionsState.sdkType
        });
      }
    }, 100);
  },
  goBackToIndex(historyIndex) {
    if (state12.history.length > 1) {
      state12.history = state12.history.slice(0, historyIndex + 1);
      const [last] = state12.history.slice(-1);
      if (last) {
        state12.view = last;
      }
    }
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js
var state13 = proxy({
  themeMode: "dark",
  themeVariables: {},
  w3mThemeVariables: void 0
});
var ThemeController = {
  state: state13,
  subscribe(callback) {
    return subscribe(state13, () => callback(state13));
  },
  setThemeMode(themeMode) {
    state13.themeMode = themeMode;
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariables = ThemeController.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeMode,
          themeVariables,
          w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  setThemeVariables(themeVariables) {
    state13.themeVariables = { ...state13.themeVariables, ...themeVariables };
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariablesSnapshot = ThemeController.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeVariables: themeVariablesSnapshot,
          w3mThemeVariables: getW3mThemeVariables(state13.themeVariables, state13.themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  getSnapshot() {
    return snapshot(state13);
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js
var defaultActiveConnectors = {
  eip155: void 0,
  solana: void 0,
  polkadot: void 0,
  bip122: void 0
};
var state14 = proxy({
  allConnectors: [],
  connectors: [],
  activeConnector: void 0,
  filterByNamespace: void 0,
  activeConnectorIds: { ...defaultActiveConnectors }
});
var ConnectorController = {
  state: state14,
  subscribe(callback) {
    return subscribe(state14, () => {
      callback(state14);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state14, key, callback);
  },
  initialize(namespaces) {
    namespaces.forEach((namespace) => {
      const connectorId = StorageUtil.getConnectedConnectorId(namespace);
      if (connectorId) {
        this.setConnectorId(connectorId, namespace);
      }
    });
  },
  setActiveConnector(connector) {
    if (connector) {
      state14.activeConnector = ref(connector);
    }
  },
  setConnectors(connectors) {
    const newConnectors = connectors.filter((newConnector) => !state14.allConnectors.some((existingConnector) => existingConnector.id === newConnector.id && this.getConnectorName(existingConnector.name) === this.getConnectorName(newConnector.name) && existingConnector.chain === newConnector.chain));
    newConnectors.forEach((connector) => {
      if (connector.type !== "MULTI_CHAIN") {
        state14.allConnectors.push(ref(connector));
      }
    });
    state14.connectors = this.mergeMultiChainConnectors(state14.allConnectors);
  },
  removeAdapter(namespace) {
    state14.allConnectors = state14.allConnectors.filter((connector) => connector.chain !== namespace);
    state14.connectors = this.mergeMultiChainConnectors(state14.allConnectors);
  },
  mergeMultiChainConnectors(connectors) {
    const connectorsByNameMap = this.generateConnectorMapByName(connectors);
    const mergedConnectors = [];
    connectorsByNameMap.forEach((keyConnectors) => {
      const firstItem = keyConnectors[0];
      const isAuthConnector = (firstItem == null ? void 0 : firstItem.id) === ConstantsUtil.CONNECTOR_ID.AUTH;
      if (keyConnectors.length > 1 && firstItem) {
        mergedConnectors.push({
          name: firstItem.name,
          imageUrl: firstItem.imageUrl,
          imageId: firstItem.imageId,
          connectors: [...keyConnectors],
          type: isAuthConnector ? "AUTH" : "MULTI_CHAIN",
          // These values are just placeholders, we don't use them in multi-chain connector select screen
          chain: "eip155",
          id: (firstItem == null ? void 0 : firstItem.id) || ""
        });
      } else if (firstItem) {
        mergedConnectors.push(firstItem);
      }
    });
    return mergedConnectors;
  },
  generateConnectorMapByName(connectors) {
    const connectorsByNameMap = /* @__PURE__ */ new Map();
    connectors.forEach((connector) => {
      const { name: name2 } = connector;
      const connectorName = this.getConnectorName(name2);
      if (!connectorName) {
        return;
      }
      const connectorsByName = connectorsByNameMap.get(connectorName) || [];
      const haveSameConnector = connectorsByName.find((c8) => c8.chain === connector.chain);
      if (!haveSameConnector) {
        connectorsByName.push(connector);
      }
      connectorsByNameMap.set(connectorName, connectorsByName);
    });
    return connectorsByNameMap;
  },
  getConnectorName(name2) {
    if (!name2) {
      return name2;
    }
    const nameOverrideMap = {
      "Trust Wallet": "Trust"
    };
    return nameOverrideMap[name2] || name2;
  },
  getUniqueConnectorsByName(connectors) {
    const uniqueConnectors = [];
    connectors.forEach((c8) => {
      if (!uniqueConnectors.find((uc) => uc.chain === c8.chain)) {
        uniqueConnectors.push(c8);
      }
    });
    return uniqueConnectors;
  },
  addConnector(connector) {
    var _a, _b, _c;
    if (connector.id === ConstantsUtil.CONNECTOR_ID.AUTH) {
      const authConnector = connector;
      const optionsState = snapshot(OptionsController.state);
      const themeMode = ThemeController.getSnapshot().themeMode;
      const themeVariables = ThemeController.getSnapshot().themeVariables;
      (_b = (_a = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a.syncDappData) == null ? void 0 : _b.call(_a, {
        metadata: optionsState.metadata,
        sdkVersion: optionsState.sdkVersion,
        projectId: optionsState.projectId,
        sdkType: optionsState.sdkType
      });
      (_c = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _c.syncTheme({
        themeMode,
        themeVariables,
        w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
      });
      this.setConnectors([connector]);
    } else {
      this.setConnectors([connector]);
    }
  },
  getAuthConnector(chainNamespace) {
    var _a;
    const activeNamespace = chainNamespace || ChainController.state.activeChain;
    const authConnector = state14.connectors.find((c8) => c8.id === ConstantsUtil.CONNECTOR_ID.AUTH);
    if (!authConnector) {
      return void 0;
    }
    if ((_a = authConnector == null ? void 0 : authConnector.connectors) == null ? void 0 : _a.length) {
      const connector = authConnector.connectors.find((c8) => c8.chain === activeNamespace);
      return connector;
    }
    return authConnector;
  },
  getAnnouncedConnectorRdns() {
    return state14.connectors.filter((c8) => c8.type === "ANNOUNCED").map((c8) => {
      var _a;
      return (_a = c8.info) == null ? void 0 : _a.rdns;
    });
  },
  getConnectorById(id) {
    return state14.allConnectors.find((c8) => c8.id === id);
  },
  getConnector(id, rdns) {
    const connectorsByNamespace = state14.allConnectors.filter((c8) => c8.chain === ChainController.state.activeChain);
    return connectorsByNamespace.find((c8) => {
      var _a;
      return c8.explorerId === id || ((_a = c8.info) == null ? void 0 : _a.rdns) === rdns;
    });
  },
  syncIfAuthConnector(connector) {
    var _a, _b;
    if (connector.id !== "ID_AUTH") {
      return;
    }
    const authConnector = connector;
    const optionsState = snapshot(OptionsController.state);
    const themeMode = ThemeController.getSnapshot().themeMode;
    const themeVariables = ThemeController.getSnapshot().themeVariables;
    (_b = (_a = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a.syncDappData) == null ? void 0 : _b.call(_a, {
      metadata: optionsState.metadata,
      sdkVersion: optionsState.sdkVersion,
      sdkType: optionsState.sdkType,
      projectId: optionsState.projectId
    });
    authConnector.provider.syncTheme({
      themeMode,
      themeVariables,
      w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
    });
  },
  /**
   * Returns the connectors filtered by namespace.
   * @param namespace - The namespace to filter the connectors by.
   * @returns ConnectorWithProviders[].
   */
  getConnectorsByNamespace(namespace) {
    const namespaceConnectors = state14.allConnectors.filter((connector) => connector.chain === namespace);
    return this.mergeMultiChainConnectors(namespaceConnectors);
  },
  selectWalletConnector(wallet) {
    const connector = ConnectorController.getConnector(wallet.id, wallet.rdns);
    if (ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA) {
      MobileWalletUtil.handleSolanaDeeplinkRedirect((connector == null ? void 0 : connector.name) || wallet.name || "");
    }
    if (connector) {
      RouterController.push("ConnectingExternal", { connector });
    } else {
      RouterController.push("ConnectingWalletConnect", { wallet });
    }
  },
  /**
   * Returns the connectors. If a namespace is provided, the connectors are filtered by namespace.
   * @param namespace - The namespace to filter the connectors by. If not provided, all connectors are returned.
   * @returns ConnectorWithProviders[].
   */
  getConnectors(namespace) {
    if (namespace) {
      return this.getConnectorsByNamespace(namespace);
    }
    return this.mergeMultiChainConnectors(state14.allConnectors);
  },
  /**
   * Sets the filter by namespace and updates the connectors.
   * @param namespace - The namespace to filter the connectors by.
   */
  setFilterByNamespace(namespace) {
    state14.filterByNamespace = namespace;
    state14.connectors = this.getConnectors(namespace);
    ApiController.setFilterByNamespace(namespace);
  },
  setConnectorId(connectorId, namespace) {
    if (connectorId) {
      state14.activeConnectorIds = {
        ...state14.activeConnectorIds,
        [namespace]: connectorId
      };
      StorageUtil.setConnectedConnectorId(namespace, connectorId);
    }
  },
  removeConnectorId(namespace) {
    state14.activeConnectorIds = {
      ...state14.activeConnectorIds,
      [namespace]: void 0
    };
    StorageUtil.deleteConnectedConnectorId(namespace);
  },
  getConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    return state14.activeConnectorIds[namespace];
  },
  isConnected(namespace) {
    if (!namespace) {
      return Object.values(state14.activeConnectorIds).some((id) => Boolean(id));
    }
    return Boolean(state14.activeConnectorIds[namespace]);
  },
  resetConnectorIds() {
    state14.activeConnectorIds = { ...defaultActiveConnectors };
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConnectorControllerUtil.js
function checkNamespaceConnectorId(namespace, connectorId) {
  return ConnectorController.getConnectorId(namespace) === connectorId;
}

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ChainControllerUtil.js
function getChainsToDisconnect(namespace) {
  const namespaces = Array.from(ChainController.state.chains.keys());
  let chains = [];
  if (namespace) {
    chains.push([namespace, ChainController.state.chains.get(namespace)]);
    if (checkNamespaceConnectorId(namespace, ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)) {
      namespaces.forEach((ns) => {
        if (ns !== namespace && checkNamespaceConnectorId(ns, ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)) {
          chains.push([ns, ChainController.state.chains.get(ns)]);
        }
      });
    } else if (checkNamespaceConnectorId(namespace, ConstantsUtil.CONNECTOR_ID.AUTH)) {
      namespaces.forEach((ns) => {
        if (ns !== namespace && checkNamespaceConnectorId(ns, ConstantsUtil.CONNECTOR_ID.AUTH)) {
          chains.push([ns, ChainController.state.chains.get(ns)]);
        }
      });
    }
  } else {
    chains = Array.from(ChainController.state.chains.entries());
  }
  return chains;
}

// ../../node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount2(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex2(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber2(count);
}

// ../../node_modules/viem/_esm/utils/wait.js
async function wait2(time) {
  return new Promise((res) => setTimeout(res, time));
}

// ../../node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace2 = new LruMap2(128);

// ../../node_modules/viem/_esm/utils/uid.js
var size5 = 256;
var index = size5;
var buffer;
function uid2(length2 = 11) {
  if (!buffer || index + length2 > size5 * 2) {
    buffer = "";
    index = 0;
    for (let i6 = 0; i6 < size5; i6++) {
      buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
    }
  }
  return buffer.substring(index, index++ + length2);
}

// ../../node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache2 = new LruMap2(8192);
function withDedupe2(fn3, { enabled = true, id }) {
  if (!enabled || !id)
    return fn3();
  if (promiseCache2.get(id))
    return promiseCache2.get(id);
  const promise = fn3().finally(() => promiseCache2.delete(id));
  promiseCache2.set(id, promise);
  return promise;
}

// ../../node_modules/viem/_esm/utils/promise/withRetry.js
function withRetry2(fn3, { delay: delay_ = 100, retryCount = 2, shouldRetry: shouldRetry2 = () => true } = {}) {
  return new Promise((resolve, reject) => {
    const attemptRetry = async ({ count = 0 } = {}) => {
      const retry = async ({ error }) => {
        const delay = typeof delay_ === "function" ? delay_({ count, error }) : delay_;
        if (delay)
          await wait2(delay);
        attemptRetry({ count: count + 1 });
      };
      try {
        const data = await fn3();
        resolve(data);
      } catch (err) {
        if (count < retryCount && await shouldRetry2({ count, error: err }))
          return retry({ error: err });
        reject(err);
      }
    };
    attemptRetry();
  });
}

// ../../node_modules/viem/_esm/utils/buildRequest.js
function buildRequest2(request, options = {}) {
  return async (args, overrideOptions = {}) => {
    var _a;
    const { dedupe = false, methods, retryDelay = 150, retryCount = 3, uid: uid3 } = {
      ...options,
      ...overrideOptions
    };
    const { method } = args;
    if ((_a = methods == null ? void 0 : methods.exclude) == null ? void 0 : _a.includes(method))
      throw new MethodNotSupportedRpcError(new Error("method not supported"), {
        method
      });
    if ((methods == null ? void 0 : methods.include) && !methods.include.includes(method))
      throw new MethodNotSupportedRpcError(new Error("method not supported"), {
        method
      });
    const requestId = dedupe ? stringToHex(`${uid3}.${stringify(args)}`) : void 0;
    return withDedupe2(() => withRetry2(async () => {
      try {
        return await request(args);
      } catch (err_) {
        const err = err_;
        switch (err.code) {
          case ParseRpcError.code:
            throw new ParseRpcError(err);
          case InvalidRequestRpcError.code:
            throw new InvalidRequestRpcError(err);
          case MethodNotFoundRpcError.code:
            throw new MethodNotFoundRpcError(err, { method: args.method });
          case InvalidParamsRpcError.code:
            throw new InvalidParamsRpcError(err);
          case InternalRpcError.code:
            throw new InternalRpcError(err);
          case InvalidInputRpcError.code:
            throw new InvalidInputRpcError(err);
          case ResourceNotFoundRpcError.code:
            throw new ResourceNotFoundRpcError(err);
          case ResourceUnavailableRpcError.code:
            throw new ResourceUnavailableRpcError(err);
          case TransactionRejectedRpcError.code:
            throw new TransactionRejectedRpcError(err);
          case MethodNotSupportedRpcError.code:
            throw new MethodNotSupportedRpcError(err, {
              method: args.method
            });
          case LimitExceededRpcError.code:
            throw new LimitExceededRpcError(err);
          case JsonRpcVersionUnsupportedError.code:
            throw new JsonRpcVersionUnsupportedError(err);
          case UserRejectedRequestError.code:
            throw new UserRejectedRequestError(err);
          case UnauthorizedProviderError.code:
            throw new UnauthorizedProviderError(err);
          case UnsupportedProviderMethodError.code:
            throw new UnsupportedProviderMethodError(err);
          case ProviderDisconnectedError.code:
            throw new ProviderDisconnectedError(err);
          case ChainDisconnectedError.code:
            throw new ChainDisconnectedError(err);
          case SwitchChainError.code:
            throw new SwitchChainError(err);
          case 5e3:
            throw new UserRejectedRequestError(err);
          default:
            if (err_ instanceof BaseError)
              throw err_;
            throw new UnknownRpcError(err);
        }
      }
    }, {
      delay: ({ count, error }) => {
        var _a2;
        if (error && error instanceof HttpRequestError) {
          const retryAfter = (_a2 = error == null ? void 0 : error.headers) == null ? void 0 : _a2.get("Retry-After");
          if (retryAfter == null ? void 0 : retryAfter.match(/\d/))
            return Number.parseInt(retryAfter) * 1e3;
        }
        return ~~(1 << count) * retryDelay;
      },
      retryCount,
      shouldRetry: ({ error }) => shouldRetry(error)
    }), { enabled: dedupe, id: requestId });
  };
}
function shouldRetry(error) {
  if ("code" in error && typeof error.code === "number") {
    if (error.code === -1)
      return true;
    if (error.code === LimitExceededRpcError.code)
      return true;
    if (error.code === InternalRpcError.code)
      return true;
    return false;
  }
  if (error instanceof HttpRequestError && error.status) {
    if (error.status === 403)
      return true;
    if (error.status === 408)
      return true;
    if (error.status === 413)
      return true;
    if (error.status === 429)
      return true;
    if (error.status === 500)
      return true;
    if (error.status === 502)
      return true;
    if (error.status === 503)
      return true;
    if (error.status === 504)
      return true;
    return false;
  }
  return true;
}

// ../../node_modules/viem/_esm/clients/transports/createTransport.js
function createTransport2({ key, methods, name: name2, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {
  const uid3 = uid2();
  return {
    config: {
      key,
      methods,
      name: name2,
      request,
      retryCount,
      retryDelay,
      timeout,
      type
    },
    request: buildRequest2(request, { methods, retryCount, retryDelay, uid: uid3 }),
    value
  };
}

// ../../node_modules/viem/_esm/clients/transports/fallback.js
function fallback2(transports_, config = {}) {
  const { key = "fallback", name: name2 = "Fallback", rank = false, shouldThrow: shouldThrow_ = shouldThrow, retryCount, retryDelay } = config;
  return ({ chain, pollingInterval = 4e3, timeout, ...rest }) => {
    let transports = transports_;
    let onResponse = () => {
    };
    const transport = createTransport2({
      key,
      name: name2,
      async request({ method, params }) {
        let includes;
        const fetch2 = async (i6 = 0) => {
          const transport2 = transports[i6]({
            ...rest,
            chain,
            retryCount: 0,
            timeout
          });
          try {
            const response = await transport2.request({
              method,
              params
            });
            onResponse({
              method,
              params,
              response,
              transport: transport2,
              status: "success"
            });
            return response;
          } catch (err) {
            onResponse({
              error: err,
              method,
              params,
              transport: transport2,
              status: "error"
            });
            if (shouldThrow_(err))
              throw err;
            if (i6 === transports.length - 1)
              throw err;
            includes ?? (includes = transports.slice(i6 + 1).some((transport3) => {
              const { include, exclude } = transport3({ chain }).config.methods || {};
              if (include)
                return include.includes(method);
              if (exclude)
                return !exclude.includes(method);
              return true;
            }));
            if (!includes)
              throw err;
            return fetch2(i6 + 1);
          }
        };
        return fetch2();
      },
      retryCount,
      retryDelay,
      type: "fallback"
    }, {
      onResponse: (fn3) => onResponse = fn3,
      transports: transports.map((fn3) => fn3({ chain, retryCount: 0 }))
    });
    if (rank) {
      const rankOptions = typeof rank === "object" ? rank : {};
      rankTransports({
        chain,
        interval: rankOptions.interval ?? pollingInterval,
        onTransports: (transports_2) => transports = transports_2,
        ping: rankOptions.ping,
        sampleCount: rankOptions.sampleCount,
        timeout: rankOptions.timeout,
        transports,
        weights: rankOptions.weights
      });
    }
    return transport;
  };
}
function shouldThrow(error) {
  if ("code" in error && typeof error.code === "number") {
    if (error.code === TransactionRejectedRpcError.code || error.code === UserRejectedRequestError.code || ExecutionRevertedError.nodeMessage.test(error.message) || error.code === 5e3)
      return true;
  }
  return false;
}
function rankTransports({ chain, interval = 4e3, onTransports, ping, sampleCount = 10, timeout = 1e3, transports, weights = {} }) {
  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } = weights;
  const samples = [];
  const rankTransports_ = async () => {
    const sample = await Promise.all(transports.map(async (transport) => {
      const transport_ = transport({ chain, retryCount: 0, timeout });
      const start = Date.now();
      let end;
      let success;
      try {
        await (ping ? ping({ transport: transport_ }) : transport_.request({ method: "net_listening" }));
        success = 1;
      } catch {
        success = 0;
      } finally {
        end = Date.now();
      }
      const latency = end - start;
      return { latency, success };
    }));
    samples.push(sample);
    if (samples.length > sampleCount)
      samples.shift();
    const maxLatency = Math.max(...samples.map((sample2) => Math.max(...sample2.map(({ latency }) => latency))));
    const scores = transports.map((_4, i6) => {
      const latencies = samples.map((sample2) => sample2[i6].latency);
      const meanLatency = latencies.reduce((acc, latency) => acc + latency, 0) / latencies.length;
      const latencyScore = 1 - meanLatency / maxLatency;
      const successes = samples.map((sample2) => sample2[i6].success);
      const stabilityScore = successes.reduce((acc, success) => acc + success, 0) / successes.length;
      if (stabilityScore === 0)
        return [0, i6];
      return [
        latencyWeight * latencyScore + stabilityWeight * stabilityScore,
        i6
      ];
    }).sort((a4, b6) => b6[0] - a4[0]);
    onTransports(scores.map(([, i6]) => transports[i6]));
    await wait2(interval);
    rankTransports_();
  };
  rankTransports_();
}

// ../../node_modules/viem/_esm/errors/transport.js
var UrlRequiredError2 = class extends BaseError {
  constructor() {
    super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
      docsPath: "/docs/clients/intro",
      name: "UrlRequiredError"
    });
  }
};

// ../../node_modules/viem/_esm/utils/promise/withTimeout.js
function withTimeout2(fn3, { errorInstance = new Error("timed out"), timeout, signal }) {
  return new Promise((resolve, reject) => {
    ;
    (async () => {
      let timeoutId;
      try {
        const controller = new AbortController();
        if (timeout > 0) {
          timeoutId = setTimeout(() => {
            if (signal) {
              controller.abort();
            } else {
              reject(errorInstance);
            }
          }, timeout);
        }
        resolve(await fn3({ signal: (controller == null ? void 0 : controller.signal) || null }));
      } catch (err) {
        if ((err == null ? void 0 : err.name) === "AbortError")
          reject(errorInstance);
        reject(err);
      } finally {
        clearTimeout(timeoutId);
      }
    })();
  });
}

// ../../node_modules/viem/_esm/utils/rpc/id.js
function createIdStore2() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache2 = createIdStore2();

// ../../node_modules/viem/_esm/utils/rpc/http.js
function getHttpRpcClient2(url, options = {}) {
  return {
    async request(params) {
      var _a;
      const { body, onRequest = options.onRequest, onResponse = options.onResponse, timeout = options.timeout ?? 1e4 } = params;
      const fetchOptions = {
        ...options.fetchOptions ?? {},
        ...params.fetchOptions ?? {}
      };
      const { headers, method, signal: signal_ } = fetchOptions;
      try {
        const response = await withTimeout2(async ({ signal }) => {
          const init = {
            ...fetchOptions,
            body: Array.isArray(body) ? stringify(body.map((body2) => ({
              jsonrpc: "2.0",
              id: body2.id ?? idCache2.take(),
              ...body2
            }))) : stringify({
              jsonrpc: "2.0",
              id: body.id ?? idCache2.take(),
              ...body
            }),
            headers: {
              "Content-Type": "application/json",
              ...headers
            },
            method: method || "POST",
            signal: signal_ || (timeout > 0 ? signal : null)
          };
          const request = new Request(url, init);
          const args = await (onRequest == null ? void 0 : onRequest(request, init)) ?? { ...init, url };
          const response2 = await fetch(args.url ?? url, args);
          return response2;
        }, {
          errorInstance: new TimeoutError({ body, url }),
          timeout,
          signal: true
        });
        if (onResponse)
          await onResponse(response);
        let data;
        if ((_a = response.headers.get("Content-Type")) == null ? void 0 : _a.startsWith("application/json"))
          data = await response.json();
        else {
          data = await response.text();
          try {
            data = JSON.parse(data || "{}");
          } catch (err) {
            if (response.ok)
              throw err;
            data = { error: data };
          }
        }
        if (!response.ok) {
          throw new HttpRequestError({
            body,
            details: stringify(data.error) || response.statusText,
            headers: response.headers,
            status: response.status,
            url
          });
        }
        return data;
      } catch (err) {
        if (err instanceof HttpRequestError)
          throw err;
        if (err instanceof TimeoutError)
          throw err;
        throw new HttpRequestError({
          body,
          cause: err,
          url
        });
      }
    }
  };
}

// ../../node_modules/viem/_esm/clients/transports/http.js
function http2(url, config = {}) {
  const { batch, fetchOptions, key = "http", methods, name: name2 = "HTTP JSON-RPC", onFetchRequest, onFetchResponse, retryDelay, raw } = config;
  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
    const { batchSize = 1e3, wait: wait3 = 0 } = typeof batch === "object" ? batch : {};
    const retryCount = config.retryCount ?? retryCount_;
    const timeout = timeout_ ?? config.timeout ?? 1e4;
    const url_ = url || (chain == null ? void 0 : chain.rpcUrls.default.http[0]);
    if (!url_)
      throw new UrlRequiredError2();
    const rpcClient = getHttpRpcClient2(url_, {
      fetchOptions,
      onRequest: onFetchRequest,
      onResponse: onFetchResponse,
      timeout
    });
    return createTransport2({
      key,
      methods,
      name: name2,
      async request({ method, params }) {
        const body = { method, params };
        const { schedule } = createBatchScheduler({
          id: url_,
          wait: wait3,
          shouldSplitBatch(requests) {
            return requests.length > batchSize;
          },
          fn: (body2) => rpcClient.request({
            body: body2
          }),
          sort: (a4, b6) => a4.id - b6.id
        });
        const fn3 = async (body2) => batch ? schedule(body2) : [
          await rpcClient.request({
            body: body2
          })
        ];
        const [{ error, result }] = await fn3(body);
        if (raw)
          return { error, result };
        if (error)
          throw new RpcRequestError({
            body,
            error,
            url: url_
          });
        return result;
      },
      retryCount,
      retryDelay,
      timeout,
      type: "http"
    }, {
      fetchOptions,
      url: url_
    });
  };
}

// ../../node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager2(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap2(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc2() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount2(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager2 = createNonceManager2({
  source: jsonRpc2()
});

// ../../node_modules/ox/_esm/core/version.js
var version3 = "0.1.1";

// ../../node_modules/ox/_esm/core/internal/errors.js
function getVersion3() {
  return version3;
}

// ../../node_modules/ox/_esm/core/Errors.js
var BaseError4 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x6) => typeof x6 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion3()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn3) {
    return walk2(this, fn3);
  }
};
function walk2(err, fn3) {
  if (fn3 == null ? void 0 : fn3(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk2(err.cause, fn3);
  return fn3 ? null : err;
}

// ../../node_modules/ox/_esm/core/internal/bytes.js
function assertSize3(bytes, size_) {
  if (size6(bytes) > size_)
    throw new SizeOverflowError4({
      givenSize: size6(bytes),
      maxSize: size_
    });
}
var charCodeMap2 = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase162(char) {
  if (char >= charCodeMap2.zero && char <= charCodeMap2.nine)
    return char - charCodeMap2.zero;
  if (char >= charCodeMap2.A && char <= charCodeMap2.F)
    return char - (charCodeMap2.A - 10);
  if (char >= charCodeMap2.a && char <= charCodeMap2.f)
    return char - (charCodeMap2.a - 10);
  return void 0;
}
function pad5(bytes, options = {}) {
  const { dir, size: size8 = 32 } = options;
  if (size8 === 0)
    return bytes;
  if (bytes.length > size8)
    throw new SizeExceedsPaddingSizeError4({
      size: bytes.length,
      targetSize: size8,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size8);
  for (let i6 = 0; i6 < size8; i6++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i6 : size8 - i6 - 1] = bytes[padEnd ? i6 : bytes.length - i6 - 1];
  }
  return paddedBytes;
}

// ../../node_modules/ox/_esm/core/internal/hex.js
function assertSize4(hex, size_) {
  if (size7(hex) > size_)
    throw new SizeOverflowError5({
      givenSize: size7(hex),
      maxSize: size_
    });
}
function pad6(hex_, options = {}) {
  const { dir, size: size8 = 32 } = options;
  if (size8 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size8 * 2)
    throw new SizeExceedsPaddingSizeError5({
      size: Math.ceil(hex.length / 2),
      targetSize: size8,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size8 * 2, "0")}`;
}

// ../../node_modules/ox/_esm/core/Bytes.js
var decoder2 = new TextDecoder();
var encoder3 = new TextEncoder();
function from8(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex4(value);
  return fromArray2(value);
}
function fromArray2(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex4(value, options = {}) {
  const { size: size8 } = options;
  let hex = value;
  if (size8) {
    assertSize4(value, size8);
    hex = padRight3(value, size8);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length2 = hexString.length / 2;
  const bytes = new Uint8Array(length2);
  for (let index2 = 0, j4 = 0; index2 < length2; index2++) {
    const nibbleLeft = charCodeToBase162(hexString.charCodeAt(j4++));
    const nibbleRight = charCodeToBase162(hexString.charCodeAt(j4++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError4(`Invalid byte sequence ("${hexString[j4 - 2]}${hexString[j4 - 1]}" in "${hexString}").`);
    }
    bytes[index2] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString5(value, options = {}) {
  const { size: size8 } = options;
  const bytes = encoder3.encode(value);
  if (typeof size8 === "number") {
    assertSize3(bytes, size8);
    return padRight4(bytes, size8);
  }
  return bytes;
}
function padRight4(value, size8) {
  return pad5(value, { dir: "right", size: size8 });
}
function size6(value) {
  return value.length;
}
var SizeOverflowError4 = class extends BaseError4 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError4 = class extends BaseError4 {
  constructor({ size: size8, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size8}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// ../../node_modules/ox/_esm/core/Hex.js
var encoder4 = new TextEncoder();
var hexes2 = Array.from({ length: 256 }, (_v, i6) => i6.toString(16).padStart(2, "0"));
function concat5(...values) {
  return `0x${values.reduce((acc, x6) => acc + x6.replace("0x", ""), "")}`;
}
function fromBoolean2(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize4(hex, options.size);
    return padLeft2(hex, options.size);
  }
  return hex;
}
function fromBytes4(value, options = {}) {
  let string2 = "";
  for (let i6 = 0; i6 < value.length; i6++)
    string2 += hexes2[value[i6]];
  const hex = `0x${string2}`;
  if (typeof options.size === "number") {
    assertSize4(hex, options.size);
    return padRight3(hex, options.size);
  }
  return hex;
}
function fromNumber2(value, options = {}) {
  const { signed, size: size8 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size8) {
    if (signed)
      maxValue = (1n << BigInt(size8) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size8) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError3({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size8,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size8 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size8)
    return padLeft2(hex, size8);
  return hex;
}
function fromString6(value, options = {}) {
  return fromBytes4(encoder4.encode(value), options);
}
function padLeft2(value, size8) {
  return pad6(value, { dir: "left", size: size8 });
}
function padRight3(value, size8) {
  return pad6(value, { dir: "right", size: size8 });
}
function size7(value) {
  return Math.ceil((value.length - 2) / 2);
}
var IntegerOutOfRangeError3 = class extends BaseError4 {
  constructor({ max, min, signed, size: size8, value }) {
    super(`Number \`${value}\` is not in safe${size8 ? ` ${size8 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var SizeOverflowError5 = class extends BaseError4 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError5 = class extends BaseError4 {
  constructor({ size: size8, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size8}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// ../../node_modules/ox/_esm/core/Hash.js
function keccak2564(value, options = {}) {
  const { as: as2 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from8(value));
  if (as2 === "Bytes")
    return bytes;
  return fromBytes4(bytes);
}

// ../../node_modules/ox/_esm/core/internal/lru.js
var LruMap4 = class extends Map {
  constructor(size8) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size8;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// ../../node_modules/ox/_esm/core/Caches.js
var caches2 = {
  checksum: new LruMap4(8192)
};
var checksum3 = caches2.checksum;

// ../../node_modules/ox/_esm/core/Address.js
var addressRegex2 = /^0x[a-fA-F0-9]{40}$/;
function assert2(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex2.test(value))
    throw new InvalidAddressError4({
      address: value,
      cause: new InvalidInputError2()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum4(value) !== value)
      throw new InvalidAddressError4({
        address: value,
        cause: new InvalidChecksumError2()
      });
  }
}
function checksum4(address) {
  if (checksum3.has(address))
    return checksum3.get(address);
  assert2(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2564(fromString5(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i6 = 0; i6 < 40; i6 += 2) {
    if (hash[i6 >> 1] >> 4 >= 8 && characters[i6]) {
      characters[i6] = characters[i6].toUpperCase();
    }
    if ((hash[i6 >> 1] & 15) >= 8 && characters[i6 + 1]) {
      characters[i6 + 1] = characters[i6 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum3.set(address, result);
  return result;
}
var InvalidAddressError4 = class extends BaseError4 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError2 = class extends BaseError4 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError2 = class extends BaseError4 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// ../../node_modules/ox/_esm/core/Solidity.js
var arrayRegex4 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex4 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex4 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt83 = 2n ** (8n - 1n) - 1n;
var maxInt163 = 2n ** (16n - 1n) - 1n;
var maxInt243 = 2n ** (24n - 1n) - 1n;
var maxInt323 = 2n ** (32n - 1n) - 1n;
var maxInt403 = 2n ** (40n - 1n) - 1n;
var maxInt483 = 2n ** (48n - 1n) - 1n;
var maxInt563 = 2n ** (56n - 1n) - 1n;
var maxInt643 = 2n ** (64n - 1n) - 1n;
var maxInt723 = 2n ** (72n - 1n) - 1n;
var maxInt803 = 2n ** (80n - 1n) - 1n;
var maxInt883 = 2n ** (88n - 1n) - 1n;
var maxInt963 = 2n ** (96n - 1n) - 1n;
var maxInt1043 = 2n ** (104n - 1n) - 1n;
var maxInt1123 = 2n ** (112n - 1n) - 1n;
var maxInt1203 = 2n ** (120n - 1n) - 1n;
var maxInt1283 = 2n ** (128n - 1n) - 1n;
var maxInt1363 = 2n ** (136n - 1n) - 1n;
var maxInt1443 = 2n ** (144n - 1n) - 1n;
var maxInt1523 = 2n ** (152n - 1n) - 1n;
var maxInt1603 = 2n ** (160n - 1n) - 1n;
var maxInt1683 = 2n ** (168n - 1n) - 1n;
var maxInt1763 = 2n ** (176n - 1n) - 1n;
var maxInt1843 = 2n ** (184n - 1n) - 1n;
var maxInt1923 = 2n ** (192n - 1n) - 1n;
var maxInt2003 = 2n ** (200n - 1n) - 1n;
var maxInt2083 = 2n ** (208n - 1n) - 1n;
var maxInt2163 = 2n ** (216n - 1n) - 1n;
var maxInt2243 = 2n ** (224n - 1n) - 1n;
var maxInt2323 = 2n ** (232n - 1n) - 1n;
var maxInt2403 = 2n ** (240n - 1n) - 1n;
var maxInt2483 = 2n ** (248n - 1n) - 1n;
var maxInt2563 = 2n ** (256n - 1n) - 1n;
var minInt83 = -(2n ** (8n - 1n));
var minInt163 = -(2n ** (16n - 1n));
var minInt243 = -(2n ** (24n - 1n));
var minInt323 = -(2n ** (32n - 1n));
var minInt403 = -(2n ** (40n - 1n));
var minInt483 = -(2n ** (48n - 1n));
var minInt563 = -(2n ** (56n - 1n));
var minInt643 = -(2n ** (64n - 1n));
var minInt723 = -(2n ** (72n - 1n));
var minInt803 = -(2n ** (80n - 1n));
var minInt883 = -(2n ** (88n - 1n));
var minInt963 = -(2n ** (96n - 1n));
var minInt1043 = -(2n ** (104n - 1n));
var minInt1123 = -(2n ** (112n - 1n));
var minInt1203 = -(2n ** (120n - 1n));
var minInt1283 = -(2n ** (128n - 1n));
var minInt1363 = -(2n ** (136n - 1n));
var minInt1443 = -(2n ** (144n - 1n));
var minInt1523 = -(2n ** (152n - 1n));
var minInt1603 = -(2n ** (160n - 1n));
var minInt1683 = -(2n ** (168n - 1n));
var minInt1763 = -(2n ** (176n - 1n));
var minInt1843 = -(2n ** (184n - 1n));
var minInt1923 = -(2n ** (192n - 1n));
var minInt2003 = -(2n ** (200n - 1n));
var minInt2083 = -(2n ** (208n - 1n));
var minInt2163 = -(2n ** (216n - 1n));
var minInt2243 = -(2n ** (224n - 1n));
var minInt2323 = -(2n ** (232n - 1n));
var minInt2403 = -(2n ** (240n - 1n));
var minInt2483 = -(2n ** (248n - 1n));
var minInt2563 = -(2n ** (256n - 1n));
var maxUint83 = 2n ** 8n - 1n;
var maxUint163 = 2n ** 16n - 1n;
var maxUint243 = 2n ** 24n - 1n;
var maxUint323 = 2n ** 32n - 1n;
var maxUint403 = 2n ** 40n - 1n;
var maxUint483 = 2n ** 48n - 1n;
var maxUint563 = 2n ** 56n - 1n;
var maxUint643 = 2n ** 64n - 1n;
var maxUint723 = 2n ** 72n - 1n;
var maxUint803 = 2n ** 80n - 1n;
var maxUint883 = 2n ** 88n - 1n;
var maxUint963 = 2n ** 96n - 1n;
var maxUint1043 = 2n ** 104n - 1n;
var maxUint1123 = 2n ** 112n - 1n;
var maxUint1203 = 2n ** 120n - 1n;
var maxUint1283 = 2n ** 128n - 1n;
var maxUint1363 = 2n ** 136n - 1n;
var maxUint1443 = 2n ** 144n - 1n;
var maxUint1523 = 2n ** 152n - 1n;
var maxUint1603 = 2n ** 160n - 1n;
var maxUint1683 = 2n ** 168n - 1n;
var maxUint1763 = 2n ** 176n - 1n;
var maxUint1843 = 2n ** 184n - 1n;
var maxUint1923 = 2n ** 192n - 1n;
var maxUint2003 = 2n ** 200n - 1n;
var maxUint2083 = 2n ** 208n - 1n;
var maxUint2163 = 2n ** 216n - 1n;
var maxUint2243 = 2n ** 224n - 1n;
var maxUint2323 = 2n ** 232n - 1n;
var maxUint2403 = 2n ** 240n - 1n;
var maxUint2483 = 2n ** 248n - 1n;
var maxUint2563 = 2n ** 256n - 1n;

// ../../node_modules/ox/_esm/core/internal/cursor.js
var staticCursor2 = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError2({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError4({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError2({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError2({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size8) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size8 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError2 = class extends BaseError4 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError4 = class extends BaseError4 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError2 = class extends BaseError4 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// ../../node_modules/ox/_esm/core/AbiParameters.js
function encodePacked4(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError2({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i6 = 0; i6 < types.length; i6++) {
    const type = types[i6];
    const value = values[i6];
    data.push(encodePacked4.encode(type, value));
  }
  return concat5(...data);
}
(function(encodePacked5) {
  function encode11(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert2(address);
      return padLeft2(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString6(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft2(fromBoolean2(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex4);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size8 = Number.parseInt(bits) / 8;
      return fromNumber2(value, {
        size: isArray ? 32 : size8,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex4);
    if (bytesMatch) {
      const [_type, size8] = bytesMatch;
      if (Number.parseInt(size8) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError4({
          expectedSize: Number.parseInt(size8),
          value
        });
      return padRight3(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex4);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i6 = 0; i6 < value.length; i6++) {
        data.push(encode11(childType, value[i6], true));
      }
      if (data.length === 0)
        return "0x";
      return concat5(...data);
    }
    throw new InvalidTypeError2(type);
  }
  encodePacked5.encode = encode11;
})(encodePacked4 || (encodePacked4 = {}));
var BytesSizeMismatchError4 = class extends BaseError4 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size7(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError2 = class extends BaseError4 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError2 = class extends BaseError4 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ERC7811Util.js
var ERC7811Utils = {
  /**
   * Creates a Balance object from an ERC7811 Asset object
   * @param asset - Asset object to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns Balance object
   */
  createBalance(asset, chainId) {
    const metadata = {
      name: asset.metadata["name"] || "",
      symbol: asset.metadata["symbol"] || "",
      decimals: asset.metadata["decimals"] || 0,
      value: asset.metadata["value"] || 0,
      price: asset.metadata["price"] || 0,
      iconUrl: asset.metadata["iconUrl"] || ""
    };
    return {
      name: metadata.name,
      symbol: metadata.symbol,
      chainId,
      address: asset.address === "native" ? void 0 : this.convertAddressToCAIP10Address(asset.address, chainId),
      value: metadata.value,
      price: metadata.price,
      quantity: {
        decimals: metadata.decimals.toString(),
        numeric: this.convertHexToBalance({
          hex: asset.balance,
          decimals: metadata.decimals
        })
      },
      iconUrl: metadata.iconUrl
    };
  },
  /**
   * Converts a hex string to a Balance object
   * @param hex - Hex string to convert
   * @param decimals - Number of decimals to use
   * @returns Balance object
   */
  convertHexToBalance({ hex, decimals }) {
    return formatUnits(BigInt(hex), decimals);
  },
  /**
   * Converts an address to a CAIP-10 address
   * @param address - Address to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns CAIP-10 address
   */
  convertAddressToCAIP10Address(address, chainId) {
    return `${chainId}:${address}`;
  },
  /**
   *  Creates a CAIP-2 Chain ID from a chain ID and namespace
   * @param chainId  - Chain ID in hex format
   * @param namespace  - Chain namespace
   * @returns
   */
  createCAIP2ChainId(chainId, namespace) {
    return `${namespace}:${parseInt(chainId, 16)}`;
  },
  /**
   * Gets the chain ID in hex format from a CAIP-2 Chain ID
   * @param caip2ChainId - CAIP-2 Chain ID
   * @returns Chain ID in hex format
   */
  getChainIdHexFromCAIP2ChainId(caip2ChainId) {
    const parts = caip2ChainId.split(":");
    if (parts.length < 2 || !parts[1]) {
      return "0x0";
    }
    const chainPart = parts[1];
    const parsed = parseInt(chainPart, 10);
    return isNaN(parsed) ? "0x0" : `0x${parsed.toString(16)}`;
  },
  /**
   * Checks if a response is a valid WalletGetAssetsResponse
   * @param response - The response to check
   * @returns True if the response is a valid WalletGetAssetsResponse, false otherwise
   */
  isWalletGetAssetsResponse(response) {
    if (typeof response !== "object" || response === null) {
      return false;
    }
    return Object.values(response).every((value) => Array.isArray(value) && value.every((asset) => this.isValidAsset(asset)));
  },
  /**
   * Checks if an asset object is valid.
   * @param asset - The asset object to check.
   * @returns True if the asset is valid, false otherwise.
   */
  isValidAsset(asset) {
    return typeof asset === "object" && asset !== null && typeof asset.address === "string" && typeof asset.balance === "string" && (asset.type === "ERC20" || asset.type === "NATIVE") && typeof asset.metadata === "object" && asset.metadata !== null && typeof asset.metadata["name"] === "string" && typeof asset.metadata["symbol"] === "string" && typeof asset.metadata["decimals"] === "number" && typeof asset.metadata["price"] === "number" && typeof asset.metadata["iconUrl"] === "string";
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SendApiUtil.js
var SendApiUtil = {
  async getMyTokensWithBalance(forceUpdate) {
    const address = AccountController.state.address;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!address || !caipNetwork) {
      return [];
    }
    if (caipNetwork.chainNamespace === "eip155") {
      const eip155Balances = await this.getEIP155Balances(address, caipNetwork);
      if (eip155Balances) {
        return this.filterLowQualityTokens(eip155Balances);
      }
    }
    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);
    return this.filterLowQualityTokens(response.balances);
  },
  async getEIP155Balances(address, caipNetwork) {
    var _a, _b;
    try {
      const chainIdHex = ERC7811Utils.getChainIdHexFromCAIP2ChainId(caipNetwork.caipNetworkId);
      const walletCapabilities = await ConnectionController.getCapabilities(address);
      if (!((_b = (_a = walletCapabilities == null ? void 0 : walletCapabilities[chainIdHex]) == null ? void 0 : _a["assetDiscovery"]) == null ? void 0 : _b.supported)) {
        return null;
      }
      const walletGetAssetsResponse = await ConnectionController.walletGetAssets({
        account: address,
        chainFilter: [chainIdHex]
      });
      if (!ERC7811Utils.isWalletGetAssetsResponse(walletGetAssetsResponse)) {
        return null;
      }
      const assets = walletGetAssetsResponse[chainIdHex] || [];
      return assets.map((asset) => ERC7811Utils.createBalance(asset, caipNetwork.caipNetworkId));
    } catch (error) {
      return null;
    }
  },
  /**
   * The 1Inch API includes many low-quality tokens in the balance response,
   * which appear inconsistently. This filter prevents them from being displayed.
   */
  filterLowQualityTokens(balances) {
    return balances.filter((balance) => balance.quantity.decimals !== "0");
  },
  mapBalancesToSwapTokens(balances) {
    return (balances == null ? void 0 : balances.map((token) => ({
      ...token,
      address: (token == null ? void 0 : token.address) ? token.address : ChainController.getActiveNetworkTokenAddress(),
      decimals: parseInt(token.quantity.decimals, 10),
      logoUri: token.iconUrl,
      eip2612: false
    }))) || [];
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js
var state15 = proxy({
  tokenBalances: [],
  loading: false
});
var SendController = {
  state: state15,
  subscribe(callback) {
    return subscribe(state15, () => callback(state15));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state15, key, callback);
  },
  setToken(token) {
    if (token) {
      state15.token = ref(token);
    }
  },
  setTokenAmount(sendTokenAmount) {
    state15.sendTokenAmount = sendTokenAmount;
  },
  setReceiverAddress(receiverAddress) {
    state15.receiverAddress = receiverAddress;
  },
  setReceiverProfileImageUrl(receiverProfileImageUrl) {
    state15.receiverProfileImageUrl = receiverProfileImageUrl;
  },
  setReceiverProfileName(receiverProfileName) {
    state15.receiverProfileName = receiverProfileName;
  },
  setGasPrice(gasPrice) {
    state15.gasPrice = gasPrice;
  },
  setGasPriceInUsd(gasPriceInUSD) {
    state15.gasPriceInUSD = gasPriceInUSD;
  },
  setNetworkBalanceInUsd(networkBalanceInUSD) {
    state15.networkBalanceInUSD = networkBalanceInUSD;
  },
  setLoading(loading) {
    state15.loading = loading;
  },
  sendToken() {
    var _a;
    switch ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.chainNamespace) {
      case "eip155":
        this.sendEvmToken();
        return;
      case "solana":
        this.sendSolanaToken();
        return;
      default:
        throw new Error("Unsupported chain");
    }
  },
  sendEvmToken() {
    var _a, _b, _c, _d, _e6;
    if (((_a = this.state.token) == null ? void 0 : _a.address) && this.state.sendTokenAmount && this.state.receiverAddress) {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: this.state.token.address,
          amount: this.state.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      this.sendERC20Token({
        receiverAddress: this.state.receiverAddress,
        tokenAddress: this.state.token.address,
        sendTokenAmount: this.state.sendTokenAmount,
        decimals: this.state.token.quantity.decimals
      });
    } else if (this.state.receiverAddress && this.state.sendTokenAmount && this.state.gasPrice && ((_c = this.state.token) == null ? void 0 : _c.quantity.decimals)) {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: (_d = this.state.token) == null ? void 0 : _d.symbol,
          amount: this.state.sendTokenAmount,
          network: ((_e6 = ChainController.state.activeCaipNetwork) == null ? void 0 : _e6.caipNetworkId) || ""
        }
      });
      this.sendNativeToken({
        receiverAddress: this.state.receiverAddress,
        sendTokenAmount: this.state.sendTokenAmount,
        gasPrice: this.state.gasPrice,
        decimals: this.state.token.quantity.decimals
      });
    }
  },
  async fetchTokenBalance(onError) {
    var _a, _b;
    state15.loading = true;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const chain = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state15.lastRetry && !CoreHelperUtil.isAllowedRetry(state15.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state15.loading = false;
      return [];
    }
    try {
      if (address && chainId && chain) {
        const balances = await SendApiUtil.getMyTokensWithBalance();
        state15.tokenBalances = balances;
        state15.lastRetry = void 0;
        return balances;
      }
    } catch (error) {
      state15.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state15.loading = false;
    }
    return [];
  },
  fetchNetworkBalance() {
    if (state15.tokenBalances.length === 0) {
      return;
    }
    const networkTokenBalances = SendApiUtil.mapBalancesToSwapTokens(state15.tokenBalances);
    if (!networkTokenBalances) {
      return;
    }
    const networkToken = networkTokenBalances.find((token) => token.address === ChainController.getActiveNetworkTokenAddress());
    if (!networkToken) {
      return;
    }
    state15.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  hasInsufficientGasFunds() {
    let isInsufficientNetworkTokenForGas = true;
    if (AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT) {
      isInsufficientNetworkTokenForGas = false;
    } else if (state15.networkBalanceInUSD) {
      isInsufficientNetworkTokenForGas = this.isInsufficientNetworkTokenForGas(state15.networkBalanceInUSD, state15.gasPriceInUSD);
    }
    return isInsufficientNetworkTokenForGas;
  },
  async sendNativeToken(params) {
    var _a, _b, _c, _d;
    RouterController.pushTransactionStack({
      view: "Account",
      goBack: false
    });
    const to3 = params.receiverAddress;
    const address = AccountController.state.address;
    const value = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    const data = "0x";
    try {
      await ConnectionController.sendTransaction({
        chainNamespace: "eip155",
        to: to3,
        address,
        data,
        value: value ?? BigInt(0),
        gasPrice: params.gasPrice
      });
      SnackController.showSuccess("Transaction started");
      EventsController.sendEvent({
        type: "track",
        event: "SEND_SUCCESS",
        properties: {
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: ((_a = this.state.token) == null ? void 0 : _a.symbol) || "",
          amount: params.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      this.resetSend();
    } catch (error) {
      console.error("SendController:sendERC20Token - failed to send native token", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      EventsController.sendEvent({
        type: "track",
        event: "SEND_ERROR",
        properties: {
          message: errorMessage,
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: ((_c = this.state.token) == null ? void 0 : _c.symbol) || "",
          amount: params.sendTokenAmount,
          network: ((_d = ChainController.state.activeCaipNetwork) == null ? void 0 : _d.caipNetworkId) || ""
        }
      });
      SnackController.showError("Something went wrong");
    }
  },
  async sendERC20Token(params) {
    var _a, _b;
    RouterController.pushTransactionStack({
      view: "Account",
      goBack: false
    });
    const amount = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    try {
      if (AccountController.state.address && params.sendTokenAmount && params.receiverAddress && params.tokenAddress) {
        const tokenAddress = CoreHelperUtil.getPlainAddress(params.tokenAddress);
        await ConnectionController.writeContract({
          fromAddress: AccountController.state.address,
          tokenAddress,
          args: [params.receiverAddress, amount ?? BigInt(0)],
          method: "transfer",
          abi: ContractUtil.getERC20Abi(tokenAddress),
          chainNamespace: "eip155"
        });
        SnackController.showSuccess("Transaction started");
        this.resetSend();
      }
    } catch (error) {
      console.error("SendController:sendERC20Token - failed to send erc20 token", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      EventsController.sendEvent({
        type: "track",
        event: "SEND_ERROR",
        properties: {
          message: errorMessage,
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: ((_a = this.state.token) == null ? void 0 : _a.symbol) || "",
          amount: params.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      SnackController.showError("Something went wrong");
    }
  },
  sendSolanaToken() {
    if (!this.state.sendTokenAmount || !this.state.receiverAddress) {
      SnackController.showError("Please enter a valid amount and receiver address");
      return;
    }
    RouterController.pushTransactionStack({
      view: "Account",
      goBack: false
    });
    ConnectionController.sendTransaction({
      chainNamespace: "solana",
      to: this.state.receiverAddress,
      value: this.state.sendTokenAmount
    }).then(() => {
      this.resetSend();
      AccountController.fetchTokenBalance();
    }).catch((error) => {
      SnackController.showError("Failed to send transaction. Please try again.");
      console.error("SendController:sendToken - failed to send solana transaction", error);
    });
  },
  resetSend() {
    state15.token = void 0;
    state15.sendTokenAmount = void 0;
    state15.receiverAddress = void 0;
    state15.receiverProfileImageUrl = void 0;
    state15.receiverProfileName = void 0;
    state15.loading = false;
    state15.tokenBalances = [];
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js
var accountState = {
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  allAccounts: [],
  user: void 0
};
var networkState = {
  caipNetwork: void 0,
  supportsAllNetworks: true,
  smartAccountEnabledNetworks: []
};
var state16 = proxy({
  chains: proxyMap(),
  activeCaipAddress: void 0,
  activeChain: void 0,
  activeCaipNetwork: void 0,
  noAdapters: false,
  universalAdapter: {
    networkControllerClient: void 0,
    connectionControllerClient: void 0
  },
  isSwitchingNamespace: false
});
var ChainController = {
  state: state16,
  subscribe(callback) {
    return subscribe(state16, () => {
      callback(state16);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state16, key, callback);
  },
  subscribeChainProp(property, callback, chain) {
    let prev = void 0;
    return subscribe(state16.chains, () => {
      var _a;
      const activeChain = chain || state16.activeChain;
      if (activeChain) {
        const nextValue = (_a = state16.chains.get(activeChain)) == null ? void 0 : _a[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    });
  },
  initialize(adapters, caipNetworks, clients) {
    const { chainId: activeChainId, namespace: activeNamespace } = StorageUtil.getActiveNetworkProps();
    const activeCaipNetwork = caipNetworks == null ? void 0 : caipNetworks.find((network) => network.id.toString() === (activeChainId == null ? void 0 : activeChainId.toString()));
    const defaultAdapter = adapters.find((adapter) => (adapter == null ? void 0 : adapter.namespace) === activeNamespace);
    const adapterToActivate = defaultAdapter || (adapters == null ? void 0 : adapters[0]);
    const namespaces = /* @__PURE__ */ new Set([...(caipNetworks == null ? void 0 : caipNetworks.map((network) => network.chainNamespace)) ?? []]);
    if ((adapters == null ? void 0 : adapters.length) === 0 || !adapterToActivate) {
      state16.noAdapters = true;
    }
    if (!state16.noAdapters) {
      state16.activeChain = adapterToActivate == null ? void 0 : adapterToActivate.namespace;
      state16.activeCaipNetwork = activeCaipNetwork;
      this.setChainNetworkData(adapterToActivate == null ? void 0 : adapterToActivate.namespace, { caipNetwork: activeCaipNetwork });
      if (state16.activeChain) {
        PublicStateController.set({ activeChain: adapterToActivate == null ? void 0 : adapterToActivate.namespace });
      }
    }
    namespaces.forEach((namespace) => {
      const namespaceNetworks = caipNetworks == null ? void 0 : caipNetworks.filter((network) => network.chainNamespace === namespace);
      ChainController.state.chains.set(namespace, {
        namespace,
        networkState: proxy({
          ...networkState,
          caipNetwork: namespaceNetworks == null ? void 0 : namespaceNetworks[0]
        }),
        accountState: proxy(accountState),
        caipNetworks: namespaceNetworks ?? [],
        ...clients
      });
      this.setRequestedCaipNetworks(namespaceNetworks ?? [], namespace);
    });
  },
  removeAdapter(namespace) {
    var _a, _b;
    if (state16.activeChain === namespace) {
      const nextAdapter = Array.from(state16.chains.entries()).find(([chainNamespace]) => chainNamespace !== namespace);
      if (nextAdapter) {
        const caipNetwork = (_b = (_a = nextAdapter[1]) == null ? void 0 : _a.caipNetworks) == null ? void 0 : _b[0];
        if (caipNetwork) {
          this.setActiveCaipNetwork(caipNetwork);
        }
      }
    }
    state16.chains.delete(namespace);
  },
  addAdapter(adapter, { networkControllerClient, connectionControllerClient }, caipNetworks) {
    state16.chains.set(adapter.namespace, {
      namespace: adapter.namespace,
      networkState: {
        ...networkState,
        caipNetwork: caipNetworks[0]
      },
      accountState,
      caipNetworks,
      connectionControllerClient,
      networkControllerClient
    });
    this.setRequestedCaipNetworks((caipNetworks == null ? void 0 : caipNetworks.filter((caipNetwork) => caipNetwork.chainNamespace === adapter.namespace)) ?? [], adapter.namespace);
  },
  addNetwork(network) {
    var _a;
    const chainAdapter = state16.chains.get(network.chainNamespace);
    if (chainAdapter) {
      const newNetworks = [...chainAdapter.caipNetworks || []];
      if (!((_a = chainAdapter.caipNetworks) == null ? void 0 : _a.find((caipNetwork) => caipNetwork.id === network.id))) {
        newNetworks.push(network);
      }
      state16.chains.set(network.chainNamespace, { ...chainAdapter, caipNetworks: newNetworks });
      this.setRequestedCaipNetworks(newNetworks, network.chainNamespace);
    }
  },
  removeNetwork(namespace, networkId) {
    var _a, _b, _c;
    const chainAdapter = state16.chains.get(namespace);
    if (chainAdapter) {
      const isActiveNetwork = ((_a = state16.activeCaipNetwork) == null ? void 0 : _a.id) === networkId;
      const newCaipNetworksOfAdapter = [
        ...((_b = chainAdapter.caipNetworks) == null ? void 0 : _b.filter((network) => network.id !== networkId)) || []
      ];
      if (isActiveNetwork && ((_c = chainAdapter == null ? void 0 : chainAdapter.caipNetworks) == null ? void 0 : _c[0])) {
        this.setActiveCaipNetwork(chainAdapter.caipNetworks[0]);
      }
      state16.chains.set(namespace, { ...chainAdapter, caipNetworks: newCaipNetworksOfAdapter });
      this.setRequestedCaipNetworks(newCaipNetworksOfAdapter || [], namespace);
    }
  },
  setAdapterNetworkState(chain, props) {
    const chainAdapter = state16.chains.get(chain);
    if (chainAdapter) {
      chainAdapter.networkState = {
        ...chainAdapter.networkState || networkState,
        ...props
      };
      state16.chains.set(chain, chainAdapter);
    }
  },
  setChainAccountData(chain, accountProps, _unknown = true) {
    if (!chain) {
      throw new Error("Chain is required to update chain account data");
    }
    const chainAdapter = state16.chains.get(chain);
    if (chainAdapter) {
      const newAccountState = { ...chainAdapter.accountState || accountState, ...accountProps };
      state16.chains.set(chain, { ...chainAdapter, accountState: newAccountState });
      if (state16.chains.size === 1 || state16.activeChain === chain) {
        if (accountProps.caipAddress) {
          state16.activeCaipAddress = accountProps.caipAddress;
        }
        AccountController.replaceState(newAccountState);
      }
    }
  },
  setChainNetworkData(chain, networkProps) {
    if (!chain) {
      return;
    }
    const chainAdapter = state16.chains.get(chain);
    if (chainAdapter) {
      const newNetworkState = { ...chainAdapter.networkState || networkState, ...networkProps };
      state16.chains.set(chain, { ...chainAdapter, networkState: newNetworkState });
    }
  },
  // eslint-disable-next-line max-params
  setAccountProp(prop, value, chain, replaceState = true) {
    this.setChainAccountData(chain, { [prop]: value }, replaceState);
    if (prop === "status" && value === "disconnected" && chain) {
      ConnectorController.removeConnectorId(chain);
    }
  },
  setActiveNamespace(chain) {
    var _a, _b;
    state16.activeChain = chain;
    const newAdapter = chain ? state16.chains.get(chain) : void 0;
    const caipNetwork = (_a = newAdapter == null ? void 0 : newAdapter.networkState) == null ? void 0 : _a.caipNetwork;
    if ((caipNetwork == null ? void 0 : caipNetwork.id) && chain) {
      state16.activeCaipAddress = (_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.caipAddress;
      state16.activeCaipNetwork = caipNetwork;
      this.setChainNetworkData(chain, { caipNetwork });
      StorageUtil.setActiveCaipNetworkId(caipNetwork == null ? void 0 : caipNetwork.caipNetworkId);
      PublicStateController.set({
        activeChain: chain,
        selectedNetworkId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
      });
    }
  },
  setActiveCaipNetwork(caipNetwork) {
    var _a, _b, _c;
    if (!caipNetwork) {
      return;
    }
    if (state16.activeChain !== caipNetwork.chainNamespace) {
      this.setIsSwitchingNamespace(true);
    }
    const newAdapter = state16.chains.get(caipNetwork.chainNamespace);
    state16.activeChain = caipNetwork.chainNamespace;
    state16.activeCaipNetwork = caipNetwork;
    this.setChainNetworkData(caipNetwork.chainNamespace, { caipNetwork });
    if ((_a = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _a.address) {
      state16.activeCaipAddress = `${caipNetwork.chainNamespace}:${caipNetwork.id}:${(_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.address}`;
    } else {
      state16.activeCaipAddress = void 0;
    }
    this.setAccountProp("caipAddress", state16.activeCaipAddress, caipNetwork.chainNamespace);
    if (newAdapter) {
      AccountController.replaceState(newAdapter.accountState);
    }
    SendController.resetSend();
    PublicStateController.set({
      activeChain: state16.activeChain,
      selectedNetworkId: (_c = state16.activeCaipNetwork) == null ? void 0 : _c.caipNetworkId
    });
    StorageUtil.setActiveCaipNetworkId(caipNetwork.caipNetworkId);
    const isSupported = this.checkIfSupportedNetwork(caipNetwork.chainNamespace);
    if (!isSupported && !OptionsController.state.allowUnsupportedChain && !ConnectionController.state.wcBasic) {
      this.showUnsupportedChainUI();
    }
  },
  addCaipNetwork(caipNetwork) {
    var _a;
    if (!caipNetwork) {
      return;
    }
    const chain = state16.chains.get(caipNetwork.chainNamespace);
    if (chain) {
      (_a = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _a.push(caipNetwork);
    }
  },
  async switchActiveNamespace(namespace) {
    var _a;
    if (!namespace) {
      return;
    }
    const isDifferentChain = namespace !== ChainController.state.activeChain;
    const caipNetworkOfNamespace = (_a = ChainController.getNetworkData(namespace)) == null ? void 0 : _a.caipNetwork;
    const firstNetworkWithChain = ChainController.getCaipNetworkByNamespace(namespace, caipNetworkOfNamespace == null ? void 0 : caipNetworkOfNamespace.id);
    if (isDifferentChain && firstNetworkWithChain) {
      await ChainController.switchActiveNetwork(firstNetworkWithChain);
    }
  },
  async switchActiveNetwork(network) {
    var _a;
    const activeAdapter = ChainController.state.chains.get(ChainController.state.activeChain);
    const unsupportedNetwork = !((_a = activeAdapter == null ? void 0 : activeAdapter.caipNetworks) == null ? void 0 : _a.some((caipNetwork) => {
      var _a2;
      return caipNetwork.id === ((_a2 = state16.activeCaipNetwork) == null ? void 0 : _a2.id);
    }));
    if (unsupportedNetwork) {
      RouterController.goBack();
    }
    const networkControllerClient = this.getNetworkControllerClient(network.chainNamespace);
    if (networkControllerClient) {
      await networkControllerClient.switchCaipNetwork(network);
      EventsController.sendEvent({
        type: "track",
        event: "SWITCH_NETWORK",
        properties: { network: network.caipNetworkId }
      });
    }
  },
  getNetworkControllerClient(chainNamespace) {
    const chain = chainNamespace || state16.activeChain;
    const chainAdapter = state16.chains.get(chain);
    if (!chainAdapter) {
      throw new Error("Chain adapter not found");
    }
    if (!chainAdapter.networkControllerClient) {
      throw new Error("NetworkController client not set");
    }
    return chainAdapter.networkControllerClient;
  },
  getConnectionControllerClient(_chain) {
    const chain = _chain || state16.activeChain;
    if (!chain) {
      throw new Error("Chain is required to get connection controller client");
    }
    const chainAdapter = state16.chains.get(chain);
    if (!(chainAdapter == null ? void 0 : chainAdapter.connectionControllerClient)) {
      throw new Error("ConnectionController client not set");
    }
    return chainAdapter.connectionControllerClient;
  },
  getAccountProp(key, _chain) {
    var _a;
    let chain = state16.activeChain;
    if (_chain) {
      chain = _chain;
    }
    if (!chain) {
      return void 0;
    }
    const chainAccountState = (_a = state16.chains.get(chain)) == null ? void 0 : _a.accountState;
    if (!chainAccountState) {
      return void 0;
    }
    return chainAccountState[key];
  },
  getNetworkProp(key, namespace) {
    var _a;
    const chainNetworkState = (_a = state16.chains.get(namespace)) == null ? void 0 : _a.networkState;
    if (!chainNetworkState) {
      return void 0;
    }
    return chainNetworkState[key];
  },
  getRequestedCaipNetworks(chainToFilter) {
    const adapter = state16.chains.get(chainToFilter);
    const { approvedCaipNetworkIds = [], requestedCaipNetworks = [] } = (adapter == null ? void 0 : adapter.networkState) || {};
    const sortedNetworks = CoreHelperUtil.sortRequestedNetworks(approvedCaipNetworkIds, requestedCaipNetworks);
    return sortedNetworks;
  },
  getAllRequestedCaipNetworks() {
    const requestedCaipNetworks = [];
    state16.chains.forEach((chainAdapter) => {
      const caipNetworks = this.getRequestedCaipNetworks(chainAdapter.namespace);
      requestedCaipNetworks.push(...caipNetworks);
    });
    return requestedCaipNetworks;
  },
  setRequestedCaipNetworks(requestedCaipNetworks, chain) {
    this.setAdapterNetworkState(chain, { requestedCaipNetworks });
  },
  getAllApprovedCaipNetworkIds() {
    const approvedCaipNetworkIds = [];
    state16.chains.forEach((chainAdapter) => {
      const approvedIds = this.getApprovedCaipNetworkIds(chainAdapter.namespace);
      approvedCaipNetworkIds.push(...approvedIds);
    });
    return approvedCaipNetworkIds;
  },
  getActiveCaipNetwork() {
    return state16.activeCaipNetwork;
  },
  getActiveCaipAddress() {
    return state16.activeCaipAddress;
  },
  getApprovedCaipNetworkIds(namespace) {
    var _a;
    const adapter = state16.chains.get(namespace);
    const approvedCaipNetworkIds = ((_a = adapter == null ? void 0 : adapter.networkState) == null ? void 0 : _a.approvedCaipNetworkIds) || [];
    return approvedCaipNetworkIds;
  },
  async setApprovedCaipNetworksData(namespace) {
    const networkControllerClient = this.getNetworkControllerClient();
    const data = await (networkControllerClient == null ? void 0 : networkControllerClient.getApprovedCaipNetworksData());
    this.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: data == null ? void 0 : data.approvedCaipNetworkIds,
      supportsAllNetworks: data == null ? void 0 : data.supportsAllNetworks
    });
  },
  checkIfSupportedNetwork(namespace, caipNetwork) {
    const activeCaipNetwork = caipNetwork || state16.activeCaipNetwork;
    const requestedCaipNetworks = this.getRequestedCaipNetworks(namespace);
    if (!requestedCaipNetworks.length) {
      return true;
    }
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === (activeCaipNetwork == null ? void 0 : activeCaipNetwork.id));
  },
  checkIfSupportedChainId(chainId) {
    if (!state16.activeChain) {
      return true;
    }
    const requestedCaipNetworks = this.getRequestedCaipNetworks(state16.activeChain);
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === chainId);
  },
  // Smart Account Network Handlers
  setSmartAccountEnabledNetworks(smartAccountEnabledNetworks, chain) {
    this.setAdapterNetworkState(chain, { smartAccountEnabledNetworks });
  },
  checkIfSmartAccountEnabled() {
    var _a;
    const networkId = NetworkUtil.caipNetworkIdToNumber((_a = state16.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    const activeChain = state16.activeChain;
    if (!activeChain || !networkId) {
      return false;
    }
    const smartAccountEnabledNetworks = this.getNetworkProp("smartAccountEnabledNetworks", activeChain);
    return Boolean(smartAccountEnabledNetworks == null ? void 0 : smartAccountEnabledNetworks.includes(Number(networkId)));
  },
  getActiveNetworkTokenAddress() {
    var _a, _b;
    const namespace = ((_a = state16.activeCaipNetwork) == null ? void 0 : _a.chainNamespace) || "eip155";
    const chainId = ((_b = state16.activeCaipNetwork) == null ? void 0 : _b.id) || 1;
    const address = ConstantsUtil2.NATIVE_TOKEN_ADDRESS[namespace];
    return `${namespace}:${chainId}:${address}`;
  },
  showUnsupportedChainUI() {
    ModalController.open({ view: "UnsupportedChain" });
  },
  checkIfNamesSupported() {
    const activeCaipNetwork = state16.activeCaipNetwork;
    return Boolean((activeCaipNetwork == null ? void 0 : activeCaipNetwork.chainNamespace) && ConstantsUtil2.NAMES_SUPPORTED_CHAIN_NAMESPACES.includes(activeCaipNetwork.chainNamespace));
  },
  resetNetwork(namespace) {
    this.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: void 0,
      supportsAllNetworks: true,
      smartAccountEnabledNetworks: []
    });
  },
  resetAccount(chain) {
    const chainToWrite = chain;
    if (!chainToWrite) {
      throw new Error("Chain is required to set account prop");
    }
    state16.activeCaipAddress = void 0;
    this.setChainAccountData(chainToWrite, {
      smartAccountDeployed: false,
      currentTab: 0,
      caipAddress: void 0,
      address: void 0,
      balance: void 0,
      balanceSymbol: void 0,
      profileName: void 0,
      profileImage: void 0,
      addressExplorerUrl: void 0,
      tokenBalance: [],
      connectedWalletInfo: void 0,
      preferredAccountType: void 0,
      socialProvider: void 0,
      socialWindow: void 0,
      farcasterUrl: void 0,
      allAccounts: [],
      user: void 0,
      status: "disconnected"
    });
    ConnectorController.removeConnectorId(chainToWrite);
  },
  async disconnect(namespace) {
    const chainsToDisconnect = getChainsToDisconnect(namespace);
    try {
      SendController.resetSend();
      const disconnectResults = await Promise.allSettled(chainsToDisconnect.map(async ([ns, adapter]) => {
        var _a;
        try {
          const { caipAddress } = this.getAccountData(ns) || {};
          if (caipAddress && ((_a = adapter.connectionControllerClient) == null ? void 0 : _a.disconnect)) {
            await adapter.connectionControllerClient.disconnect(ns);
          }
          this.resetAccount(ns);
          this.resetNetwork(ns);
        } catch (error) {
          throw new Error(`Failed to disconnect chain ${ns}: ${error.message}`);
        }
      }));
      ConnectionController.resetWcConnection();
      const failures = disconnectResults.filter((result) => result.status === "rejected");
      if (failures.length > 0) {
        throw new Error(failures.map((f9) => f9.reason.message).join(", "));
      }
      StorageUtil.deleteConnectedSocialProvider();
      if (namespace) {
        ConnectorController.removeConnectorId(namespace);
      } else {
        ConnectorController.resetConnectorIds();
      }
      EventsController.sendEvent({
        type: "track",
        event: "DISCONNECT_SUCCESS",
        properties: {
          namespace: namespace || "all"
        }
      });
    } catch (error) {
      console.error(error.message || "Failed to disconnect chains");
      EventsController.sendEvent({
        type: "track",
        event: "DISCONNECT_ERROR",
        properties: {
          message: error.message || "Failed to disconnect chains"
        }
      });
    }
  },
  setIsSwitchingNamespace(isSwitchingNamespace) {
    state16.isSwitchingNamespace = isSwitchingNamespace;
  },
  getFirstCaipNetworkSupportsAuthConnector() {
    var _a, _b;
    const availableChains = [];
    let firstCaipNetwork = void 0;
    state16.chains.forEach((chain) => {
      if (ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((ns) => ns === chain.namespace)) {
        if (chain.namespace) {
          availableChains.push(chain.namespace);
        }
      }
    });
    if (availableChains.length > 0) {
      const firstAvailableChain = availableChains[0];
      firstCaipNetwork = firstAvailableChain ? (_b = (_a = state16.chains.get(firstAvailableChain)) == null ? void 0 : _a.caipNetworks) == null ? void 0 : _b[0] : void 0;
      return firstCaipNetwork;
    }
    return void 0;
  },
  getAccountData(chainNamespace) {
    var _a;
    if (!chainNamespace) {
      return AccountController.state;
    }
    return (_a = ChainController.state.chains.get(chainNamespace)) == null ? void 0 : _a.accountState;
  },
  getNetworkData(chainNamespace) {
    var _a;
    const namespace = chainNamespace || state16.activeChain;
    if (!namespace) {
      return void 0;
    }
    return (_a = ChainController.state.chains.get(namespace)) == null ? void 0 : _a.networkState;
  },
  getCaipNetworkByNamespace(chainNamespace, chainId) {
    var _a, _b, _c;
    if (!chainNamespace) {
      return void 0;
    }
    const chain = ChainController.state.chains.get(chainNamespace);
    const byChainId = (_a = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _a.find((network) => network.id === chainId);
    if (byChainId) {
      return byChainId;
    }
    return ((_b = chain == null ? void 0 : chain.networkState) == null ? void 0 : _b.caipNetwork) || ((_c = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _c[0]);
  },
  /**
   * Get the requested CaipNetwork IDs for a given namespace. If namespace is not provided, all requested CaipNetwork IDs will be returned
   * @param namespace - The namespace to get the requested CaipNetwork IDs for
   * @returns The requested CaipNetwork IDs
   */
  getRequestedCaipNetworkIds() {
    const namespace = ConnectorController.state.filterByNamespace;
    const chains = namespace ? [state16.chains.get(namespace)] : Array.from(state16.chains.values());
    return chains.flatMap((chain) => (chain == null ? void 0 : chain.caipNetworks) || []).map((caipNetwork) => caipNetwork.caipNetworkId);
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js
var DEFAULT_OPTIONS = {
  purchaseCurrencies: [
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "USD Coin",
      symbol: "USDC",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    },
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "Ether",
      symbol: "ETH",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    }
  ],
  paymentCurrencies: [
    {
      id: "USD",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    },
    {
      id: "EUR",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    }
  ]
};
var baseUrl3 = CoreHelperUtil.getBlockchainApiUrl();
var state17 = proxy({
  clientId: null,
  api: new FetchUtil({ baseUrl: baseUrl3, clientId: null }),
  supportedChains: { http: [], ws: [] }
});
var BlockchainApiController = {
  state: state17,
  async get(request) {
    const { st: st3, sv } = BlockchainApiController.getSdkProperties();
    const projectId = OptionsController.state.projectId;
    const params = {
      ...request.params || {},
      st: st3,
      sv,
      projectId
    };
    return state17.api.get({
      ...request,
      params
    });
  },
  getSdkProperties() {
    const { sdkType, sdkVersion } = OptionsController.state;
    return {
      st: sdkType || "unknown",
      sv: sdkVersion || "unknown"
    };
  },
  async isNetworkSupported(networkId) {
    if (!networkId) {
      return false;
    }
    try {
      if (!state17.supportedChains.http.length) {
        await BlockchainApiController.getSupportedNetworks();
      }
    } catch (e3) {
      return false;
    }
    return state17.supportedChains.http.includes(networkId);
  },
  async getSupportedNetworks() {
    const supportedChains = await BlockchainApiController.get({
      path: "v1/supported-chains"
    });
    state17.supportedChains = supportedChains;
    return supportedChains;
  },
  async fetchIdentity({ address, caipNetworkId }) {
    const isSupported = await BlockchainApiController.isNetworkSupported(caipNetworkId);
    if (!isSupported) {
      return { avatar: "", name: "" };
    }
    const identityCache = StorageUtil.getIdentityFromCacheForAddress(address);
    if (identityCache) {
      return identityCache;
    }
    const result = await BlockchainApiController.get({
      path: `/v1/identity/${address}`,
      params: {
        sender: ChainController.state.activeCaipAddress ? CoreHelperUtil.getPlainAddress(ChainController.state.activeCaipAddress) : void 0
      }
    });
    StorageUtil.updateIdentityCache({
      address,
      identity: result,
      timestamp: Date.now()
    });
    return result;
  },
  async fetchTransactions({ account, cursor, onramp, signal, cache, chainId }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { data: [], next: void 0 };
    }
    return BlockchainApiController.get({
      path: `/v1/account/${account}/history`,
      params: {
        cursor,
        onramp,
        chainId
      },
      signal,
      cache
    });
  },
  async fetchSwapQuote({ amount, userAddress, from: from13, to: to3, gasPrice }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { quotes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/quotes`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        amount,
        userAddress,
        from: from13,
        to: to3,
        gasPrice
      }
    });
  },
  async fetchSwapTokens({ chainId }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { tokens: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/tokens`,
      params: { chainId }
    });
  },
  async fetchTokenPrice({ addresses }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { fungibles: [] };
    }
    return state17.api.post({
      path: "/v1/fungible/price",
      body: {
        currency: "usd",
        addresses,
        projectId: OptionsController.state.projectId
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchSwapAllowance({ tokenAddress, userAddress }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { allowance: "0" };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/allowance`,
      params: {
        tokenAddress,
        userAddress
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchGasPrice({ chainId }) {
    var _a;
    const { st: st3, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Gas Price");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/gas-price`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        chainId,
        st: st3,
        sv
      }
    });
  },
  async generateSwapCalldata({ amount, from: from13, to: to3, userAddress }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return state17.api.post({
      path: "/v1/convert/build-transaction",
      headers: {
        "Content-Type": "application/json"
      },
      body: {
        amount,
        eip155: {
          slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE
        },
        projectId: OptionsController.state.projectId,
        from: from13,
        to: to3,
        userAddress
      }
    });
  },
  async generateApproveCalldata({ from: from13, to: to3, userAddress }) {
    var _a;
    const { st: st3, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/build-approve`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        userAddress,
        from: from13,
        to: to3,
        st: st3,
        sv
      }
    });
  },
  async getBalance(address, chainId, forceUpdate) {
    var _a;
    const { st: st3, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      SnackController.showError("Token Balance Unavailable");
      return { balances: [] };
    }
    const caipAddress = `${chainId}:${address}`;
    const cachedBalance = StorageUtil.getBalanceCacheForCaipAddress(caipAddress);
    if (cachedBalance) {
      return cachedBalance;
    }
    const balance = await BlockchainApiController.get({
      path: `/v1/account/${address}/balance`,
      params: {
        currency: "usd",
        chainId,
        forceUpdate,
        st: st3,
        sv
      }
    });
    StorageUtil.updateBalanceCache({
      caipAddress,
      balance,
      timestamp: Date.now()
    });
    return balance;
  },
  async lookupEnsName(name2) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { addresses: {}, attributes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/account/${name2}`,
      params: { apiVersion: "2" }
    });
  },
  async reverseLookupEnsName({ address }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/profile/reverse/${address}`,
      params: {
        sender: AccountController.state.address,
        apiVersion: "2"
      }
    });
  },
  async getEnsNameSuggestions(name2) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { suggestions: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/suggestions/${name2}`,
      params: { zone: "reown.id" }
    });
  },
  async registerEnsName({ coinType, address, message, signature }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state17.api.post({
      path: `/v1/profile/account`,
      body: { coin_type: coinType, address, message, signature },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async generateOnRampURL({ destinationWallets, partnerUserId, defaultNetwork, purchaseAmount, paymentAmount }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return "";
    }
    const response = await state17.api.post({
      path: `/v1/generators/onrampurl`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        destinationWallets,
        defaultNetwork,
        partnerUserId,
        defaultExperience: "buy",
        presetCryptoAmount: purchaseAmount,
        presetFiatAmount: paymentAmount
      }
    });
    return response.url;
  },
  async getOnrampOptions() {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { paymentCurrencies: [], purchaseCurrencies: [] };
    }
    try {
      const response = await BlockchainApiController.get({
        path: `/v1/onramp/options`
      });
      return response;
    } catch (e3) {
      return DEFAULT_OPTIONS;
    }
  },
  async getOnrampQuote({ purchaseCurrency, paymentCurrency, amount, network }) {
    var _a;
    try {
      const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
      if (!isSupported) {
        return null;
      }
      const response = await state17.api.post({
        path: `/v1/onramp/quote`,
        params: {
          projectId: OptionsController.state.projectId
        },
        body: {
          purchaseCurrency,
          paymentCurrency,
          amount,
          network
        }
      });
      return response;
    } catch (e3) {
      return {
        coinbaseFee: { amount, currency: paymentCurrency.id },
        networkFee: { amount, currency: paymentCurrency.id },
        paymentSubtotal: { amount, currency: paymentCurrency.id },
        paymentTotal: { amount, currency: paymentCurrency.id },
        purchaseAmount: { amount, currency: paymentCurrency.id },
        quoteId: "mocked-quote-id"
      };
    }
  },
  async getSmartSessions(caipAddress) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/sessions/${caipAddress}`
    });
  },
  async revokeSmartSession(address, pci, signature) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state17.api.post({
      path: `/v1/sessions/${address}/revoke`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        pci,
        signature
      }
    });
  },
  setClientId(clientId) {
    state17.clientId = clientId;
    state17.api = new FetchUtil({ baseUrl: baseUrl3, clientId });
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapApiUtil.js
var SwapApiUtil = {
  async getTokenList() {
    var _a;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    const response = await BlockchainApiController.fetchSwapTokens({
      chainId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
    });
    const tokens = ((_a = response == null ? void 0 : response.tokens) == null ? void 0 : _a.map((token) => ({
      ...token,
      eip2612: false,
      quantity: {
        decimals: "0",
        numeric: "0"
      },
      price: 0,
      value: 0
    }))) || [];
    return tokens;
  },
  async fetchGasPrice() {
    var _a, _b;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return null;
    }
    try {
      switch (caipNetwork.chainNamespace) {
        case "solana":
          const lamportsPerSignature = (_b = await ((_a = ConnectionController) == null ? void 0 : _a.estimateGas({ chainNamespace: "solana" }))) == null ? void 0 : _b.toString();
          return {
            standard: lamportsPerSignature,
            fast: lamportsPerSignature,
            instant: lamportsPerSignature
          };
        case "eip155":
        default:
          return await BlockchainApiController.fetchGasPrice({
            chainId: caipNetwork.caipNetworkId
          });
      }
    } catch {
      return null;
    }
  },
  async fetchSwapAllowance({ tokenAddress, userAddress, sourceTokenAmount, sourceTokenDecimals }) {
    const response = await BlockchainApiController.fetchSwapAllowance({
      tokenAddress,
      userAddress
    });
    if ((response == null ? void 0 : response.allowance) && sourceTokenAmount && sourceTokenDecimals) {
      const parsedValue = ConnectionController.parseUnits(sourceTokenAmount, sourceTokenDecimals) || 0;
      const hasAllowance = BigInt(response.allowance) >= parsedValue;
      return hasAllowance;
    }
    return false;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const address = AccountController.state.address;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!address || !caipNetwork) {
      return [];
    }
    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);
    const balances = response.balances.filter((balance) => balance.quantity.decimals !== "0");
    AccountController.setTokenBalance(balances, ChainController.state.activeChain);
    return this.mapBalancesToSwapTokens(balances);
  },
  mapBalancesToSwapTokens(balances) {
    return (balances == null ? void 0 : balances.map((token) => ({
      ...token,
      address: (token == null ? void 0 : token.address) ? token.address : ChainController.getActiveNetworkTokenAddress(),
      decimals: parseInt(token.quantity.decimals, 10),
      logoUri: token.iconUrl,
      eip2612: false
    }))) || [];
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js
var SwapCalculationUtil = {
  getGasPriceInEther(gas, gasPrice) {
    const totalGasCostInWei = gasPrice * gas;
    const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;
    return totalGasCostInEther;
  },
  getGasPriceInUSD(networkPrice, gas, gasPrice) {
    const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);
    const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);
    const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);
    return gasCostInUSD.toNumber();
  },
  getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {
    const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);
    const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);
    const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);
    return priceImpact.toNumber();
  },
  getMaxSlippage(slippage, toTokenAmount) {
    const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);
    const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);
    return maxSlippageAmount.toNumber();
  },
  getProviderFee(sourceTokenAmount, feePercentage = 85e-4) {
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);
    return providerFee.toString();
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {
    var _a, _b;
    const sourceTokenBalance = (_b = (_a = balance == null ? void 0 : balance.find((token) => token.address === sourceTokenAddress)) == null ? void 0 : _a.quantity) == null ? void 0 : _b.numeric;
    const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || "0").lt(sourceTokenAmount);
    return isInSufficientBalance;
  },
  getToTokenAmount({ sourceToken, toToken, sourceTokenPrice, toTokenPrice, sourceTokenAmount }) {
    if (sourceTokenAmount === "0") {
      return "0";
    }
    if (!sourceToken || !toToken) {
      return "0";
    }
    const sourceTokenDecimals = sourceToken.decimals;
    const sourceTokenPriceInUSD = sourceTokenPrice;
    const toTokenDecimals = toToken.decimals;
    const toTokenPriceInUSD = toTokenPrice;
    if (toTokenPriceInUSD <= 0) {
      return "0";
    }
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(85e-4);
    const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);
    const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));
    const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);
    const decimalDifference = sourceTokenDecimals - toTokenDecimals;
    const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit.times(priceRatio).div(NumberUtil.bigNumber(10).pow(decimalDifference));
    const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));
    const amount = toTokenAmount.toFixed(toTokenDecimals).toString();
    return amount;
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js
var INITIAL_GAS_LIMIT = 15e4;
var TO_AMOUNT_DECIMALS = 6;
var initialState = {
  // Loading states
  initializing: false,
  initialized: false,
  loadingPrices: false,
  loadingQuote: false,
  loadingApprovalTransaction: false,
  loadingBuildTransaction: false,
  loadingTransaction: false,
  // Error states
  fetchError: false,
  // Approval & Swap transaction states
  approvalTransaction: void 0,
  swapTransaction: void 0,
  transactionError: void 0,
  // Input values
  sourceToken: void 0,
  sourceTokenAmount: "",
  sourceTokenPriceInUSD: 0,
  toToken: void 0,
  toTokenAmount: "",
  toTokenPriceInUSD: 0,
  networkPrice: "0",
  networkBalanceInUSD: "0",
  networkTokenSymbol: "",
  inputError: void 0,
  // Request values
  slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE,
  // Tokens
  tokens: void 0,
  popularTokens: void 0,
  suggestedTokens: void 0,
  foundTokens: void 0,
  myTokensWithBalance: void 0,
  tokensPriceMap: {},
  // Calculations
  gasFee: "0",
  gasPriceInUSD: 0,
  priceImpact: void 0,
  maxSlippage: void 0,
  providerFee: void 0
};
var state18 = proxy(initialState);
var SwapController = {
  state: state18,
  subscribe(callback) {
    return subscribe(state18, () => callback(state18));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state18, key, callback);
  },
  getParams() {
    var _a, _b, _c, _d, _e6, _f, _g, _h;
    const caipAddress = ChainController.state.activeCaipAddress;
    const namespace = ChainController.state.activeChain;
    const address = CoreHelperUtil.getPlainAddress(caipAddress);
    const networkAddress = ChainController.getActiveNetworkTokenAddress();
    const connectorId = ConnectorController.getConnectorId(namespace);
    if (!address) {
      throw new Error("No address found to swap the tokens from.");
    }
    const invalidToToken = !((_a = state18.toToken) == null ? void 0 : _a.address) || !((_b = state18.toToken) == null ? void 0 : _b.decimals);
    const invalidSourceToken = !((_c = state18.sourceToken) == null ? void 0 : _c.address) || !((_d = state18.sourceToken) == null ? void 0 : _d.decimals) || !NumberUtil.bigNumber(state18.sourceTokenAmount).gt(0);
    const invalidSourceTokenAmount = !state18.sourceTokenAmount;
    return {
      networkAddress,
      fromAddress: address,
      fromCaipAddress: caipAddress,
      sourceTokenAddress: (_e6 = state18.sourceToken) == null ? void 0 : _e6.address,
      toTokenAddress: (_f = state18.toToken) == null ? void 0 : _f.address,
      toTokenAmount: state18.toTokenAmount,
      toTokenDecimals: (_g = state18.toToken) == null ? void 0 : _g.decimals,
      sourceTokenAmount: state18.sourceTokenAmount,
      sourceTokenDecimals: (_h = state18.sourceToken) == null ? void 0 : _h.decimals,
      invalidToToken,
      invalidSourceToken,
      invalidSourceTokenAmount,
      availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,
      isAuthConnector: connectorId === ConstantsUtil.CONNECTOR_ID.AUTH
    };
  },
  setSourceToken(sourceToken) {
    if (!sourceToken) {
      state18.sourceToken = sourceToken;
      state18.sourceTokenAmount = "";
      state18.sourceTokenPriceInUSD = 0;
      return;
    }
    state18.sourceToken = sourceToken;
    this.setTokenPrice(sourceToken.address, "sourceToken");
  },
  setSourceTokenAmount(amount) {
    state18.sourceTokenAmount = amount;
  },
  setToToken(toToken) {
    if (!toToken) {
      state18.toToken = toToken;
      state18.toTokenAmount = "";
      state18.toTokenPriceInUSD = 0;
      return;
    }
    state18.toToken = toToken;
    this.setTokenPrice(toToken.address, "toToken");
  },
  setToTokenAmount(amount) {
    state18.toTokenAmount = amount ? NumberUtil.formatNumberToLocalString(amount, TO_AMOUNT_DECIMALS) : "";
  },
  async setTokenPrice(address, target) {
    let price = state18.tokensPriceMap[address] || 0;
    if (!price) {
      state18.loadingPrices = true;
      price = await this.getAddressPrice(address);
    }
    if (target === "sourceToken") {
      state18.sourceTokenPriceInUSD = price;
    } else if (target === "toToken") {
      state18.toTokenPriceInUSD = price;
    }
    if (state18.loadingPrices) {
      state18.loadingPrices = false;
    }
    if (this.getParams().availableToSwap) {
      this.swapTokens();
    }
  },
  switchTokens() {
    if (state18.initializing || !state18.initialized) {
      return;
    }
    const newSourceToken = state18.toToken ? { ...state18.toToken } : void 0;
    const newToToken = state18.sourceToken ? { ...state18.sourceToken } : void 0;
    const newSourceTokenAmount = newSourceToken && state18.toTokenAmount === "" ? "1" : state18.toTokenAmount;
    this.setSourceToken(newSourceToken);
    this.setToToken(newToToken);
    this.setSourceTokenAmount(newSourceTokenAmount);
    this.setToTokenAmount("");
    this.swapTokens();
  },
  resetState() {
    state18.myTokensWithBalance = initialState.myTokensWithBalance;
    state18.tokensPriceMap = initialState.tokensPriceMap;
    state18.initialized = initialState.initialized;
    state18.sourceToken = initialState.sourceToken;
    state18.sourceTokenAmount = initialState.sourceTokenAmount;
    state18.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;
    state18.toToken = initialState.toToken;
    state18.toTokenAmount = initialState.toTokenAmount;
    state18.toTokenPriceInUSD = initialState.toTokenPriceInUSD;
    state18.networkPrice = initialState.networkPrice;
    state18.networkTokenSymbol = initialState.networkTokenSymbol;
    state18.networkBalanceInUSD = initialState.networkBalanceInUSD;
    state18.inputError = initialState.inputError;
  },
  resetValues() {
    var _a;
    const { networkAddress } = this.getParams();
    const networkToken = (_a = state18.tokens) == null ? void 0 : _a.find((token) => token.address === networkAddress);
    this.setSourceToken(networkToken);
    this.setToToken(void 0);
  },
  getApprovalLoadingState() {
    return state18.loadingApprovalTransaction;
  },
  clearError() {
    state18.transactionError = void 0;
  },
  async initializeState() {
    if (state18.initializing) {
      return;
    }
    state18.initializing = true;
    if (!state18.initialized) {
      try {
        await this.fetchTokens();
        state18.initialized = true;
      } catch (error) {
        state18.initialized = false;
        SnackController.showError("Failed to initialize swap");
        RouterController.goBack();
      }
    }
    state18.initializing = false;
  },
  async fetchTokens() {
    var _a;
    const { networkAddress } = this.getParams();
    await this.getTokenList();
    await this.getNetworkTokenPrice();
    await this.getMyTokensWithBalance();
    const networkToken = (_a = state18.tokens) == null ? void 0 : _a.find((token) => token.address === networkAddress);
    if (networkToken) {
      state18.networkTokenSymbol = networkToken.symbol;
      this.setSourceToken(networkToken);
      this.setSourceTokenAmount("1");
    }
  },
  async getTokenList() {
    const tokens = await SwapApiUtil.getTokenList();
    state18.tokens = tokens;
    state18.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {
      if (aTokenInfo.symbol < bTokenInfo.symbol) {
        return -1;
      }
      if (aTokenInfo.symbol > bTokenInfo.symbol) {
        return 1;
      }
      return 0;
    });
    state18.suggestedTokens = tokens.filter((token) => {
      if (ConstantsUtil2.SWAP_SUGGESTED_TOKENS.includes(token.symbol)) {
        return true;
      }
      return false;
    }, {});
  },
  async getAddressPrice(address) {
    var _a, _b;
    const existPrice = state18.tokensPriceMap[address];
    if (existPrice) {
      return existPrice;
    }
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [address]
    });
    const fungibles = (response == null ? void 0 : response.fungibles) || [];
    const allTokens = [...state18.tokens || [], ...state18.myTokensWithBalance || []];
    const symbol = (_a = allTokens == null ? void 0 : allTokens.find((token) => token.address === address)) == null ? void 0 : _a.symbol;
    const price = ((_b = fungibles.find((p7) => p7.symbol.toLowerCase() === (symbol == null ? void 0 : symbol.toLowerCase()))) == null ? void 0 : _b.price) || 0;
    const priceAsFloat = parseFloat(price.toString());
    state18.tokensPriceMap[address] = priceAsFloat;
    return priceAsFloat;
  },
  async getNetworkTokenPrice() {
    var _a;
    const { networkAddress } = this.getParams();
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [networkAddress]
    }).catch(() => {
      SnackController.showError("Failed to fetch network token price");
      return { fungibles: [] };
    });
    const token = (_a = response.fungibles) == null ? void 0 : _a[0];
    const price = (token == null ? void 0 : token.price.toString()) || "0";
    state18.tokensPriceMap[networkAddress] = parseFloat(price);
    state18.networkTokenSymbol = (token == null ? void 0 : token.symbol) || "";
    state18.networkPrice = price;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await SwapApiUtil.getMyTokensWithBalance(forceUpdate);
    if (!balances) {
      return;
    }
    await this.getInitialGasPrice();
    this.setBalances(balances);
  },
  setBalances(balances) {
    const { networkAddress } = this.getParams();
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return;
    }
    const networkToken = balances.find((token) => token.address === networkAddress);
    balances.forEach((token) => {
      state18.tokensPriceMap[token.address] = token.price || 0;
    });
    state18.myTokensWithBalance = balances.filter((token) => token.address.startsWith(caipNetwork.caipNetworkId));
    state18.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async getInitialGasPrice() {
    var _a, _b;
    const res = await SwapApiUtil.fetchGasPrice();
    if (!res) {
      return { gasPrice: null, gasPriceInUSD: null };
    }
    switch ((_b = (_a = ChainController.state) == null ? void 0 : _a.activeCaipNetwork) == null ? void 0 : _b.chainNamespace) {
      case "solana":
        state18.gasFee = res.standard ?? "0";
        state18.gasPriceInUSD = NumberUtil.multiply(res.standard, state18.networkPrice).div(1e9).toNumber();
        return {
          gasPrice: BigInt(state18.gasFee),
          gasPriceInUSD: Number(state18.gasPriceInUSD)
        };
      case "eip155":
      default:
        const value = res.standard ?? "0";
        const gasFee = BigInt(value);
        const gasLimit = BigInt(INITIAL_GAS_LIMIT);
        const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state18.networkPrice, gasLimit, gasFee);
        state18.gasFee = value;
        state18.gasPriceInUSD = gasPrice;
        return { gasPrice: gasFee, gasPriceInUSD: gasPrice };
    }
  },
  // -- Swap -------------------------------------- //
  async swapTokens() {
    var _a, _b;
    const address = AccountController.state.address;
    const sourceToken = state18.sourceToken;
    const toToken = state18.toToken;
    const haveSourceTokenAmount = NumberUtil.bigNumber(state18.sourceTokenAmount).gt(0);
    if (!haveSourceTokenAmount) {
      this.setToTokenAmount("");
    }
    if (!toToken || !sourceToken || state18.loadingPrices || !haveSourceTokenAmount) {
      return;
    }
    state18.loadingQuote = true;
    const amountDecimal = NumberUtil.bigNumber(state18.sourceTokenAmount).times(10 ** sourceToken.decimals).round(0);
    try {
      const quoteResponse = await BlockchainApiController.fetchSwapQuote({
        userAddress: address,
        from: sourceToken.address,
        to: toToken.address,
        gasPrice: state18.gasFee,
        amount: amountDecimal.toString()
      });
      state18.loadingQuote = false;
      const quoteToAmount = (_b = (_a = quoteResponse == null ? void 0 : quoteResponse.quotes) == null ? void 0 : _a[0]) == null ? void 0 : _b.toAmount;
      if (!quoteToAmount) {
        AlertController.open({
          shortMessage: "Incorrect amount",
          longMessage: "Please enter a valid amount"
        }, "error");
        return;
      }
      const toTokenAmount = NumberUtil.bigNumber(quoteToAmount).div(10 ** toToken.decimals).toString();
      this.setToTokenAmount(toTokenAmount);
      const isInsufficientToken = this.hasInsufficientToken(state18.sourceTokenAmount, sourceToken.address);
      if (isInsufficientToken) {
        state18.inputError = "Insufficient balance";
      } else {
        state18.inputError = void 0;
        this.setTransactionDetails();
      }
    } catch (error) {
      state18.loadingQuote = false;
      state18.inputError = "Insufficient balance";
    }
  },
  // -- Create Transactions -------------------------------------- //
  async getTransaction() {
    const { fromCaipAddress, availableToSwap } = this.getParams();
    const sourceToken = state18.sourceToken;
    const toToken = state18.toToken;
    if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state18.loadingQuote) {
      return void 0;
    }
    try {
      state18.loadingBuildTransaction = true;
      const hasAllowance = await SwapApiUtil.fetchSwapAllowance({
        userAddress: fromCaipAddress,
        tokenAddress: sourceToken.address,
        sourceTokenAmount: state18.sourceTokenAmount,
        sourceTokenDecimals: sourceToken.decimals
      });
      let transaction = void 0;
      if (hasAllowance) {
        transaction = await this.createSwapTransaction();
      } else {
        transaction = await this.createAllowanceTransaction();
      }
      state18.loadingBuildTransaction = false;
      state18.fetchError = false;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to check allowance");
      state18.loadingBuildTransaction = false;
      state18.approvalTransaction = void 0;
      state18.swapTransaction = void 0;
      state18.fetchError = true;
      return void 0;
    }
  },
  async createAllowanceTransaction() {
    const { fromCaipAddress, fromAddress, sourceTokenAddress, toTokenAddress } = this.getParams();
    if (!fromCaipAddress || !toTokenAddress) {
      return void 0;
    }
    if (!sourceTokenAddress) {
      throw new Error("createAllowanceTransaction - No source token address found.");
    }
    try {
      const response = await BlockchainApiController.generateApproveCalldata({
        from: sourceTokenAddress,
        to: toTokenAddress,
        userAddress: fromCaipAddress
      });
      const gasLimit = await ConnectionController.estimateGas({
        chainNamespace: ConstantsUtil.CHAIN.EVM,
        address: fromAddress,
        to: CoreHelperUtil.getPlainAddress(response.tx.to),
        data: response.tx.data
      });
      const transaction = {
        data: response.tx.data,
        to: CoreHelperUtil.getPlainAddress(response.tx.from),
        gas: gasLimit,
        gasPrice: BigInt(response.tx.eip155.gasPrice),
        value: BigInt(response.tx.value),
        toAmount: state18.toTokenAmount
      };
      state18.swapTransaction = void 0;
      state18.approvalTransaction = {
        data: transaction.data,
        to: transaction.to,
        gas: transaction.gas ?? BigInt(0),
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
      return {
        data: transaction.data,
        to: transaction.to,
        gas: transaction.gas ?? BigInt(0),
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create approval transaction");
      state18.approvalTransaction = void 0;
      state18.swapTransaction = void 0;
      state18.fetchError = true;
      return void 0;
    }
  },
  async createSwapTransaction() {
    var _a;
    const { networkAddress, fromCaipAddress, sourceTokenAmount } = this.getParams();
    const sourceToken = state18.sourceToken;
    const toToken = state18.toToken;
    if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {
      return void 0;
    }
    const amount = (_a = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)) == null ? void 0 : _a.toString();
    try {
      const response = await BlockchainApiController.generateSwapCalldata({
        userAddress: fromCaipAddress,
        from: sourceToken.address,
        to: toToken.address,
        amount
      });
      const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;
      const gas = BigInt(response.tx.eip155.gas);
      const gasPrice = BigInt(response.tx.eip155.gasPrice);
      const transaction = {
        data: response.tx.data,
        to: CoreHelperUtil.getPlainAddress(response.tx.to),
        gas,
        gasPrice,
        value: isSourceTokenIsNetworkToken ? BigInt(amount ?? "0") : BigInt("0"),
        toAmount: state18.toTokenAmount
      };
      state18.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state18.networkPrice, gas, gasPrice);
      state18.approvalTransaction = void 0;
      state18.swapTransaction = transaction;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create transaction");
      state18.approvalTransaction = void 0;
      state18.swapTransaction = void 0;
      state18.fetchError = true;
      return void 0;
    }
  },
  // -- Send Transactions --------------------------------- //
  async sendTransactionForApproval(data) {
    var _a, _b, _c;
    const { fromAddress, isAuthConnector } = this.getParams();
    state18.loadingApprovalTransaction = true;
    const approveLimitMessage = `Approve limit increase in your wallet`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        view: null,
        goBack: true,
        onSuccess() {
          SnackController.showLoading(approveLimitMessage);
        }
      });
    } else {
      SnackController.showLoading(approveLimitMessage);
    }
    try {
      await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        gas: data.gas,
        gasPrice: BigInt(data.gasPrice),
        value: data.value,
        chainNamespace: "eip155"
      });
      await this.swapTokens();
      await this.getTransaction();
      state18.approvalTransaction = void 0;
      state18.loadingApprovalTransaction = false;
    } catch (err) {
      const error = err;
      state18.transactionError = error == null ? void 0 : error.shortMessage;
      state18.loadingApprovalTransaction = false;
      SnackController.showError((error == null ? void 0 : error.shortMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_APPROVAL_ERROR",
        properties: {
          message: (error == null ? void 0 : error.shortMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || "",
          swapFromToken: ((_b = this.state.sourceToken) == null ? void 0 : _b.symbol) || "",
          swapToToken: ((_c = this.state.toToken) == null ? void 0 : _c.symbol) || "",
          swapFromAmount: this.state.sourceTokenAmount || "",
          swapToAmount: this.state.toTokenAmount || "",
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
    }
  },
  async sendTransactionForSwap(data) {
    var _a, _b, _c, _d, _e6, _f, _g, _h, _i2, _j, _k, _l;
    if (!data) {
      return void 0;
    }
    const { fromAddress, toTokenAmount, isAuthConnector } = this.getParams();
    state18.loadingTransaction = true;
    const snackbarPendingMessage = `Swapping ${(_a = state18.sourceToken) == null ? void 0 : _a.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_b = state18.toToken) == null ? void 0 : _b.symbol}`;
    const snackbarSuccessMessage = `Swapped ${(_c = state18.sourceToken) == null ? void 0 : _c.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_d = state18.toToken) == null ? void 0 : _d.symbol}`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        view: "Account",
        goBack: false,
        onSuccess() {
          SnackController.showLoading(snackbarPendingMessage);
          SwapController.resetState();
        }
      });
    } else {
      SnackController.showLoading("Confirm transaction in your wallet");
    }
    try {
      const forceUpdateAddresses = [(_e6 = state18.sourceToken) == null ? void 0 : _e6.address, (_f = state18.toToken) == null ? void 0 : _f.address].join(",");
      const transactionHash = await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        gas: data.gas,
        gasPrice: BigInt(data.gasPrice),
        value: data.value,
        chainNamespace: "eip155"
      });
      state18.loadingTransaction = false;
      SnackController.showSuccess(snackbarSuccessMessage);
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_SUCCESS",
        properties: {
          network: ((_g = ChainController.state.activeCaipNetwork) == null ? void 0 : _g.caipNetworkId) || "",
          swapFromToken: ((_h = this.state.sourceToken) == null ? void 0 : _h.symbol) || "",
          swapToToken: ((_i2 = this.state.toToken) == null ? void 0 : _i2.symbol) || "",
          swapFromAmount: this.state.sourceTokenAmount || "",
          swapToAmount: this.state.toTokenAmount || "",
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      SwapController.resetState();
      if (!isAuthConnector) {
        RouterController.replace("Account");
      }
      SwapController.getMyTokensWithBalance(forceUpdateAddresses);
      return transactionHash;
    } catch (err) {
      const error = err;
      state18.transactionError = error == null ? void 0 : error.shortMessage;
      state18.loadingTransaction = false;
      SnackController.showError((error == null ? void 0 : error.shortMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_ERROR",
        properties: {
          message: (error == null ? void 0 : error.shortMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_j = ChainController.state.activeCaipNetwork) == null ? void 0 : _j.caipNetworkId) || "",
          swapFromToken: ((_k = this.state.sourceToken) == null ? void 0 : _k.symbol) || "",
          swapToToken: ((_l = this.state.toToken) == null ? void 0 : _l.symbol) || "",
          swapFromAmount: this.state.sourceTokenAmount || "",
          swapToAmount: this.state.toTokenAmount || "",
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      return void 0;
    }
  },
  // -- Checks -------------------------------------------- //
  hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {
    const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state18.myTokensWithBalance);
    let insufficientNetworkTokenForGas = true;
    if (AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT) {
      insufficientNetworkTokenForGas = false;
    } else {
      insufficientNetworkTokenForGas = SwapCalculationUtil.isInsufficientNetworkTokenForGas(state18.networkBalanceInUSD, state18.gasPriceInUSD);
    }
    return insufficientNetworkTokenForGas || isInsufficientSourceTokenForSwap;
  },
  // -- Calculations -------------------------------------- //
  setTransactionDetails() {
    const { toTokenAddress, toTokenDecimals } = this.getParams();
    if (!toTokenAddress || !toTokenDecimals) {
      return;
    }
    state18.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state18.networkPrice, BigInt(state18.gasFee), BigInt(INITIAL_GAS_LIMIT));
    state18.priceImpact = SwapCalculationUtil.getPriceImpact({
      sourceTokenAmount: state18.sourceTokenAmount,
      sourceTokenPriceInUSD: state18.sourceTokenPriceInUSD,
      toTokenPriceInUSD: state18.toTokenPriceInUSD,
      toTokenAmount: state18.toTokenAmount
    });
    state18.maxSlippage = SwapCalculationUtil.getMaxSlippage(state18.slippage, state18.toTokenAmount);
    state18.providerFee = SwapCalculationUtil.getProviderFee(state18.sourceTokenAmount);
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js
var state19 = proxy({
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  allAccounts: []
});
var AccountController = {
  state: state19,
  replaceState(newState) {
    if (!newState) {
      return;
    }
    Object.assign(state19, ref(newState));
  },
  subscribe(callback) {
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        return callback(accountState2);
      }
      return void 0;
    });
  },
  subscribeKey(property, callback, chain) {
    let prev = void 0;
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        const nextValue = accountState2[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    }, chain);
  },
  setStatus(status, chain) {
    ChainController.setAccountProp("status", status, chain);
  },
  getCaipAddress(chain) {
    return ChainController.getAccountProp("caipAddress", chain);
  },
  setCaipAddress(caipAddress, chain) {
    const newAddress = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (chain === ChainController.state.activeChain) {
      ChainController.state.activeCaipAddress = caipAddress;
    }
    ChainController.setAccountProp("caipAddress", caipAddress, chain);
    ChainController.setAccountProp("address", newAddress, chain);
  },
  setBalance(balance, balanceSymbol, chain) {
    ChainController.setAccountProp("balance", balance, chain);
    ChainController.setAccountProp("balanceSymbol", balanceSymbol, chain);
  },
  setProfileName(profileName, chain) {
    ChainController.setAccountProp("profileName", profileName, chain);
  },
  setProfileImage(profileImage, chain) {
    ChainController.setAccountProp("profileImage", profileImage, chain);
  },
  setUser(user, chain) {
    ChainController.setAccountProp("user", user, chain);
  },
  setAddressExplorerUrl(explorerUrl, chain) {
    ChainController.setAccountProp("addressExplorerUrl", explorerUrl, chain);
  },
  setSmartAccountDeployed(isDeployed, chain) {
    ChainController.setAccountProp("smartAccountDeployed", isDeployed, chain);
  },
  setCurrentTab(currentTab) {
    ChainController.setAccountProp("currentTab", currentTab, ChainController.state.activeChain);
  },
  setTokenBalance(tokenBalance, chain) {
    if (tokenBalance) {
      ChainController.setAccountProp("tokenBalance", tokenBalance, chain);
    }
  },
  setShouldUpdateToAddress(address, chain) {
    ChainController.setAccountProp("shouldUpdateToAddress", address, chain);
  },
  setAllAccounts(accounts, namespace) {
    ChainController.setAccountProp("allAccounts", accounts, namespace);
  },
  addAddressLabel(address, label, chain) {
    const map = ChainController.getAccountProp("addressLabels", chain) || /* @__PURE__ */ new Map();
    map.set(address, label);
    ChainController.setAccountProp("addressLabels", map, chain);
  },
  removeAddressLabel(address, chain) {
    const map = ChainController.getAccountProp("addressLabels", chain) || /* @__PURE__ */ new Map();
    map.delete(address);
    ChainController.setAccountProp("addressLabels", map, chain);
  },
  setConnectedWalletInfo(connectedWalletInfo, chain) {
    ChainController.setAccountProp("connectedWalletInfo", connectedWalletInfo, chain, false);
  },
  setPreferredAccountType(preferredAccountType, chain) {
    ChainController.setAccountProp("preferredAccountType", preferredAccountType, chain);
  },
  setSocialProvider(socialProvider, chain) {
    if (socialProvider) {
      ChainController.setAccountProp("socialProvider", socialProvider, chain);
    }
  },
  setSocialWindow(socialWindow, chain) {
    ChainController.setAccountProp("socialWindow", socialWindow ? ref(socialWindow) : void 0, chain);
  },
  setFarcasterUrl(farcasterUrl, chain) {
    ChainController.setAccountProp("farcasterUrl", farcasterUrl, chain);
  },
  async fetchTokenBalance(onError) {
    var _a, _b;
    state19.balanceLoading = true;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const chain = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state19.lastRetry && !CoreHelperUtil.isAllowedRetry(state19.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state19.balanceLoading = false;
      return [];
    }
    try {
      if (address && chainId && chain) {
        const response = await BlockchainApiController.getBalance(address, chainId);
        const filteredBalances = response.balances.filter((balance) => balance.quantity.decimals !== "0");
        this.setTokenBalance(filteredBalances, chain);
        SwapController.setBalances(SwapApiUtil.mapBalancesToSwapTokens(response.balances));
        state19.lastRetry = void 0;
        state19.balanceLoading = false;
        return filteredBalances;
      }
    } catch (error) {
      state19.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state19.balanceLoading = false;
    }
    return [];
  },
  resetAccount(chain) {
    ChainController.resetAccount(chain);
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OnRampController.js
var USDC_CURRENCY_DEFAULT = {
  id: "2b92315d-eab7-5bef-84fa-089a131333f5",
  name: "USD Coin",
  symbol: "USDC",
  networks: [
    {
      name: "ethereum-mainnet",
      display_name: "Ethereum",
      chain_id: "1",
      contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    },
    {
      name: "polygon-mainnet",
      display_name: "Polygon",
      chain_id: "137",
      contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    }
  ]
};
var USD_CURRENCY_DEFAULT = {
  id: "USD",
  payment_method_limits: [
    {
      id: "card",
      min: "10.00",
      max: "7500.00"
    },
    {
      id: "ach_bank_account",
      min: "10.00",
      max: "25000.00"
    }
  ]
};
var defaultState = {
  providers: ONRAMP_PROVIDERS,
  selectedProvider: null,
  error: null,
  purchaseCurrency: USDC_CURRENCY_DEFAULT,
  paymentCurrency: USD_CURRENCY_DEFAULT,
  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],
  paymentCurrencies: [],
  quotesLoading: false
};
var state20 = proxy(defaultState);
var OnRampController = {
  state: state20,
  subscribe(callback) {
    return subscribe(state20, () => callback(state20));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state20, key, callback);
  },
  setSelectedProvider(provider) {
    if (provider && provider.name === "meld") {
      const currency = ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA ? "SOL" : "USDC";
      const address = AccountController.state.address ?? "";
      const url = new URL(provider.url);
      url.searchParams.append("publicKey", MELD_PUBLIC_KEY);
      url.searchParams.append("destinationCurrencyCode", currency);
      url.searchParams.append("walletAddress", address);
      provider.url = url.toString();
    }
    state20.selectedProvider = provider;
  },
  setPurchaseCurrency(currency) {
    state20.purchaseCurrency = currency;
  },
  setPaymentCurrency(currency) {
    state20.paymentCurrency = currency;
  },
  setPurchaseAmount(amount) {
    this.state.purchaseAmount = amount;
  },
  setPaymentAmount(amount) {
    this.state.paymentAmount = amount;
  },
  async getAvailableCurrencies() {
    const options = await BlockchainApiController.getOnrampOptions();
    state20.purchaseCurrencies = options.purchaseCurrencies;
    state20.paymentCurrencies = options.paymentCurrencies;
    state20.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;
    state20.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;
    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map((currency) => currency.id));
    await ApiController.fetchTokenImages(options.purchaseCurrencies.map((currency) => currency.symbol));
  },
  async getQuote() {
    var _a, _b;
    state20.quotesLoading = true;
    try {
      const quote = await BlockchainApiController.getOnrampQuote({
        purchaseCurrency: state20.purchaseCurrency,
        paymentCurrency: state20.paymentCurrency,
        amount: ((_a = state20.paymentAmount) == null ? void 0 : _a.toString()) || "0",
        network: (_b = state20.purchaseCurrency) == null ? void 0 : _b.symbol
      });
      state20.quotesLoading = false;
      state20.purchaseAmount = Number(quote == null ? void 0 : quote.purchaseAmount.amount);
      return quote;
    } catch (error) {
      state20.error = error.message;
      state20.quotesLoading = false;
      return null;
    } finally {
      state20.quotesLoading = false;
    }
  },
  resetState() {
    state20.providers = ONRAMP_PROVIDERS;
    state20.selectedProvider = null;
    state20.error = null;
    state20.purchaseCurrency = USDC_CURRENCY_DEFAULT;
    state20.paymentCurrency = USD_CURRENCY_DEFAULT;
    state20.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];
    state20.paymentCurrencies = [];
    state20.paymentAmount = void 0;
    state20.purchaseAmount = void 0;
    state20.quotesLoading = false;
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TooltipController.js
var state21 = proxy({
  message: "",
  open: false,
  triggerRect: {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  variant: "shade"
});
var TooltipController = {
  state: state21,
  subscribe(callback) {
    return subscribe(state21, () => callback(state21));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state21, key, callback);
  },
  showTooltip({ message, triggerRect, variant }) {
    state21.open = true;
    state21.message = message;
    state21.triggerRect = triggerRect;
    state21.variant = variant;
  },
  hide() {
    state21.open = false;
    state21.message = "";
    state21.triggerRect = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/EnsUtil.js
var SLIP44_MSB = 2147483648;
var EnsUtil = {
  convertEVMChainIdToCoinType(chainId) {
    if (chainId >= SLIP44_MSB) {
      throw new Error("Invalid chainId");
    }
    return (SLIP44_MSB | chainId) >>> 0;
  }
};

// ../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EnsController.js
var state22 = proxy({
  suggestions: [],
  loading: false
});
var EnsController = {
  state: state22,
  subscribe(callback) {
    return subscribe(state22, () => callback(state22));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state22, key, callback);
  },
  async resolveName(name2) {
    var _a, _b;
    try {
      return await BlockchainApiController.lookupEnsName(name2);
    } catch (e3) {
      const error = e3;
      throw new Error(((_b = (_a = error == null ? void 0 : error.reasons) == null ? void 0 : _a[0]) == null ? void 0 : _b.description) || "Error resolving name");
    }
  },
  async isNameRegistered(name2) {
    try {
      await BlockchainApiController.lookupEnsName(name2);
      return true;
    } catch {
      return false;
    }
  },
  async getSuggestions(value) {
    try {
      state22.loading = true;
      state22.suggestions = [];
      const response = await BlockchainApiController.getEnsNameSuggestions(value);
      state22.suggestions = response.suggestions.map((suggestion) => ({
        ...suggestion,
        name: suggestion.name
      })) || [];
      return state22.suggestions;
    } catch (e3) {
      const errorMessage = this.parseEnsApiError(e3, "Error fetching name suggestions");
      throw new Error(errorMessage);
    } finally {
      state22.loading = false;
    }
  },
  async getNamesForAddress(address) {
    try {
      const network = ChainController.state.activeCaipNetwork;
      if (!network) {
        return [];
      }
      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);
      if (cachedEns) {
        return cachedEns;
      }
      const response = await BlockchainApiController.reverseLookupEnsName({ address });
      StorageUtil.updateEnsCache({
        address,
        ens: response,
        timestamp: Date.now()
      });
      return response;
    } catch (e3) {
      const errorMessage = this.parseEnsApiError(e3, "Error fetching names for address");
      throw new Error(errorMessage);
    }
  },
  async registerName(name2) {
    const network = ChainController.state.activeCaipNetwork;
    if (!network) {
      throw new Error("Network not found");
    }
    const address = AccountController.state.address;
    const emailConnector = ConnectorController.getAuthConnector();
    if (!address || !emailConnector) {
      throw new Error("Address or auth connector not found");
    }
    state22.loading = true;
    try {
      const message = JSON.stringify({
        name: name2,
        attributes: {},
        // Unix timestamp
        timestamp: Math.floor(Date.now() / 1e3)
      });
      RouterController.pushTransactionStack({
        view: "RegisterAccountNameSuccess",
        goBack: false,
        replace: true,
        onCancel() {
          state22.loading = false;
        }
      });
      const signature = await ConnectionController.signMessage(message);
      const networkId = network.id;
      if (!networkId) {
        throw new Error("Network not found");
      }
      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));
      await BlockchainApiController.registerEnsName({
        coinType,
        address,
        signature,
        message
      });
      AccountController.setProfileName(name2, network.chainNamespace);
      RouterController.replace("RegisterAccountNameSuccess");
    } catch (e3) {
      const errorMessage = this.parseEnsApiError(e3, `Error registering name ${name2}`);
      RouterController.replace("RegisterAccountName");
      throw new Error(errorMessage);
    } finally {
      state22.loading = false;
    }
  },
  validateName(name2) {
    return /^[a-zA-Z0-9-]{4,}$/u.test(name2);
  },
  parseEnsApiError(error, defaultError) {
    var _a, _b;
    const ensError = error;
    return ((_b = (_a = ensError == null ? void 0 : ensError.reasons) == null ? void 0 : _a[0]) == null ? void 0 : _b.description) || defaultError;
  }
};

// ../../node_modules/@reown/appkit-ui/dist/esm/src/utils/MathUtil.js
var MathUtil = {
  interpolate(inputRange, outputRange, value) {
    if (inputRange.length !== 2 || outputRange.length !== 2) {
      throw new Error("inputRange and outputRange must be an array of length 2");
    }
    const originalRangeMin = inputRange[0] || 0;
    const originalRangeMax = inputRange[1] || 0;
    const newRangeMin = outputRange[0] || 0;
    const newRangeMax = outputRange[1] || 0;
    if (value < originalRangeMin) {
      return newRangeMin;
    }
    if (value > originalRangeMax) {
      return newRangeMax;
    }
    return (newRangeMax - newRangeMin) / (originalRangeMax - originalRangeMin) * (value - originalRangeMin) + newRangeMin;
  }
};

// ../../node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js
var themeTag = void 0;
var darkModeTag = void 0;
var lightModeTag = void 0;
function initializeTheming(themeVariables, themeMode) {
  themeTag = document.createElement("style");
  darkModeTag = document.createElement("style");
  lightModeTag = document.createElement("style");
  themeTag.textContent = createRootStyles(themeVariables).core.cssText;
  darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
  lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  document.head.appendChild(themeTag);
  document.head.appendChild(darkModeTag);
  document.head.appendChild(lightModeTag);
  setColorTheme(themeMode);
}
function setColorTheme(themeMode) {
  if (darkModeTag && lightModeTag) {
    if (themeMode === "light") {
      darkModeTag.removeAttribute("media");
      lightModeTag.media = "enabled";
    } else {
      lightModeTag.removeAttribute("media");
      darkModeTag.media = "enabled";
    }
  }
}
function setThemeVariables(themeVariables) {
  if (themeTag && darkModeTag && lightModeTag) {
    themeTag.textContent = createRootStyles(themeVariables).core.cssText;
    darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
    lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  }
}
function createRootStyles(themeVariables) {
  return {
    core: css`
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
      @keyframes w3m-shake {
        0% {
          transform: scale(1) rotate(0deg);
        }
        20% {
          transform: scale(1) rotate(-1deg);
        }
        40% {
          transform: scale(1) rotate(1.5deg);
        }
        60% {
          transform: scale(1) rotate(-1.5deg);
        }
        80% {
          transform: scale(1) rotate(1deg);
        }
        100% {
          transform: scale(1) rotate(0deg);
        }
      }
      @keyframes w3m-iframe-fade-out {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      @keyframes w3m-iframe-zoom-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes w3m-iframe-zoom-in-mobile {
        0% {
          transform: scale(0.95);
          opacity: 0;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }
      :root {
        --w3m-modal-width: 360px;
        --w3m-color-mix-strength: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix-strength"]) ? `${themeVariables["--w3m-color-mix-strength"]}%` : "0%")};
        --w3m-font-family: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-family"]) || "Inter, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;")};
        --w3m-font-size-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-size-master"]) || "10px")};
        --w3m-border-radius-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-border-radius-master"]) || "4px")};
        --w3m-z-index: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-z-index"]) || 999)};

        --wui-font-family: var(--w3m-font-family);

        --wui-font-size-mini: calc(var(--w3m-font-size-master) * 0.8);
        --wui-font-size-micro: var(--w3m-font-size-master);
        --wui-font-size-tiny: calc(var(--w3m-font-size-master) * 1.2);
        --wui-font-size-small: calc(var(--w3m-font-size-master) * 1.4);
        --wui-font-size-paragraph: calc(var(--w3m-font-size-master) * 1.6);
        --wui-font-size-medium: calc(var(--w3m-font-size-master) * 1.8);
        --wui-font-size-large: calc(var(--w3m-font-size-master) * 2);
        --wui-font-size-title-6: calc(var(--w3m-font-size-master) * 2.2);
        --wui-font-size-medium-title: calc(var(--w3m-font-size-master) * 2.4);
        --wui-font-size-2xl: calc(var(--w3m-font-size-master) * 4);

        --wui-border-radius-5xs: var(--w3m-border-radius-master);
        --wui-border-radius-4xs: calc(var(--w3m-border-radius-master) * 1.5);
        --wui-border-radius-3xs: calc(var(--w3m-border-radius-master) * 2);
        --wui-border-radius-xxs: calc(var(--w3m-border-radius-master) * 3);
        --wui-border-radius-xs: calc(var(--w3m-border-radius-master) * 4);
        --wui-border-radius-s: calc(var(--w3m-border-radius-master) * 5);
        --wui-border-radius-m: calc(var(--w3m-border-radius-master) * 7);
        --wui-border-radius-l: calc(var(--w3m-border-radius-master) * 9);
        --wui-border-radius-3xl: calc(var(--w3m-border-radius-master) * 20);

        --wui-font-weight-light: 400;
        --wui-font-weight-regular: 500;
        --wui-font-weight-medium: 600;
        --wui-font-weight-bold: 700;

        --wui-letter-spacing-2xl: -1.6px;
        --wui-letter-spacing-medium-title: -0.96px;
        --wui-letter-spacing-title-6: -0.88px;
        --wui-letter-spacing-large: -0.8px;
        --wui-letter-spacing-medium: -0.72px;
        --wui-letter-spacing-paragraph: -0.64px;
        --wui-letter-spacing-small: -0.56px;
        --wui-letter-spacing-tiny: -0.48px;
        --wui-letter-spacing-micro: -0.2px;
        --wui-letter-spacing-mini: -0.16px;

        --wui-spacing-0: 0px;
        --wui-spacing-4xs: 2px;
        --wui-spacing-3xs: 4px;
        --wui-spacing-xxs: 6px;
        --wui-spacing-2xs: 7px;
        --wui-spacing-xs: 8px;
        --wui-spacing-1xs: 10px;
        --wui-spacing-s: 12px;
        --wui-spacing-m: 14px;
        --wui-spacing-l: 16px;
        --wui-spacing-2l: 18px;
        --wui-spacing-xl: 20px;
        --wui-spacing-xxl: 24px;
        --wui-spacing-2xl: 32px;
        --wui-spacing-3xl: 40px;
        --wui-spacing-4xl: 90px;
        --wui-spacing-5xl: 95px;

        --wui-icon-box-size-xxs: 14px;
        --wui-icon-box-size-xs: 20px;
        --wui-icon-box-size-sm: 24px;
        --wui-icon-box-size-md: 32px;
        --wui-icon-box-size-mdl: 36px;
        --wui-icon-box-size-lg: 40px;
        --wui-icon-box-size-2lg: 48px;
        --wui-icon-box-size-xl: 64px;

        --wui-icon-size-inherit: inherit;
        --wui-icon-size-xxs: 10px;
        --wui-icon-size-xs: 12px;
        --wui-icon-size-sm: 14px;
        --wui-icon-size-md: 16px;
        --wui-icon-size-mdl: 18px;
        --wui-icon-size-lg: 20px;
        --wui-icon-size-xl: 24px;
        --wui-icon-size-xxl: 28px;

        --wui-wallet-image-size-inherit: inherit;
        --wui-wallet-image-size-sm: 40px;
        --wui-wallet-image-size-md: 56px;
        --wui-wallet-image-size-lg: 80px;

        --wui-visual-size-size-inherit: inherit;
        --wui-visual-size-sm: 40px;
        --wui-visual-size-md: 55px;
        --wui-visual-size-lg: 80px;

        --wui-box-size-md: 100px;
        --wui-box-size-lg: 120px;

        --wui-ease-out-power-2: cubic-bezier(0, 0, 0.22, 1);
        --wui-ease-out-power-1: cubic-bezier(0, 0, 0.55, 1);

        --wui-ease-in-power-3: cubic-bezier(0.66, 0, 1, 1);
        --wui-ease-in-power-2: cubic-bezier(0.45, 0, 1, 1);
        --wui-ease-in-power-1: cubic-bezier(0.3, 0, 1, 1);

        --wui-ease-inout-power-1: cubic-bezier(0.45, 0, 0.55, 1);

        --wui-duration-lg: 200ms;
        --wui-duration-md: 125ms;
        --wui-duration-sm: 75ms;

        --wui-path-network-sm: path(
          'M15.4 2.1a5.21 5.21 0 0 1 5.2 0l11.61 6.7a5.21 5.21 0 0 1 2.61 4.52v13.4c0 1.87-1 3.59-2.6 4.52l-11.61 6.7c-1.62.93-3.6.93-5.22 0l-11.6-6.7a5.21 5.21 0 0 1-2.61-4.51v-13.4c0-1.87 1-3.6 2.6-4.52L15.4 2.1Z'
        );

        --wui-path-network-md: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --wui-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --wui-width-network-sm: 36px;
        --wui-width-network-md: 48px;
        --wui-width-network-lg: 86px;

        --wui-height-network-sm: 40px;
        --wui-height-network-md: 54px;
        --wui-height-network-lg: 96px;

        --wui-icon-size-network-xs: 12px;
        --wui-icon-size-network-sm: 16px;
        --wui-icon-size-network-md: 24px;
        --wui-icon-size-network-lg: 42px;

        --wui-color-inherit: inherit;

        --wui-color-inverse-100: #fff;
        --wui-color-inverse-000: #000;

        --wui-cover: rgba(20, 20, 20, 0.8);

        --wui-color-modal-bg: var(--wui-color-modal-bg-base);

        --wui-color-accent-100: var(--wui-color-accent-base-100);
        --wui-color-accent-090: var(--wui-color-accent-base-090);
        --wui-color-accent-080: var(--wui-color-accent-base-080);

        --wui-color-success-100: var(--wui-color-success-base-100);
        --wui-color-success-125: var(--wui-color-success-base-125);

        --wui-color-warning-100: var(--wui-color-warning-base-100);

        --wui-color-error-100: var(--wui-color-error-base-100);
        --wui-color-error-125: var(--wui-color-error-base-125);

        --wui-color-blue-100: var(--wui-color-blue-base-100);
        --wui-color-blue-90: var(--wui-color-blue-base-90);

        --wui-icon-box-bg-error-100: var(--wui-icon-box-bg-error-base-100);
        --wui-icon-box-bg-blue-100: var(--wui-icon-box-bg-blue-base-100);
        --wui-icon-box-bg-success-100: var(--wui-icon-box-bg-success-base-100);
        --wui-icon-box-bg-inverse-100: var(--wui-icon-box-bg-inverse-base-100);

        --wui-all-wallets-bg-100: var(--wui-all-wallets-bg-100);

        --wui-avatar-border: var(--wui-avatar-border-base);

        --wui-thumbnail-border: var(--wui-thumbnail-border-base);

        --wui-wallet-button-bg: var(--wui-wallet-button-bg-base);

        --wui-box-shadow-blue: var(--wui-color-accent-glass-020);
      }

      @supports (background: color-mix(in srgb, white 50%, black)) {
        :root {
          --wui-color-modal-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-modal-bg-base)
          );

          --wui-box-shadow-blue: color-mix(in srgb, var(--wui-color-accent-100) 20%, transparent);

          --wui-color-accent-100: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 100%,
            transparent
          );
          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-glass-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-020: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 20%,
            transparent
          );
          --wui-color-accent-glass-015: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 15%,
            transparent
          );
          --wui-color-accent-glass-010: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 10%,
            transparent
          );
          --wui-color-accent-glass-005: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 5%,
            transparent
          );
          --wui-color-accent-002: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 2%,
            transparent
          );

          --wui-color-fg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-100)
          );
          --wui-color-fg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-125)
          );
          --wui-color-fg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-150)
          );
          --wui-color-fg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-175)
          );
          --wui-color-fg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-200)
          );
          --wui-color-fg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-225)
          );
          --wui-color-fg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-250)
          );
          --wui-color-fg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-275)
          );
          --wui-color-fg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-300)
          );
          --wui-color-fg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-325)
          );
          --wui-color-fg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-350)
          );

          --wui-color-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-100)
          );
          --wui-color-bg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-125)
          );
          --wui-color-bg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-150)
          );
          --wui-color-bg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-175)
          );
          --wui-color-bg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-200)
          );
          --wui-color-bg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-225)
          );
          --wui-color-bg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-250)
          );
          --wui-color-bg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-275)
          );
          --wui-color-bg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-300)
          );
          --wui-color-bg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-325)
          );
          --wui-color-bg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-350)
          );

          --wui-color-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-100)
          );
          --wui-color-success-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-125)
          );

          --wui-color-warning-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-warning-base-100)
          );

          --wui-color-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-100)
          );
          --wui-color-blue-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-100)
          );
          --wui-color-blue-90: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-90)
          );
          --wui-color-error-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-125)
          );

          --wui-icon-box-bg-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-error-base-100)
          );
          --wui-icon-box-bg-accent-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-blue-base-100)
          );
          --wui-icon-box-bg-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-success-base-100)
          );
          --wui-icon-box-bg-inverse-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-inverse-base-100)
          );

          --wui-all-wallets-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-all-wallets-bg-100)
          );

          --wui-avatar-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-avatar-border-base)
          );

          --wui-thumbnail-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-thumbnail-border-base)
          );

          --wui-wallet-button-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-wallet-button-bg-base)
          );
        }
      }
    `,
    light: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#fff")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-accent"])};
        --w3m-default: #fff;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(230, 100%, 67%, 1);
        --wui-color-blueberry-090: hsla(231, 76%, 61%, 1);
        --wui-color-blueberry-080: hsla(230, 59%, 55%, 1);
        --wui-color-blueberry-050: hsla(231, 100%, 70%, 0.1);

        --wui-color-fg-100: #e4e7e7;
        --wui-color-fg-125: #d0d5d5;
        --wui-color-fg-150: #a8b1b1;
        --wui-color-fg-175: #a8b0b0;
        --wui-color-fg-200: #949e9e;
        --wui-color-fg-225: #868f8f;
        --wui-color-fg-250: #788080;
        --wui-color-fg-275: #788181;
        --wui-color-fg-300: #6e7777;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #363636;

        --wui-color-bg-100: #141414;
        --wui-color-bg-125: #191a1a;
        --wui-color-bg-150: #1e1f1f;
        --wui-color-bg-175: #222525;
        --wui-color-bg-200: #272a2a;
        --wui-color-bg-225: #2c3030;
        --wui-color-bg-250: #313535;
        --wui-color-bg-275: #363b3b;
        --wui-color-bg-300: #3b4040;
        --wui-color-bg-325: #252525;
        --wui-color-bg-350: #ffffff;

        --wui-color-success-base-100: #26d962;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f25a67;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 217, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 217, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 217, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 217, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 217, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 217, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 217, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 217, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 217, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 217, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(242, 90, 103, 0.01);
        --wui-color-error-glass-002: rgba(242, 90, 103, 0.02);
        --wui-color-error-glass-005: rgba(242, 90, 103, 0.05);
        --wui-color-error-glass-010: rgba(242, 90, 103, 0.1);
        --wui-color-error-glass-015: rgba(242, 90, 103, 0.15);
        --wui-color-error-glass-020: rgba(242, 90, 103, 0.2);
        --wui-color-error-glass-025: rgba(242, 90, 103, 0.25);
        --wui-color-error-glass-030: rgba(242, 90, 103, 0.3);
        --wui-color-error-glass-060: rgba(242, 90, 103, 0.6);
        --wui-color-error-glass-080: rgba(242, 90, 103, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-color-gray-glass-001: rgba(255, 255, 255, 0.01);
        --wui-color-gray-glass-002: rgba(255, 255, 255, 0.02);
        --wui-color-gray-glass-005: rgba(255, 255, 255, 0.05);
        --wui-color-gray-glass-010: rgba(255, 255, 255, 0.1);
        --wui-color-gray-glass-015: rgba(255, 255, 255, 0.15);
        --wui-color-gray-glass-020: rgba(255, 255, 255, 0.2);
        --wui-color-gray-glass-025: rgba(255, 255, 255, 0.25);
        --wui-color-gray-glass-030: rgba(255, 255, 255, 0.3);
        --wui-color-gray-glass-060: rgba(255, 255, 255, 0.6);
        --wui-color-gray-glass-080: rgba(255, 255, 255, 0.8);
        --wui-color-gray-glass-090: rgba(255, 255, 255, 0.9);

        --wui-color-dark-glass-100: rgba(42, 42, 42, 1);

        --wui-icon-box-bg-error-base-100: #3c2426;
        --wui-icon-box-bg-blue-base-100: #20303f;
        --wui-icon-box-bg-success-base-100: #1f3a28;
        --wui-icon-box-bg-inverse-base-100: #243240;

        --wui-all-wallets-bg-100: #222b35;

        --wui-avatar-border-base: #252525;

        --wui-thumbnail-border-base: #252525;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --w3m-card-embedded-shadow-color: rgb(17 17 18 / 25%);
      }
    `,
    dark: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#000")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-accent"])};
        --w3m-default: #000;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(231, 100%, 70%, 1);
        --wui-color-blueberry-090: hsla(231, 97%, 72%, 1);
        --wui-color-blueberry-080: hsla(231, 92%, 74%, 1);

        --wui-color-fg-100: #141414;
        --wui-color-fg-125: #2d3131;
        --wui-color-fg-150: #474d4d;
        --wui-color-fg-175: #636d6d;
        --wui-color-fg-200: #798686;
        --wui-color-fg-225: #828f8f;
        --wui-color-fg-250: #8b9797;
        --wui-color-fg-275: #95a0a0;
        --wui-color-fg-300: #9ea9a9;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #d0d0d0;

        --wui-color-bg-100: #ffffff;
        --wui-color-bg-125: #f5fafa;
        --wui-color-bg-150: #f3f8f8;
        --wui-color-bg-175: #eef4f4;
        --wui-color-bg-200: #eaf1f1;
        --wui-color-bg-225: #e5eded;
        --wui-color-bg-250: #e1e9e9;
        --wui-color-bg-275: #dce7e7;
        --wui-color-bg-300: #d8e3e3;
        --wui-color-bg-325: #f3f3f3;
        --wui-color-bg-350: #202020;

        --wui-color-success-base-100: #26b562;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f05142;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 181, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 181, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 181, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 181, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 181, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 181, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 181, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 181, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 181, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 181, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(240, 81, 66, 0.01);
        --wui-color-error-glass-002: rgba(240, 81, 66, 0.02);
        --wui-color-error-glass-005: rgba(240, 81, 66, 0.05);
        --wui-color-error-glass-010: rgba(240, 81, 66, 0.1);
        --wui-color-error-glass-015: rgba(240, 81, 66, 0.15);
        --wui-color-error-glass-020: rgba(240, 81, 66, 0.2);
        --wui-color-error-glass-025: rgba(240, 81, 66, 0.25);
        --wui-color-error-glass-030: rgba(240, 81, 66, 0.3);
        --wui-color-error-glass-060: rgba(240, 81, 66, 0.6);
        --wui-color-error-glass-080: rgba(240, 81, 66, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-icon-box-bg-error-base-100: #f4dfdd;
        --wui-icon-box-bg-blue-base-100: #d9ecfb;
        --wui-icon-box-bg-success-base-100: #daf0e4;
        --wui-icon-box-bg-inverse-base-100: #dcecfc;

        --wui-all-wallets-bg-100: #e8f1fa;

        --wui-avatar-border-base: #f3f4f4;

        --wui-thumbnail-border-base: #eaefef;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --wui-color-gray-glass-001: rgba(0, 0, 0, 0.01);
        --wui-color-gray-glass-002: rgba(0, 0, 0, 0.02);
        --wui-color-gray-glass-005: rgba(0, 0, 0, 0.05);
        --wui-color-gray-glass-010: rgba(0, 0, 0, 0.1);
        --wui-color-gray-glass-015: rgba(0, 0, 0, 0.15);
        --wui-color-gray-glass-020: rgba(0, 0, 0, 0.2);
        --wui-color-gray-glass-025: rgba(0, 0, 0, 0.25);
        --wui-color-gray-glass-030: rgba(0, 0, 0, 0.3);
        --wui-color-gray-glass-060: rgba(0, 0, 0, 0.6);
        --wui-color-gray-glass-080: rgba(0, 0, 0, 0.8);
        --wui-color-gray-glass-090: rgba(0, 0, 0, 0.9);

        --wui-color-dark-glass-100: rgba(233, 233, 233, 1);

        --w3m-card-embedded-shadow-color: rgb(224 225 233 / 25%);
      }
    `
  };
}
var resetStyles = css`
  *,
  *::after,
  *::before,
  :host {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    font-family: var(--wui-font-family);
    backface-visibility: hidden;
  }
`;
var elementStyles = css`
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition:
      color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      background-color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1),
      box-shadow var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: background-color, color, border, box-shadow, border-radius;
    outline: none;
    border: none;
    column-gap: var(--wui-spacing-3xs);
    background-color: transparent;
    text-decoration: none;
  }

  wui-flex {
    transition: border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: border-radius;
  }

  button:disabled > wui-wallet-image,
  button:disabled > wui-all-wallets-image,
  button:disabled > wui-network-image,
  button:disabled > wui-image,
  button:disabled > wui-transaction-visual,
  button:disabled > wui-logo {
    filter: grayscale(1);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-gray-glass-005);
    }

    button:active:enabled {
      background-color: var(--wui-color-gray-glass-010);
    }
  }

  button:disabled > wui-icon-box {
    opacity: 0.5;
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`;
var colorStyles = css`
  .wui-color-inherit {
    color: var(--wui-color-inherit);
  }

  .wui-color-accent-100 {
    color: var(--wui-color-accent-100);
  }

  .wui-color-error-100 {
    color: var(--wui-color-error-100);
  }

  .wui-color-blue-100 {
    color: var(--wui-color-blue-100);
  }

  .wui-color-blue-90 {
    color: var(--wui-color-blue-90);
  }

  .wui-color-error-125 {
    color: var(--wui-color-error-125);
  }

  .wui-color-success-100 {
    color: var(--wui-color-success-100);
  }

  .wui-color-success-125 {
    color: var(--wui-color-success-125);
  }

  .wui-color-inverse-100 {
    color: var(--wui-color-inverse-100);
  }

  .wui-color-inverse-000 {
    color: var(--wui-color-inverse-000);
  }

  .wui-color-fg-100 {
    color: var(--wui-color-fg-100);
  }

  .wui-color-fg-200 {
    color: var(--wui-color-fg-200);
  }

  .wui-color-fg-300 {
    color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    color: var(--wui-color-fg-350);
  }

  .wui-bg-color-inherit {
    background-color: var(--wui-color-inherit);
  }

  .wui-bg-color-blue-100 {
    background-color: var(--wui-color-accent-100);
  }

  .wui-bg-color-error-100 {
    background-color: var(--wui-color-error-100);
  }

  .wui-bg-color-error-125 {
    background-color: var(--wui-color-error-125);
  }

  .wui-bg-color-success-100 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-success-125 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-inverse-100 {
    background-color: var(--wui-color-inverse-100);
  }

  .wui-bg-color-inverse-000 {
    background-color: var(--wui-color-inverse-000);
  }

  .wui-bg-color-fg-100 {
    background-color: var(--wui-color-fg-100);
  }

  .wui-bg-color-fg-200 {
    background-color: var(--wui-color-fg-200);
  }

  .wui-bg-color-fg-300 {
    background-color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    background-color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    background-color: var(--wui-color-fg-350);
  }
`;

// ../../node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js
var UiHelperUtil = {
  getSpacingStyles(spacing, index2) {
    if (Array.isArray(spacing)) {
      return spacing[index2] ? `var(--wui-spacing-${spacing[index2]})` : void 0;
    } else if (typeof spacing === "string") {
      return `var(--wui-spacing-${spacing})`;
    }
    return void 0;
  },
  getFormattedDate(date) {
    return new Intl.DateTimeFormat("en-US", { month: "short", day: "numeric" }).format(date);
  },
  getHostName(url) {
    try {
      const newUrl = new URL(url);
      return newUrl.hostname;
    } catch (error) {
      return "";
    }
  },
  getTruncateString({ string: string2, charsStart, charsEnd, truncate }) {
    if (string2.length <= charsStart + charsEnd) {
      return string2;
    }
    if (truncate === "end") {
      return `${string2.substring(0, charsStart)}...`;
    } else if (truncate === "start") {
      return `...${string2.substring(string2.length - charsEnd)}`;
    }
    return `${string2.substring(0, Math.floor(charsStart))}...${string2.substring(string2.length - Math.floor(charsEnd))}`;
  },
  generateAvatarColors(address) {
    const hash = address.toLowerCase().replace(/^0x/iu, "").replace(/[^a-f0-9]/gu, "");
    const baseColor = hash.substring(0, 6).padEnd(6, "0");
    const rgbColor = this.hexToRgb(baseColor);
    const masterBorderRadius = getComputedStyle(document.documentElement).getPropertyValue("--w3m-border-radius-master");
    const radius = Number(masterBorderRadius == null ? void 0 : masterBorderRadius.replace("px", ""));
    const edge = 100 - 3 * radius;
    const gradientCircle = `${edge}% ${edge}% at 65% 40%`;
    const colors = [];
    for (let i6 = 0; i6 < 5; i6 += 1) {
      const tintedColor = this.tintColor(rgbColor, 0.15 * i6);
      colors.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`);
    }
    return `
    --local-color-1: ${colors[0]};
    --local-color-2: ${colors[1]};
    --local-color-3: ${colors[2]};
    --local-color-4: ${colors[3]};
    --local-color-5: ${colors[4]};
    --local-radial-circle: ${gradientCircle}
   `;
  },
  hexToRgb(hex) {
    const bigint = parseInt(hex, 16);
    const r4 = bigint >> 16 & 255;
    const g5 = bigint >> 8 & 255;
    const b6 = bigint & 255;
    return [r4, g5, b6];
  },
  tintColor(rgb, tint) {
    const [r4, g5, b6] = rgb;
    const tintedR = Math.round(r4 + (255 - r4) * tint);
    const tintedG = Math.round(g5 + (255 - g5) * tint);
    const tintedB = Math.round(b6 + (255 - b6) * tint);
    return [tintedR, tintedG, tintedB];
  },
  isNumber(character) {
    const regex = {
      number: /^[0-9]+$/u
    };
    return regex.number.test(character);
  },
  getColorTheme(theme) {
    var _a;
    if (theme) {
      return theme;
    } else if (typeof window !== "undefined" && window.matchMedia) {
      if ((_a = window.matchMedia("(prefers-color-scheme: dark)")) == null ? void 0 : _a.matches) {
        return "dark";
      }
      return "light";
    }
    return "dark";
  },
  splitBalance(input) {
    const parts = input.split(".");
    if (parts.length === 2) {
      return [parts[0], parts[1]];
    }
    return ["0", "00"];
  },
  roundNumber(number, threshold, fixed) {
    const roundedNumber = number.toString().length >= threshold ? Number(number).toFixed(fixed) : number;
    return roundedNumber;
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  }
};

// ../../node_modules/@reown/appkit-ui/dist/esm/src/utils/TransactionUtil.js
var FLOAT_FIXED_VALUE = 3;
var plusTypes = ["receive", "deposit", "borrow", "claim"];
var minusTypes = ["withdraw", "repay", "burn"];
var TransactionUtil = {
  getTransactionGroupTitle(year, month) {
    const currentYear = DateUtil.getYear();
    const monthName = DateUtil.getMonthNameByIndex(month);
    const isCurrentYear = year === currentYear;
    const groupTitle = isCurrentYear ? monthName : `${monthName} ${year}`;
    return groupTitle;
  },
  getTransactionImages(transfers) {
    const [transfer, secondTransfer] = transfers;
    const isAllNFT = Boolean(transfer) && (transfers == null ? void 0 : transfers.every((item) => Boolean(item.nft_info)));
    const haveMultipleTransfers = (transfers == null ? void 0 : transfers.length) > 1;
    const haveTwoTransfers = (transfers == null ? void 0 : transfers.length) === 2;
    if (haveTwoTransfers && !isAllNFT) {
      return [this.getTransactionImage(transfer), this.getTransactionImage(secondTransfer)];
    }
    if (haveMultipleTransfers) {
      return transfers.map((item) => this.getTransactionImage(item));
    }
    return [this.getTransactionImage(transfer)];
  },
  getTransactionImage(transfer) {
    return {
      type: TransactionUtil.getTransactionTransferTokenType(transfer),
      url: TransactionUtil.getTransactionImageURL(transfer)
    };
  },
  getTransactionImageURL(transfer) {
    var _a, _b, _c, _d, _e6;
    let imageURL = void 0;
    const isNFT = Boolean(transfer == null ? void 0 : transfer.nft_info);
    const isFungible = Boolean(transfer == null ? void 0 : transfer.fungible_info);
    if (transfer && isNFT) {
      imageURL = (_c = (_b = (_a = transfer == null ? void 0 : transfer.nft_info) == null ? void 0 : _a.content) == null ? void 0 : _b.preview) == null ? void 0 : _c.url;
    } else if (transfer && isFungible) {
      imageURL = (_e6 = (_d = transfer == null ? void 0 : transfer.fungible_info) == null ? void 0 : _d.icon) == null ? void 0 : _e6.url;
    }
    return imageURL;
  },
  getTransactionTransferTokenType(transfer) {
    if (transfer == null ? void 0 : transfer.fungible_info) {
      return "FUNGIBLE";
    } else if (transfer == null ? void 0 : transfer.nft_info) {
      return "NFT";
    }
    return void 0;
  },
  getTransactionDescriptions(transaction) {
    var _a, _b, _c;
    const type = (_a = transaction == null ? void 0 : transaction.metadata) == null ? void 0 : _a.operationType;
    const transfers = transaction == null ? void 0 : transaction.transfers;
    const haveTransfer = ((_b = transaction == null ? void 0 : transaction.transfers) == null ? void 0 : _b.length) > 0;
    const haveMultipleTransfers = ((_c = transaction == null ? void 0 : transaction.transfers) == null ? void 0 : _c.length) > 1;
    const isFungible = haveTransfer && (transfers == null ? void 0 : transfers.every((transfer) => Boolean(transfer == null ? void 0 : transfer.fungible_info)));
    const [firstTransfer, secondTransfer] = transfers;
    let firstDescription = this.getTransferDescription(firstTransfer);
    let secondDescription = this.getTransferDescription(secondTransfer);
    if (!haveTransfer) {
      const isSendOrReceive = type === "send" || type === "receive";
      if (isSendOrReceive && isFungible) {
        firstDescription = UiHelperUtil.getTruncateString({
          string: transaction == null ? void 0 : transaction.metadata.sentFrom,
          charsStart: 4,
          charsEnd: 6,
          truncate: "middle"
        });
        secondDescription = UiHelperUtil.getTruncateString({
          string: transaction == null ? void 0 : transaction.metadata.sentTo,
          charsStart: 4,
          charsEnd: 6,
          truncate: "middle"
        });
        return [firstDescription, secondDescription];
      }
      return [transaction.metadata.status];
    }
    if (haveMultipleTransfers) {
      return transfers.map((item) => this.getTransferDescription(item));
    }
    let prefix = "";
    if (plusTypes.includes(type)) {
      prefix = "+";
    } else if (minusTypes.includes(type)) {
      prefix = "-";
    }
    firstDescription = prefix.concat(firstDescription);
    return [firstDescription];
  },
  getTransferDescription(transfer) {
    var _a;
    let description = "";
    if (!transfer) {
      return description;
    }
    if (transfer == null ? void 0 : transfer.nft_info) {
      description = ((_a = transfer == null ? void 0 : transfer.nft_info) == null ? void 0 : _a.name) || "-";
    } else if (transfer == null ? void 0 : transfer.fungible_info) {
      description = this.getFungibleTransferDescription(transfer) || "-";
    }
    return description;
  },
  getFungibleTransferDescription(transfer) {
    var _a;
    if (!transfer) {
      return null;
    }
    const quantity = this.getQuantityFixedValue(transfer == null ? void 0 : transfer.quantity.numeric);
    const description = [quantity, (_a = transfer == null ? void 0 : transfer.fungible_info) == null ? void 0 : _a.symbol].join(" ").trim();
    return description;
  },
  getQuantityFixedValue(value) {
    if (!value) {
      return null;
    }
    const parsedValue = parseFloat(value);
    return parsedValue.toFixed(FLOAT_FIXED_VALUE);
  }
};

// ../../node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js
function standardCustomElement(tagName, descriptor) {
  const { kind, elements } = descriptor;
  return {
    kind,
    elements,
    finisher(clazz) {
      if (!customElements.get(tagName)) {
        customElements.define(tagName, clazz);
      }
    }
  };
}
function legacyCustomElement(tagName, clazz) {
  if (!customElements.get(tagName)) {
    customElements.define(tagName, clazz);
  }
  return clazz;
}
function customElement(tagName) {
  return function create4(classOrDescriptor) {
    return typeof classOrDescriptor === "function" ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);
  };
}

export {
  k2 as k,
  E2 as E,
  A,
  esm_default2 as esm_default,
  x5 as x,
  a,
  p,
  w,
  proxy,
  subscribe,
  snapshot,
  ref,
  subscribeKey,
  DateUtil,
  NetworkUtil,
  NumberUtil,
  InputUtil,
  ConstantsUtil,
  NavigationUtil,
  ParseUtil,
  getW3mThemeVariables,
  isReownName,
  ConstantsUtil2,
  StorageUtil,
  CoreHelperUtil,
  AssetController,
  AssetUtil,
  OptionsController,
  AlertController,
  EventsController,
  ApiController,
  RouterController,
  ThemeController,
  ConnectorController,
  SECURE_SITE_SDK,
  DEFAULT_LOG_LEVEL,
  SECURE_SITE_SDK_VERSION,
  W3mFrameConstants,
  W3mFrameRpcConstants,
  SnackController,
  SIWXUtil,
  TransactionsController,
  ConnectionController,
  PublicStateController,
  fallback2 as fallback,
  http2 as http,
  SendController,
  ChainController,
  BlockchainApiController,
  SwapController,
  AccountController,
  ModalController,
  OnRampController,
  TooltipController,
  EnsController,
  MathUtil,
  initializeTheming,
  setColorTheme,
  setThemeVariables,
  resetStyles,
  elementStyles,
  colorStyles,
  UiHelperUtil,
  TransactionUtil,
  customElement
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-EWULVIQE.js.map
